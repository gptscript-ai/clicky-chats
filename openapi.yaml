components:
    schemas:
        AssistantFileObject:
            description: A list of [Files](/docs/api-reference/files) attached to an `assistant`.
            properties:
                assistant_id:
                    description: The assistant ID that the file is attached to.
                    type: string
                created_at:
                    description: The Unix timestamp (in seconds) for when the assistant file was created.
                    type: integer
                id:
                    description: The identifier, which can be referenced in API endpoints.
                    type: string
                object:
                    description: The object type, which is always `assistant.file`.
                    enum:
                        - assistant.file
                    type: string
            required:
                - id
                - object
                - created_at
                - assistant_id
            title: Assistant files
            type: object
            x-oaiMeta:
                beta: true
                example: |
                    {
                      "id": "file-abc123",
                      "object": "assistant.file",
                      "created_at": 1699055364,
                      "assistant_id": "asst_abc123"
                    }
                name: The assistant file object
        AssistantObject:
            description: Represents an `assistant` that can call the model and use tools.
            properties:
                created_at:
                    description: The Unix timestamp (in seconds) for when the assistant was created.
                    type: integer
                description:
                    description: |
                        The description of the assistant. The maximum length is 512 characters.
                    maxLength: 512
                    nullable: true
                    type: string
                file_ids:
                    default: []
                    description: |
                        A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
                    items:
                        type: string
                    maxItems: 20
                    type: array
                id:
                    description: The identifier, which can be referenced in API endpoints.
                    type: string
                instructions:
                    description: |
                        The system instructions that the assistant uses. The maximum length is 32768 characters.
                    maxLength: 32768
                    nullable: true
                    type: string
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                model:
                    description: |
                        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
                    type: string
                name:
                    description: |
                        The name of the assistant. The maximum length is 256 characters.
                    maxLength: 256
                    nullable: true
                    type: string
                object:
                    description: The object type, which is always `assistant`.
                    enum:
                        - assistant
                    type: string
                tools:
                    default: []
                    description: |
                        A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
                    items:
                        oneOf:
                            - $ref: '#/components/schemas/AssistantToolsCode'
                            - $ref: '#/components/schemas/AssistantToolsRetrieval'
                            - $ref: '#/components/schemas/AssistantToolsFunction'
                        x-oaiExpandable: true
                    maxItems: 128
                    type: array
            required:
                - id
                - object
                - created_at
                - name
                - description
                - model
                - instructions
                - tools
                - file_ids
                - metadata
            title: Assistant
            type: object
            x-oaiMeta:
                beta: true
                example: |
                    {
                      "id": "asst_abc123",
                      "object": "assistant",
                      "created_at": 1698984975,
                      "name": "Math Tutor",
                      "description": null,
                      "model": "gpt-4",
                      "instructions": "You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
                      "tools": [
                        {
                          "type": "code_interpreter"
                        }
                      ],
                      "file_ids": [],
                      "metadata": {}
                    }
                name: The assistant object
        AssistantToolsCode:
            properties:
                type:
                    description: 'The type of tool being defined: `code_interpreter`'
                    enum:
                        - code_interpreter
                    type: string
            required:
                - type
            title: Code interpreter tool
            type: object
        AssistantToolsFunction:
            properties:
                function:
                    $ref: '#/components/schemas/FunctionObject'
                type:
                    description: 'The type of tool being defined: `function`'
                    enum:
                        - function
                    type: string
            required:
                - type
                - function
            title: Function tool
            type: object
        AssistantToolsRetrieval:
            properties:
                type:
                    description: 'The type of tool being defined: `retrieval`'
                    enum:
                        - retrieval
                    type: string
            required:
                - type
            title: Retrieval tool
            type: object
        ChatCompletionFunctionCallOption:
            description: |
                Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
            properties:
                name:
                    description: The name of the function to call.
                    type: string
            required:
                - name
            type: object
        ChatCompletionFunctions:
            deprecated: true
            properties:
                description:
                    description: A description of what the function does, used by the model to choose when and how to call the function.
                    type: string
                name:
                    description: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
                    type: string
                parameters:
                    $ref: '#/components/schemas/FunctionParameters'
            required:
                - name
            type: object
        ChatCompletionMessageToolCall:
            properties:
                function:
                    description: The function that the model called.
                    properties:
                        arguments:
                            description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                            type: string
                        name:
                            description: The name of the function to call.
                            type: string
                    required:
                        - name
                        - arguments
                    type: object
                id:
                    description: The ID of the tool call.
                    type: string
                type:
                    description: The type of the tool. Currently, only `function` is supported.
                    enum:
                        - function
                    type: string
            required:
                - id
                - type
                - function
            type: object
        ChatCompletionMessageToolCallChunk:
            properties:
                function:
                    properties:
                        arguments:
                            description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                            type: string
                        name:
                            description: The name of the function to call.
                            type: string
                    type: object
                id:
                    description: The ID of the tool call.
                    type: string
                index:
                    type: integer
                type:
                    description: The type of the tool. Currently, only `function` is supported.
                    enum:
                        - function
                    type: string
            required:
                - index
            type: object
        ChatCompletionMessageToolCalls:
            description: The tool calls generated by the model, such as function calls.
            items:
                $ref: '#/components/schemas/ChatCompletionMessageToolCall'
            type: array
        ChatCompletionNamedToolChoice:
            description: Specifies a tool the model should use. Use to force the model to call a specific function.
            properties:
                function:
                    properties:
                        name:
                            description: The name of the function to call.
                            type: string
                    required:
                        - name
                    type: object
                type:
                    description: The type of the tool. Currently, only `function` is supported.
                    enum:
                        - function
                    type: string
            required:
                - type
                - function
            type: object
        ChatCompletionRequestAssistantMessage:
            properties:
                content:
                    description: |
                        The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
                    nullable: true
                    type: string
                function_call:
                    deprecated: true
                    description: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
                    properties:
                        arguments:
                            description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                            type: string
                        name:
                            description: The name of the function to call.
                            type: string
                    required:
                        - arguments
                        - name
                    type: object
                name:
                    description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
                    type: string
                role:
                    description: The role of the messages author, in this case `assistant`.
                    enum:
                        - assistant
                    type: string
                tool_calls:
                    $ref: '#/components/schemas/ChatCompletionMessageToolCalls'
            required:
                - role
            title: Assistant message
            type: object
        ChatCompletionRequestFunctionMessage:
            deprecated: true
            properties:
                content:
                    description: The contents of the function message.
                    nullable: true
                    type: string
                name:
                    description: The name of the function to call.
                    type: string
                role:
                    description: The role of the messages author, in this case `function`.
                    enum:
                        - function
                    type: string
            required:
                - role
                - content
                - name
            title: Function message
            type: object
        ChatCompletionRequestMessage:
            oneOf:
                - $ref: '#/components/schemas/ChatCompletionRequestSystemMessage'
                - $ref: '#/components/schemas/ChatCompletionRequestUserMessage'
                - $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage'
                - $ref: '#/components/schemas/ChatCompletionRequestToolMessage'
                - $ref: '#/components/schemas/ChatCompletionRequestFunctionMessage'
            x-oaiExpandable: true
        ChatCompletionRequestMessageContentPart:
            oneOf:
                - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
                - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartImage'
            x-oaiExpandable: true
        ChatCompletionRequestMessageContentPartImage:
            properties:
                image_url:
                    properties:
                        detail:
                            default: auto
                            description: Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision/low-or-high-fidelity-image-understanding).
                            enum:
                                - auto
                                - low
                                - high
                            type: string
                        url:
                            description: Either a URL of the image or the base64 encoded image data.
                            format: uri
                            type: string
                    required:
                        - url
                    type: object
                type:
                    description: The type of the content part.
                    enum:
                        - image_url
                    type: string
            required:
                - type
                - image_url
            title: Image content part
            type: object
        ChatCompletionRequestMessageContentPartText:
            properties:
                text:
                    description: The text content.
                    type: string
                type:
                    description: The type of the content part.
                    enum:
                        - text
                    type: string
            required:
                - type
                - text
            title: Text content part
            type: object
        ChatCompletionRequestSystemMessage:
            properties:
                content:
                    description: The contents of the system message.
                    type: string
                name:
                    description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
                    type: string
                role:
                    description: The role of the messages author, in this case `system`.
                    enum:
                        - system
                    type: string
            required:
                - content
                - role
            title: System message
            type: object
        ChatCompletionRequestToolMessage:
            properties:
                content:
                    description: The contents of the tool message.
                    type: string
                role:
                    description: The role of the messages author, in this case `tool`.
                    enum:
                        - tool
                    type: string
                tool_call_id:
                    description: Tool call that this message is responding to.
                    type: string
            required:
                - role
                - content
                - tool_call_id
            title: Tool message
            type: object
        ChatCompletionRequestUserMessage:
            properties:
                content:
                    description: |
                        The contents of the user message.
                    oneOf:
                        - description: The text contents of the message.
                          title: Text content
                          type: string
                        - description: An array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts. Image input is only supported when using the `gpt-4-visual-preview` model.
                          items:
                            $ref: '#/components/schemas/ChatCompletionRequestMessageContentPart'
                          minItems: 1
                          title: Array of content parts
                          type: array
                    x-oaiExpandable: true
                name:
                    description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
                    type: string
                role:
                    description: The role of the messages author, in this case `user`.
                    enum:
                        - user
                    type: string
            required:
                - content
                - role
            title: User message
            type: object
        ChatCompletionResponseMessage:
            description: A chat completion message generated by the model.
            properties:
                content:
                    description: The contents of the message.
                    nullable: true
                    type: string
                function_call:
                    deprecated: true
                    description: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
                    properties:
                        arguments:
                            description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                            type: string
                        name:
                            description: The name of the function to call.
                            type: string
                    required:
                        - name
                        - arguments
                    type: object
                role:
                    description: The role of the author of this message.
                    enum:
                        - assistant
                    type: string
                tool_calls:
                    $ref: '#/components/schemas/ChatCompletionMessageToolCalls'
            required:
                - role
                - content
            type: object
        ChatCompletionRole:
            description: The role of the author of a message
            enum:
                - system
                - user
                - assistant
                - tool
                - function
            type: string
        ChatCompletionStreamResponseDelta:
            description: A chat completion delta generated by streamed model responses.
            properties:
                content:
                    description: The contents of the chunk message.
                    nullable: true
                    type: string
                function_call:
                    deprecated: true
                    description: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
                    properties:
                        arguments:
                            description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                            type: string
                        name:
                            description: The name of the function to call.
                            type: string
                    type: object
                role:
                    description: The role of the author of this message.
                    enum:
                        - system
                        - user
                        - assistant
                        - tool
                    type: string
                tool_calls:
                    items:
                        $ref: '#/components/schemas/ChatCompletionMessageToolCallChunk'
                    type: array
            type: object
        ChatCompletionTokenLogprob:
            properties:
                bytes:
                    description: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
                    items:
                        type: integer
                    nullable: true
                    type: array
                logprob:
                    description: The log probability of this token.
                    type: number
                token:
                    description: The token.
                    type: string
                top_logprobs:
                    description: List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
                    items:
                        properties:
                            bytes:
                                description: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
                                items:
                                    type: integer
                                nullable: true
                                type: array
                            logprob:
                                description: The log probability of this token.
                                type: number
                            token:
                                description: The token.
                                type: string
                        required:
                            - token
                            - logprob
                            - bytes
                        type: object
                    type: array
            required:
                - token
                - logprob
                - bytes
                - top_logprobs
            type: object
        ChatCompletionTool:
            properties:
                function:
                    $ref: '#/components/schemas/FunctionObject'
                type:
                    description: The type of the tool. Currently, only `function` is supported.
                    enum:
                        - function
                    type: string
            required:
                - type
                - function
            type: object
        ChatCompletionToolChoiceOption:
            description: |
                Controls which (if any) function is called by the model.
                `none` means the model will not call a function and instead generates a message.
                `auto` means the model can pick between generating a message or calling a function.
                Specifying a particular function via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that function.

                `none` is the default when no functions are present. `auto` is the default if functions are present.
            oneOf:
                - description: |
                    `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
                  enum:
                    - none
                    - auto
                  type: string
                - $ref: '#/components/schemas/ChatCompletionNamedToolChoice'
            x-oaiExpandable: true
        CompletionUsage:
            description: Usage statistics for the completion request.
            properties:
                completion_tokens:
                    description: Number of tokens in the generated completion.
                    type: integer
                prompt_tokens:
                    description: Number of tokens in the prompt.
                    type: integer
                total_tokens:
                    description: Total number of tokens used in the request (prompt + completion).
                    type: integer
            required:
                - prompt_tokens
                - completion_tokens
                - total_tokens
            type: object
        CreateAssistantFileRequest:
            additionalProperties: false
            properties:
                file_id:
                    description: A [File](/docs/api-reference/files) ID (with `purpose="assistants"`) that the assistant should use. Useful for tools like `retrieval` and `code_interpreter` that can access files.
                    type: string
            required:
                - file_id
            type: object
        CreateAssistantRequest:
            additionalProperties: false
            properties:
                description:
                    description: |
                        The description of the assistant. The maximum length is 512 characters.
                    maxLength: 512
                    nullable: true
                    type: string
                file_ids:
                    default: []
                    description: |
                        A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
                    items:
                        type: string
                    maxItems: 20
                    type: array
                instructions:
                    description: |
                        The system instructions that the assistant uses. The maximum length is 32768 characters.
                    maxLength: 32768
                    nullable: true
                    type: string
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                model:
                    anyOf:
                        - type: string
                    description: |
                        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
                name:
                    description: |
                        The name of the assistant. The maximum length is 256 characters.
                    maxLength: 256
                    nullable: true
                    type: string
                tools:
                    default: []
                    description: |
                        A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
                    items:
                        oneOf:
                            - $ref: '#/components/schemas/AssistantToolsCode'
                            - $ref: '#/components/schemas/AssistantToolsRetrieval'
                            - $ref: '#/components/schemas/AssistantToolsFunction'
                        x-oaiExpandable: true
                    maxItems: 128
                    type: array
            required:
                - model
            type: object
        CreateChatCompletionFunctionResponse:
            description: Represents a chat completion response returned by model, based on the provided input.
            properties:
                choices:
                    description: A list of chat completion choices. Can be more than one if `n` is greater than 1.
                    items:
                        properties:
                            finish_reason:
                                description: |
                                    The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function.
                                enum:
                                    - stop
                                    - length
                                    - function_call
                                    - content_filter
                                type: string
                            index:
                                description: The index of the choice in the list of choices.
                                type: integer
                            message:
                                $ref: '#/components/schemas/ChatCompletionResponseMessage'
                        required:
                            - finish_reason
                            - index
                            - message
                            - logprobs
                        type: object
                    type: array
                created:
                    description: The Unix timestamp (in seconds) of when the chat completion was created.
                    type: integer
                id:
                    description: A unique identifier for the chat completion.
                    type: string
                model:
                    description: The model used for the chat completion.
                    type: string
                object:
                    description: The object type, which is always `chat.completion`.
                    enum:
                        - chat.completion
                    type: string
                system_fingerprint:
                    description: |
                        This fingerprint represents the backend configuration that the model runs with.

                        Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
                    type: string
                usage:
                    $ref: '#/components/schemas/CompletionUsage'
            required:
                - choices
                - created
                - id
                - model
                - object
            type: object
            x-oaiMeta:
                example: |
                    {
                      "id": "chatcmpl-abc123",
                      "object": "chat.completion",
                      "created": 1699896916,
                      "model": "gpt-3.5-turbo-0613",
                      "choices": [
                        {
                          "index": 0,
                          "message": {
                            "role": "assistant",
                            "content": null,
                            "tool_calls": [
                              {
                                "id": "call_abc123",
                                "type": "function",
                                "function": {
                                  "name": "get_current_weather",
                                  "arguments": "{\n\"location\": \"Boston, MA\"\n}"
                                }
                              }
                            ]
                          },
                          "logprobs": null,
                          "finish_reason": "tool_calls"
                        }
                      ],
                      "usage": {
                        "prompt_tokens": 82,
                        "completion_tokens": 17,
                        "total_tokens": 99
                      }
                    }
                group: chat
                name: The chat completion object
        CreateChatCompletionImageResponse:
            description: Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
            type: object
            x-oaiMeta:
                example: |
                    {
                      "id": "chatcmpl-123",
                      "object": "chat.completion",
                      "created": 1677652288,
                      "model": "gpt-3.5-turbo-0613",
                      "system_fingerprint": "fp_44709d6fcb",
                      "choices": [{
                        "index": 0,
                        "message": {
                          "role": "assistant",
                          "content": "\n\nHello there, how may I assist you today?",
                        },
                        "logprobs": null,
                        "finish_reason": "stop"
                      }],
                      "usage": {
                        "prompt_tokens": 9,
                        "completion_tokens": 12,
                        "total_tokens": 21
                      }
                    }
                group: chat
                name: The chat completion chunk object
        CreateChatCompletionRequest:
            properties:
                frequency_penalty:
                    default: 0
                    description: |
                        Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.

                        [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
                    maximum: 2
                    minimum: -2
                    nullable: true
                    type: number
                function_call:
                    deprecated: true
                    description: |
                        Deprecated in favor of `tool_choice`.

                        Controls which (if any) function is called by the model.
                        `none` means the model will not call a function and instead generates a message.
                        `auto` means the model can pick between generating a message or calling a function.
                        Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.

                        `none` is the default when no functions are present. `auto` is the default if functions are present.
                    oneOf:
                        - description: |
                            `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
                          enum:
                            - none
                            - auto
                          type: string
                        - $ref: '#/components/schemas/ChatCompletionFunctionCallOption'
                    x-oaiExpandable: true
                functions:
                    deprecated: true
                    description: |
                        Deprecated in favor of `tools`.

                        A list of functions the model may generate JSON inputs for.
                    items:
                        $ref: '#/components/schemas/ChatCompletionFunctions'
                    maxItems: 128
                    minItems: 1
                    type: array
                logit_bias:
                    additionalProperties:
                        type: integer
                    description: |
                        Modify the likelihood of specified tokens appearing in the completion.

                        Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                logprobs:
                    default: false
                    description: Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`. This option is currently not available on the `gpt-4-vision-preview` model.
                    nullable: true
                    type: boolean
                max_tokens:
                    description: |
                        The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.

                        The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
                    nullable: true
                    type: integer
                messages:
                    description: A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
                    items:
                        $ref: '#/components/schemas/ChatCompletionRequestMessage'
                    minItems: 1
                    type: array
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - gpt-4-0125-preview
                            - gpt-4-turbo-preview
                            - gpt-4-1106-preview
                            - gpt-4-vision-preview
                            - gpt-4
                            - gpt-4-0314
                            - gpt-4-0613
                            - gpt-4-32k
                            - gpt-4-32k-0314
                            - gpt-4-32k-0613
                            - gpt-3.5-turbo
                            - gpt-3.5-turbo-16k
                            - gpt-3.5-turbo-0301
                            - gpt-3.5-turbo-0613
                            - gpt-3.5-turbo-1106
                            - gpt-3.5-turbo-0125
                            - gpt-3.5-turbo-16k-0613
                          type: string
                    description: ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
                    example: gpt-3.5-turbo
                    x-oaiTypeLabel: string
                "n":
                    default: 1
                    description: How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
                    example: 1
                    maximum: 128
                    minimum: 1
                    nullable: true
                    type: integer
                presence_penalty:
                    default: 0
                    description: |
                        Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.

                        [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
                    maximum: 2
                    minimum: -2
                    nullable: true
                    type: number
                response_format:
                    description: |
                        An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.

                        Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON.

                        **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
                    properties:
                        type:
                            default: text
                            description: Must be one of `text` or `json_object`.
                            enum:
                                - text
                                - json_object
                            example: json_object
                            type: string
                    type: object
                seed:
                    description: |
                        This feature is in Beta.
                        If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
                        Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
                    maximum: 9223372036854776000
                    minimum: -9.223372036854776e+18
                    nullable: true
                    type: integer
                    x-oaiMeta:
                        beta: true
                stop:
                    description: |
                        Up to 4 sequences where the API will stop generating further tokens.
                    oneOf:
                        - nullable: true
                          type: string
                        - items:
                            type: string
                          maxItems: 4
                          minItems: 1
                          type: array
                stream:
                    default: false
                    description: |
                        If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
                    nullable: true
                    type: boolean
                temperature:
                    default: 1
                    description: |
                        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

                        We generally recommend altering this or `top_p` but not both.
                    example: 1
                    maximum: 2
                    minimum: 0
                    nullable: true
                    type: number
                tool_choice:
                    $ref: '#/components/schemas/ChatCompletionToolChoiceOption'
                tools:
                    description: |
                        A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.
                    items:
                        $ref: '#/components/schemas/ChatCompletionTool'
                    nullable: true
                    type: array
                top_logprobs:
                    description: An integer between 0 and 5 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
                    maximum: 5
                    minimum: 0
                    nullable: true
                    type: integer
                top_p:
                    default: 1
                    description: |
                        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

                        We generally recommend altering this or `temperature` but not both.
                    example: 1
                    maximum: 1
                    minimum: 0
                    nullable: true
                    type: number
                user:
                    description: |
                        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
                    example: user-1234
                    type: string
            required:
                - model
                - messages
            type: object
        CreateChatCompletionResponse:
            description: Represents a chat completion response returned by model, based on the provided input.
            properties:
                choices:
                    description: A list of chat completion choices. Can be more than one if `n` is greater than 1.
                    items:
                        properties:
                            finish_reason:
                                description: |
                                    The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                                    `length` if the maximum number of tokens specified in the request was reached,
                                    `content_filter` if content was omitted due to a flag from our content filters,
                                    `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                                enum:
                                    - stop
                                    - length
                                    - tool_calls
                                    - content_filter
                                    - function_call
                                type: string
                            index:
                                description: The index of the choice in the list of choices.
                                type: integer
                            logprobs:
                                description: Log probability information for the choice.
                                nullable: true
                                properties:
                                    content:
                                        description: A list of message content tokens with log probability information.
                                        items:
                                            $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                                        nullable: true
                                        type: array
                                required:
                                    - content
                                type: object
                            message:
                                $ref: '#/components/schemas/ChatCompletionResponseMessage'
                        required:
                            - finish_reason
                            - index
                            - message
                            - logprobs
                        type: object
                    type: array
                created:
                    description: The Unix timestamp (in seconds) of when the chat completion was created.
                    type: integer
                id:
                    description: A unique identifier for the chat completion.
                    type: string
                model:
                    description: The model used for the chat completion.
                    type: string
                object:
                    description: The object type, which is always `chat.completion`.
                    enum:
                        - chat.completion
                    type: string
                system_fingerprint:
                    description: |
                        This fingerprint represents the backend configuration that the model runs with.

                        Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
                    type: string
                usage:
                    $ref: '#/components/schemas/CompletionUsage'
            required:
                - choices
                - created
                - id
                - model
                - object
            type: object
            x-oaiMeta:
                example: |
                    {
                      "id": "chatcmpl-123",
                      "object": "chat.completion",
                      "created": 1677652288,
                      "model": "gpt-3.5-turbo-0613",
                      "system_fingerprint": "fp_44709d6fcb",
                      "choices": [{
                        "index": 0,
                        "message": {
                          "role": "assistant",
                          "content": "\n\nHello there, how may I assist you today?",
                        },
                        "logprobs": null,
                        "finish_reason": "stop"
                      }],
                      "usage": {
                        "prompt_tokens": 9,
                        "completion_tokens": 12,
                        "total_tokens": 21
                      }
                    }
                group: chat
                name: The chat completion object
        CreateChatCompletionStreamResponse:
            description: Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
            properties:
                choices:
                    description: A list of chat completion choices. Can be more than one if `n` is greater than 1.
                    items:
                        properties:
                            delta:
                                $ref: '#/components/schemas/ChatCompletionStreamResponseDelta'
                            finish_reason:
                                description: |
                                    The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                                    `length` if the maximum number of tokens specified in the request was reached,
                                    `content_filter` if content was omitted due to a flag from our content filters,
                                    `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                                enum:
                                    - stop
                                    - length
                                    - tool_calls
                                    - content_filter
                                    - function_call
                                nullable: true
                                type: string
                            index:
                                description: The index of the choice in the list of choices.
                                type: integer
                            logprobs:
                                description: Log probability information for the choice.
                                nullable: true
                                properties:
                                    content:
                                        description: A list of message content tokens with log probability information.
                                        items:
                                            $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                                        nullable: true
                                        type: array
                                required:
                                    - content
                                type: object
                        required:
                            - delta
                            - finish_reason
                            - index
                        type: object
                    type: array
                created:
                    description: The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
                    type: integer
                id:
                    description: A unique identifier for the chat completion. Each chunk has the same ID.
                    type: string
                model:
                    description: The model to generate the completion.
                    type: string
                object:
                    description: The object type, which is always `chat.completion.chunk`.
                    enum:
                        - chat.completion.chunk
                    type: string
                system_fingerprint:
                    description: |
                        This fingerprint represents the backend configuration that the model runs with.
                        Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
                    type: string
            required:
                - choices
                - created
                - id
                - model
                - object
            type: object
            x-oaiMeta:
                example: |
                    {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"role":"assistant","content":""},"logprobs":null,"finish_reason":null}]}

                    {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"Hello"},"logprobs":null,"finish_reason":null}]}

                    {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"!"},"logprobs":null,"finish_reason":null}]}

                    ....

                    {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":" today"},"logprobs":null,"finish_reason":null}]}

                    {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"?"},"logprobs":null,"finish_reason":null}]}

                    {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{},"logprobs":null,"finish_reason":"stop"}]}
                group: chat
                name: The chat completion chunk object
        CreateCompletionRequest:
            properties:
                best_of:
                    default: 1
                    description: |
                        Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.

                        When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.

                        **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
                    maximum: 20
                    minimum: 0
                    nullable: true
                    type: integer
                echo:
                    default: false
                    description: |
                        Echo back the prompt in addition to the completion
                    nullable: true
                    type: boolean
                frequency_penalty:
                    default: 0
                    description: |
                        Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.

                        [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
                    maximum: 2
                    minimum: -2
                    nullable: true
                    type: number
                logit_bias:
                    additionalProperties:
                        type: integer
                    description: |
                        Modify the likelihood of specified tokens appearing in the completion.

                        Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.

                        As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                logprobs:
                    description: |
                        Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.

                        The maximum value for `logprobs` is 5.
                    maximum: 5
                    minimum: 0
                    nullable: true
                    type: integer
                max_tokens:
                    default: 16
                    description: |
                        The maximum number of [tokens](/tokenizer) that can be generated in the completion.

                        The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
                    example: 16
                    minimum: 0
                    nullable: true
                    type: integer
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - gpt-3.5-turbo-instruct
                            - davinci-002
                            - babbage-002
                          type: string
                    description: |
                        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
                    x-oaiTypeLabel: string
                "n":
                    default: 1
                    description: |
                        How many completions to generate for each prompt.

                        **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
                    example: 1
                    maximum: 128
                    minimum: 1
                    nullable: true
                    type: integer
                presence_penalty:
                    default: 0
                    description: |
                        Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.

                        [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
                    maximum: 2
                    minimum: -2
                    nullable: true
                    type: number
                prompt:
                    default: <|endoftext|>
                    description: |
                        The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.

                        Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
                    nullable: true
                    oneOf:
                        - default: ""
                          example: This is a test.
                          type: string
                        - items:
                            default: ""
                            example: This is a test.
                            type: string
                          type: array
                        - example: '[1212, 318, 257, 1332, 13]'
                          items:
                            type: integer
                          minItems: 1
                          type: array
                        - example: '[[1212, 318, 257, 1332, 13]]'
                          items:
                            items:
                                type: integer
                            minItems: 1
                            type: array
                          minItems: 1
                          type: array
                seed:
                    description: |
                        If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.

                        Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
                    maximum: 9223372036854776000
                    minimum: -9.223372036854776e+18
                    nullable: true
                    type: integer
                stop:
                    description: |
                        Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
                    nullable: true
                    oneOf:
                        - default: <|endoftext|>
                          example: |4+
                          nullable: true
                          type: string
                        - items:
                            example: '["\n"]'
                            type: string
                          maxItems: 4
                          minItems: 1
                          type: array
                stream:
                    default: false
                    description: |
                        Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
                    nullable: true
                    type: boolean
                suffix:
                    description: The suffix that comes after a completion of inserted text.
                    example: test.
                    nullable: true
                    type: string
                temperature:
                    default: 1
                    description: |
                        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

                        We generally recommend altering this or `top_p` but not both.
                    example: 1
                    maximum: 2
                    minimum: 0
                    nullable: true
                    type: number
                top_p:
                    default: 1
                    description: |
                        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

                        We generally recommend altering this or `temperature` but not both.
                    example: 1
                    maximum: 1
                    minimum: 0
                    nullable: true
                    type: number
                user:
                    description: |
                        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
                    example: user-1234
                    type: string
            required:
                - model
                - prompt
            type: object
        CreateCompletionResponse:
            description: |
                Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).
            properties:
                choices:
                    description: The list of completion choices the model generated for the input prompt.
                    items:
                        properties:
                            finish_reason:
                                description: |
                                    The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                                    `length` if the maximum number of tokens specified in the request was reached,
                                    or `content_filter` if content was omitted due to a flag from our content filters.
                                enum:
                                    - stop
                                    - length
                                    - content_filter
                                type: string
                            index:
                                type: integer
                            logprobs:
                                nullable: true
                                properties:
                                    text_offset:
                                        items:
                                            type: integer
                                        type: array
                                    token_logprobs:
                                        items:
                                            type: number
                                        type: array
                                    tokens:
                                        items:
                                            type: string
                                        type: array
                                    top_logprobs:
                                        items:
                                            additionalProperties:
                                                type: number
                                            type: object
                                        type: array
                                type: object
                            text:
                                type: string
                        required:
                            - finish_reason
                            - index
                            - logprobs
                            - text
                        type: object
                    type: array
                created:
                    description: The Unix timestamp (in seconds) of when the completion was created.
                    type: integer
                id:
                    description: A unique identifier for the completion.
                    type: string
                model:
                    description: The model used for completion.
                    type: string
                object:
                    description: The object type, which is always "text_completion"
                    enum:
                        - text_completion
                    type: string
                system_fingerprint:
                    description: |
                        This fingerprint represents the backend configuration that the model runs with.

                        Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
                    type: string
                usage:
                    $ref: '#/components/schemas/CompletionUsage'
            required:
                - id
                - object
                - created
                - model
                - choices
            type: object
            x-oaiMeta:
                example: |
                    {
                      "id": "cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7",
                      "object": "text_completion",
                      "created": 1589478378,
                      "model": "gpt-3.5-turbo",
                      "choices": [
                        {
                          "text": "\n\nThis is indeed a test",
                          "index": 0,
                          "logprobs": null,
                          "finish_reason": "length"
                        }
                      ],
                      "usage": {
                        "prompt_tokens": 5,
                        "completion_tokens": 7,
                        "total_tokens": 12
                      }
                    }
                legacy: true
                name: The completion object
        CreateEmbeddingRequest:
            additionalProperties: false
            properties:
                dimensions:
                    description: |
                        The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
                    minimum: 1
                    type: integer
                encoding_format:
                    default: float
                    description: The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
                    enum:
                        - float
                        - base64
                    example: float
                    type: string
                input:
                    description: |
                        Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
                    example: The quick brown fox jumped over the lazy dog
                    oneOf:
                        - default: ""
                          description: The string that will be turned into an embedding.
                          example: This is a test.
                          title: string
                          type: string
                        - description: The array of strings that will be turned into an embedding.
                          items:
                            default: ""
                            example: '[''This is a test.'']'
                            type: string
                          maxItems: 2048
                          minItems: 1
                          title: array
                          type: array
                        - description: The array of integers that will be turned into an embedding.
                          example: '[1212, 318, 257, 1332, 13]'
                          items:
                            type: integer
                          maxItems: 2048
                          minItems: 1
                          title: array
                          type: array
                        - description: The array of arrays containing integers that will be turned into an embedding.
                          example: '[[1212, 318, 257, 1332, 13]]'
                          items:
                            items:
                                type: integer
                            minItems: 1
                            type: array
                          maxItems: 2048
                          minItems: 1
                          title: array
                          type: array
                    x-oaiExpandable: true
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - text-embedding-ada-002
                            - text-embedding-3-small
                            - text-embedding-3-large
                          type: string
                    description: |
                        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
                    example: text-embedding-3-small
                    x-oaiTypeLabel: string
                user:
                    description: |
                        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
                    example: user-1234
                    type: string
            required:
                - model
                - input
            type: object
        CreateEmbeddingResponse:
            properties:
                data:
                    description: The list of embeddings generated by the model.
                    items:
                        $ref: '#/components/schemas/Embedding'
                    type: array
                model:
                    description: The name of the model used to generate the embedding.
                    type: string
                object:
                    description: The object type, which is always "list".
                    enum:
                        - list
                    type: string
                usage:
                    description: The usage information for the request.
                    properties:
                        prompt_tokens:
                            description: The number of tokens used by the prompt.
                            type: integer
                        total_tokens:
                            description: The total number of tokens used by the request.
                            type: integer
                    required:
                        - prompt_tokens
                        - total_tokens
                    type: object
            required:
                - object
                - model
                - data
                - usage
            type: object
        CreateFileRequest:
            additionalProperties: false
            properties:
                file:
                    description: |
                        The File object (not file name) to be uploaded.
                    format: binary
                    type: string
                purpose:
                    description: |
                        The intended purpose of the uploaded file.

                        Use "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tuning) and "assistants" for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning.
                    enum:
                        - fine-tune
                        - assistants
                    type: string
            required:
                - file
                - purpose
            type: object
        CreateFineTuningJobRequest:
            properties:
                hyperparameters:
                    description: The hyperparameters used for the fine-tuning job.
                    properties:
                        batch_size:
                            default: auto
                            description: |
                                Number of examples in each batch. A larger batch size means that model parameters
                                are updated less frequently, but with lower variance.
                            oneOf:
                                - enum:
                                    - auto
                                  type: string
                                - maximum: 256
                                  minimum: 1
                                  type: integer
                        learning_rate_multiplier:
                            default: auto
                            description: |
                                Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
                                overfitting.
                            oneOf:
                                - enum:
                                    - auto
                                  type: string
                                - exclusiveMinimum: true
                                  minimum: 0
                                  type: number
                        n_epochs:
                            default: auto
                            description: |
                                The number of epochs to train the model for. An epoch refers to one full cycle
                                through the training dataset.
                            oneOf:
                                - enum:
                                    - auto
                                  type: string
                                - maximum: 50
                                  minimum: 1
                                  type: integer
                    type: object
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - babbage-002
                            - davinci-002
                            - gpt-3.5-turbo
                          type: string
                    description: |
                        The name of the model to fine-tune. You can select one of the
                        [supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned).
                    example: gpt-3.5-turbo
                    x-oaiTypeLabel: string
                suffix:
                    description: |
                        A string of up to 18 characters that will be added to your fine-tuned model name.

                        For example, a `suffix` of "custom-model-name" would produce a model name like `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`.
                    maxLength: 40
                    minLength: 1
                    nullable: true
                    type: string
                training_file:
                    description: |
                        The ID of an uploaded file that contains training data.

                        See [upload file](/docs/api-reference/files/upload) for how to upload a file.

                        Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.

                        See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
                    example: file-abc123
                    type: string
                validation_file:
                    description: |
                        The ID of an uploaded file that contains validation data.

                        If you provide this file, the data is used to generate validation
                        metrics periodically during fine-tuning. These metrics can be viewed in
                        the fine-tuning results file.
                        The same data should not be present in both train and validation files.

                        Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.

                        See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
                    example: file-abc123
                    nullable: true
                    type: string
            required:
                - model
                - training_file
            type: object
        CreateImageEditRequest:
            properties:
                image:
                    description: The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
                    format: binary
                    type: string
                mask:
                    description: An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
                    format: binary
                    type: string
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - dall-e-2
                          type: string
                    default: dall-e-2
                    description: The model to use for image generation. Only `dall-e-2` is supported at this time.
                    example: dall-e-2
                    nullable: true
                    x-oaiTypeLabel: string
                "n":
                    default: 1
                    description: The number of images to generate. Must be between 1 and 10.
                    example: 1
                    maximum: 10
                    minimum: 1
                    nullable: true
                    type: integer
                prompt:
                    description: A text description of the desired image(s). The maximum length is 1000 characters.
                    example: A cute baby sea otter wearing a beret
                    type: string
                response_format:
                    default: url
                    description: The format in which the generated images are returned. Must be one of `url` or `b64_json`.
                    enum:
                        - url
                        - b64_json
                    example: url
                    nullable: true
                    type: string
                size:
                    default: 1024x1024
                    description: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
                    enum:
                        - 256x256
                        - 512x512
                        - 1024x1024
                    example: 1024x1024
                    nullable: true
                    type: string
                user:
                    description: |
                        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
                    example: user-1234
                    type: string
            required:
                - prompt
                - image
            type: object
        CreateImageRequest:
            properties:
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - dall-e-2
                            - dall-e-3
                          type: string
                    default: dall-e-2
                    description: The model to use for image generation.
                    example: dall-e-3
                    nullable: true
                    x-oaiTypeLabel: string
                "n":
                    default: 1
                    description: The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
                    example: 1
                    maximum: 10
                    minimum: 1
                    nullable: true
                    type: integer
                prompt:
                    description: A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
                    example: A cute baby sea otter
                    type: string
                quality:
                    default: standard
                    description: The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
                    enum:
                        - standard
                        - hd
                    example: standard
                    type: string
                response_format:
                    default: url
                    description: The format in which the generated images are returned. Must be one of `url` or `b64_json`.
                    enum:
                        - url
                        - b64_json
                    example: url
                    nullable: true
                    type: string
                size:
                    default: 1024x1024
                    description: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
                    enum:
                        - 256x256
                        - 512x512
                        - 1024x1024
                        - 1792x1024
                        - 1024x1792
                    example: 1024x1024
                    nullable: true
                    type: string
                style:
                    default: vivid
                    description: The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
                    enum:
                        - vivid
                        - natural
                    example: vivid
                    nullable: true
                    type: string
                user:
                    description: |
                        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
                    example: user-1234
                    type: string
            required:
                - prompt
            type: object
        CreateImageVariationRequest:
            properties:
                image:
                    description: The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
                    format: binary
                    type: string
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - dall-e-2
                          type: string
                    default: dall-e-2
                    description: The model to use for image generation. Only `dall-e-2` is supported at this time.
                    example: dall-e-2
                    nullable: true
                    x-oaiTypeLabel: string
                "n":
                    default: 1
                    description: The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
                    example: 1
                    maximum: 10
                    minimum: 1
                    nullable: true
                    type: integer
                response_format:
                    default: url
                    description: The format in which the generated images are returned. Must be one of `url` or `b64_json`.
                    enum:
                        - url
                        - b64_json
                    example: url
                    nullable: true
                    type: string
                size:
                    default: 1024x1024
                    description: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
                    enum:
                        - 256x256
                        - 512x512
                        - 1024x1024
                    example: 1024x1024
                    nullable: true
                    type: string
                user:
                    description: |
                        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
                    example: user-1234
                    type: string
            required:
                - image
            type: object
        CreateMessageRequest:
            additionalProperties: false
            properties:
                content:
                    description: The content of the message.
                    maxLength: 32768
                    minLength: 1
                    type: string
                file_ids:
                    default: []
                    description: A list of [File](/docs/api-reference/files) IDs that the message should use. There can be a maximum of 10 files attached to a message. Useful for tools like `retrieval` and `code_interpreter` that can access and use files.
                    items:
                        type: string
                    maxItems: 10
                    type: array
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                role:
                    description: The role of the entity that is creating the message. Currently only `user` is supported.
                    enum:
                        - user
                    type: string
            required:
                - role
                - content
            type: object
        CreateModerationRequest:
            properties:
                input:
                    description: The input text to classify
                    oneOf:
                        - default: ""
                          example: I want to kill them.
                          type: string
                        - items:
                            default: ""
                            example: I want to kill them.
                            type: string
                          type: array
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - text-moderation-latest
                            - text-moderation-stable
                          type: string
                    default: text-moderation-latest
                    description: |
                        Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.

                        The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.
                    example: text-moderation-stable
                    x-oaiTypeLabel: string
            required:
                - input
            type: object
        CreateModerationResponse:
            description: Represents policy compliance report by OpenAI's content moderation model against a given input.
            properties:
                id:
                    description: The unique identifier for the moderation request.
                    type: string
                model:
                    description: The model used to generate the moderation results.
                    type: string
                results:
                    description: A list of moderation objects.
                    items:
                        properties:
                            categories:
                                description: A list of the categories, and whether they are flagged or not.
                                properties:
                                    harassment:
                                        description: Content that expresses, incites, or promotes harassing language towards any target.
                                        type: boolean
                                    harassment/threatening:
                                        description: Harassment content that also includes violence or serious harm towards any target.
                                        type: boolean
                                    hate:
                                        description: Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.
                                        type: boolean
                                    hate/threatening:
                                        description: Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
                                        type: boolean
                                    self-harm:
                                        description: Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
                                        type: boolean
                                    self-harm/instructions:
                                        description: Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.
                                        type: boolean
                                    self-harm/intent:
                                        description: Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.
                                        type: boolean
                                    sexual:
                                        description: Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).
                                        type: boolean
                                    sexual/minors:
                                        description: Sexual content that includes an individual who is under 18 years old.
                                        type: boolean
                                    violence:
                                        description: Content that depicts death, violence, or physical injury.
                                        type: boolean
                                    violence/graphic:
                                        description: Content that depicts death, violence, or physical injury in graphic detail.
                                        type: boolean
                                required:
                                    - hate
                                    - hate/threatening
                                    - harassment
                                    - harassment/threatening
                                    - self-harm
                                    - self-harm/intent
                                    - self-harm/instructions
                                    - sexual
                                    - sexual/minors
                                    - violence
                                    - violence/graphic
                                type: object
                            category_scores:
                                description: A list of the categories along with their scores as predicted by model.
                                properties:
                                    harassment:
                                        description: The score for the category 'harassment'.
                                        type: number
                                    harassment/threatening:
                                        description: The score for the category 'harassment/threatening'.
                                        type: number
                                    hate:
                                        description: The score for the category 'hate'.
                                        type: number
                                    hate/threatening:
                                        description: The score for the category 'hate/threatening'.
                                        type: number
                                    self-harm:
                                        description: The score for the category 'self-harm'.
                                        type: number
                                    self-harm/instructions:
                                        description: The score for the category 'self-harm/instructions'.
                                        type: number
                                    self-harm/intent:
                                        description: The score for the category 'self-harm/intent'.
                                        type: number
                                    sexual:
                                        description: The score for the category 'sexual'.
                                        type: number
                                    sexual/minors:
                                        description: The score for the category 'sexual/minors'.
                                        type: number
                                    violence:
                                        description: The score for the category 'violence'.
                                        type: number
                                    violence/graphic:
                                        description: The score for the category 'violence/graphic'.
                                        type: number
                                required:
                                    - hate
                                    - hate/threatening
                                    - harassment
                                    - harassment/threatening
                                    - self-harm
                                    - self-harm/intent
                                    - self-harm/instructions
                                    - sexual
                                    - sexual/minors
                                    - violence
                                    - violence/graphic
                                type: object
                            flagged:
                                description: Whether the content violates [OpenAI's usage policies](/policies/usage-policies).
                                type: boolean
                        required:
                            - flagged
                            - categories
                            - category_scores
                        type: object
                    type: array
            required:
                - id
                - model
                - results
            type: object
            x-oaiMeta:
                example: |
                    {
                      "id": "modr-XXXXX",
                      "model": "text-moderation-005",
                      "results": [
                        {
                          "flagged": true,
                          "categories": {
                            "sexual": false,
                            "hate": false,
                            "harassment": false,
                            "self-harm": false,
                            "sexual/minors": false,
                            "hate/threatening": false,
                            "violence/graphic": false,
                            "self-harm/intent": false,
                            "self-harm/instructions": false,
                            "harassment/threatening": true,
                            "violence": true,
                          },
                          "category_scores": {
                            "sexual": 1.2282071e-06,
                            "hate": 0.010696256,
                            "harassment": 0.29842457,
                            "self-harm": 1.5236925e-08,
                            "sexual/minors": 5.7246268e-08,
                            "hate/threatening": 0.0060676364,
                            "violence/graphic": 4.435014e-06,
                            "self-harm/intent": 8.098441e-10,
                            "self-harm/instructions": 2.8498655e-11,
                            "harassment/threatening": 0.63055265,
                            "violence": 0.99011886,
                          }
                        }
                      ]
                    }
                name: The moderation object
        CreateRunRequest:
            additionalProperties: false
            properties:
                additional_instructions:
                    description: Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
                    nullable: true
                    type: string
                assistant_id:
                    description: The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
                    type: string
                instructions:
                    description: Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
                    nullable: true
                    type: string
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                model:
                    description: The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
                    nullable: true
                    type: string
                tools:
                    description: Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
                    items:
                        oneOf:
                            - $ref: '#/components/schemas/AssistantToolsCode'
                            - $ref: '#/components/schemas/AssistantToolsRetrieval'
                            - $ref: '#/components/schemas/AssistantToolsFunction'
                        x-oaiExpandable: true
                    maxItems: 20
                    nullable: true
                    type: array
            required:
                - assistant_id
            type: object
        CreateSpeechRequest:
            additionalProperties: false
            properties:
                input:
                    description: The text to generate audio for. The maximum length is 4096 characters.
                    maxLength: 4096
                    type: string
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - tts-1
                            - tts-1-hd
                          type: string
                    description: |
                        One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd`
                    x-oaiTypeLabel: string
                response_format:
                    default: mp3
                    description: "The format to return audio in. \nSupported formats are `mp3`, `opus`, `aac`, `flac`, `pcm`, and `wav`. \n\nThe `pcm` audio format, similar to `wav` but without a header, utilizes a 24kHz sample rate, mono channel, and 16-bit depth in signed little-endian format."
                    enum:
                        - mp3
                        - opus
                        - aac
                        - flac
                        - pcm
                        - wav
                    type: string
                speed:
                    default: 1
                    description: The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
                    maximum: 4
                    minimum: 0.25
                    type: number
                voice:
                    description: The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
                    enum:
                        - alloy
                        - echo
                        - fable
                        - onyx
                        - nova
                        - shimmer
                    type: string
            required:
                - model
                - input
                - voice
            type: object
        CreateThreadAndRunRequest:
            additionalProperties: false
            properties:
                assistant_id:
                    description: The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
                    type: string
                instructions:
                    description: Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
                    nullable: true
                    type: string
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                model:
                    description: The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
                    nullable: true
                    type: string
                thread:
                    $ref: '#/components/schemas/CreateThreadRequest'
                tools:
                    description: Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
                    items:
                        oneOf:
                            - $ref: '#/components/schemas/AssistantToolsCode'
                            - $ref: '#/components/schemas/AssistantToolsRetrieval'
                            - $ref: '#/components/schemas/AssistantToolsFunction'
                    maxItems: 20
                    nullable: true
                    type: array
            required:
                - thread_id
                - assistant_id
            type: object
        CreateThreadRequest:
            additionalProperties: false
            properties:
                messages:
                    description: A list of [messages](/docs/api-reference/messages) to start the thread with.
                    items:
                        $ref: '#/components/schemas/CreateMessageRequest'
                    type: array
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
            type: object
        CreateTranscriptionRequest:
            additionalProperties: false
            properties:
                file:
                    description: |
                        The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
                    format: binary
                    type: string
                    x-oaiTypeLabel: file
                language:
                    description: |
                        The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.
                    type: string
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - whisper-1
                          type: string
                    description: |
                        ID of the model to use. Only `whisper-1` is currently available.
                    example: whisper-1
                    x-oaiTypeLabel: string
                prompt:
                    description: |
                        An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
                    type: string
                response_format:
                    default: json
                    description: |
                        The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
                    enum:
                        - json
                        - text
                        - srt
                        - verbose_json
                        - vtt
                    type: string
                temperature:
                    default: 0
                    description: |
                        The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
                    type: number
                timestamp_granularities[]:
                    default:
                        - segment
                    description: |
                        The timestamp granularities to populate for this transcription. Any of these options: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.
                    items:
                        enum:
                            - word
                            - segment
                        type: string
                    type: array
            required:
                - file
                - model
            type: object
        CreateTranscriptionResponse:
            properties:
                text:
                    type: string
            required:
                - text
            type: object
        CreateTranslationRequest:
            additionalProperties: false
            properties:
                file:
                    description: |
                        The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
                    format: binary
                    type: string
                    x-oaiTypeLabel: file
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - whisper-1
                          type: string
                    description: |
                        ID of the model to use. Only `whisper-1` is currently available.
                    example: whisper-1
                    x-oaiTypeLabel: string
                prompt:
                    description: |
                        An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.
                    type: string
                response_format:
                    default: json
                    description: |
                        The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
                    type: string
                temperature:
                    default: 0
                    description: |
                        The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
                    type: number
            required:
                - file
                - model
            type: object
        CreateTranslationResponse:
            properties:
                text:
                    type: string
            required:
                - text
            type: object
        DeleteAssistantFileResponse:
            description: Deletes the association between the assistant and the file, but does not delete the [File](/docs/api-reference/files) object itself.
            properties:
                deleted:
                    type: boolean
                id:
                    type: string
                object:
                    enum:
                        - assistant.file.deleted
                    type: string
            required:
                - id
                - object
                - deleted
            type: object
        DeleteAssistantResponse:
            properties:
                deleted:
                    type: boolean
                id:
                    type: string
                object:
                    enum:
                        - assistant.deleted
                    type: string
            required:
                - id
                - object
                - deleted
            type: object
        DeleteFileResponse:
            properties:
                deleted:
                    type: boolean
                id:
                    type: string
                object:
                    enum:
                        - file
                    type: string
            required:
                - id
                - object
                - deleted
            type: object
        DeleteMessageResponse:
            properties:
                deleted:
                    type: boolean
                id:
                    type: string
                object:
                    enum:
                        - thread.message.deleted
                    type: string
            required:
                - id
                - object
                - deleted
            type: object
        DeleteModelResponse:
            properties:
                deleted:
                    type: boolean
                id:
                    type: string
                object:
                    type: string
            required:
                - id
                - object
                - deleted
            type: object
        DeleteThreadResponse:
            properties:
                deleted:
                    type: boolean
                id:
                    type: string
                object:
                    enum:
                        - thread.deleted
                    type: string
            required:
                - id
                - object
                - deleted
            type: object
        Embedding:
            description: |
                Represents an embedding vector returned by embedding endpoint.
            properties:
                embedding:
                    description: |
                        The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).
                    items:
                        type: number
                    type: array
                index:
                    description: The index of the embedding in the list of embeddings.
                    type: integer
                object:
                    description: The object type, which is always "embedding".
                    enum:
                        - embedding
                    type: string
            required:
                - index
                - object
                - embedding
            type: object
            x-oaiMeta:
                example: |
                    {
                      "object": "embedding",
                      "embedding": [
                        0.0023064255,
                        -0.009327292,
                        .... (1536 floats total for ada-002)
                        -0.0028842222,
                      ],
                      "index": 0
                    }
                name: The embedding object
        Error:
            properties:
                code:
                    nullable: true
                    type: string
                message:
                    type: string
                param:
                    nullable: true
                    type: string
                type:
                    type: string
            required:
                - type
                - message
                - param
                - code
            type: object
        ErrorResponse:
            properties:
                error:
                    $ref: '#/components/schemas/Error'
            required:
                - error
            type: object
        ExtendedAssistantFileObject:
            description: A list of [Files](/docs/api-reference/files) attached to an `assistant`.
            properties:
                assistant_id:
                    description: The assistant ID that the file is attached to.
                    type: string
                created_at:
                    description: The Unix timestamp (in seconds) for when the assistant file was created.
                    type: integer
                id:
                    description: The identifier, which can be referenced in API endpoints.
                    type: string
                object:
                    description: The object type, which is always `assistant.file`.
                    enum:
                        - assistant.file
                    type: string
            required:
                - id
                - object
                - created_at
                - assistant_id
            title: Assistant files
            type: object
            x-oaiMeta:
                beta: true
                example: |
                    {
                      "id": "file-abc123",
                      "object": "assistant.file",
                      "created_at": 1699055364,
                      "assistant_id": "asst_abc123"
                    }
                name: The assistant file object
        ExtendedAssistantObject:
            description: Represents an `assistant` that can call the model and use tools.
            properties:
                created_at:
                    description: The Unix timestamp (in seconds) for when the assistant was created.
                    type: integer
                description:
                    description: |
                        The description of the assistant. The maximum length is 512 characters.
                    maxLength: 512
                    nullable: true
                    type: string
                file_ids:
                    default: []
                    description: |
                        A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
                    items:
                        type: string
                    maxItems: 20
                    type: array
                gptscript_tools:
                    default: []
                    description: A list of gptscript tools available to the assistant.
                    items:
                        type: string
                    maxItems: 128
                    type: array
                id:
                    description: The identifier, which can be referenced in API endpoints.
                    type: string
                instructions:
                    description: |
                        The system instructions that the assistant uses. The maximum length is 32768 characters.
                    maxLength: 32768
                    nullable: true
                    type: string
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                model:
                    description: |
                        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
                    type: string
                name:
                    description: |
                        The name of the assistant. The maximum length is 256 characters.
                    maxLength: 256
                    nullable: true
                    type: string
                object:
                    description: The object type, which is always `assistant`.
                    enum:
                        - assistant
                    type: string
                tools:
                    default: []
                    description: |
                        A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
                    items:
                        oneOf:
                            - $ref: '#/components/schemas/AssistantToolsCode'
                            - $ref: '#/components/schemas/AssistantToolsRetrieval'
                            - $ref: '#/components/schemas/AssistantToolsFunction'
                        x-oaiExpandable: true
                    maxItems: 128
                    type: array
            required:
                - id
                - object
                - created_at
                - name
                - description
                - model
                - instructions
                - tools
                - file_ids
                - metadata
            title: Assistant
            type: object
            x-oaiMeta:
                beta: true
                example: |
                    {
                      "id": "asst_abc123",
                      "object": "assistant",
                      "created_at": 1698984975,
                      "name": "Math Tutor",
                      "description": null,
                      "model": "gpt-4",
                      "instructions": "You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
                      "tools": [
                        {
                          "type": "code_interpreter"
                        }
                      ],
                      "file_ids": [],
                      "metadata": {}
                    }
                name: The assistant object
        ExtendedAssistantToolsCode:
            properties:
                type:
                    description: 'The type of tool being defined: `code_interpreter`'
                    enum:
                        - code_interpreter
                    type: string
            required:
                - type
            title: Code interpreter tool
            type: object
        ExtendedAssistantToolsFunction:
            properties:
                function:
                    $ref: '#/components/schemas/FunctionObject'
                type:
                    description: 'The type of tool being defined: `function`'
                    enum:
                        - function
                    type: string
            required:
                - type
                - function
            title: Function tool
            type: object
        ExtendedAssistantToolsRetrieval:
            properties:
                type:
                    description: 'The type of tool being defined: `retrieval`'
                    enum:
                        - retrieval
                    type: string
            required:
                - type
            title: Retrieval tool
            type: object
        ExtendedChatCompletionFunctionCallOption:
            description: |
                Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
            properties:
                name:
                    description: The name of the function to call.
                    type: string
            required:
                - name
            type: object
        ExtendedChatCompletionFunctions:
            deprecated: true
            properties:
                description:
                    description: A description of what the function does, used by the model to choose when and how to call the function.
                    type: string
                name:
                    description: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
                    type: string
                parameters:
                    $ref: '#/components/schemas/FunctionParameters'
            required:
                - name
            type: object
        ExtendedChatCompletionMessageToolCall:
            properties:
                function:
                    description: The function that the model called.
                    properties:
                        arguments:
                            description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                            type: string
                        name:
                            description: The name of the function to call.
                            type: string
                    required:
                        - name
                        - arguments
                    type: object
                id:
                    description: The ID of the tool call.
                    type: string
                type:
                    description: The type of the tool. Currently, only `function` is supported.
                    enum:
                        - function
                    type: string
            required:
                - id
                - type
                - function
            type: object
        ExtendedChatCompletionMessageToolCallChunk:
            properties:
                function:
                    properties:
                        arguments:
                            description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                            type: string
                        name:
                            description: The name of the function to call.
                            type: string
                    type: object
                id:
                    description: The ID of the tool call.
                    type: string
                index:
                    type: integer
                type:
                    description: The type of the tool. Currently, only `function` is supported.
                    enum:
                        - function
                    type: string
            required:
                - index
            type: object
        ExtendedChatCompletionMessageToolCalls:
            description: The tool calls generated by the model, such as function calls.
            items:
                $ref: '#/components/schemas/ChatCompletionMessageToolCall'
            type: array
        ExtendedChatCompletionNamedToolChoice:
            description: Specifies a tool the model should use. Use to force the model to call a specific function.
            properties:
                function:
                    properties:
                        name:
                            description: The name of the function to call.
                            type: string
                    required:
                        - name
                    type: object
                type:
                    description: The type of the tool. Currently, only `function` is supported.
                    enum:
                        - function
                    type: string
            required:
                - type
                - function
            type: object
        ExtendedChatCompletionRequestAssistantMessage:
            properties:
                content:
                    description: |
                        The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
                    nullable: true
                    type: string
                function_call:
                    deprecated: true
                    description: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
                    properties:
                        arguments:
                            description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                            type: string
                        name:
                            description: The name of the function to call.
                            type: string
                    required:
                        - arguments
                        - name
                    type: object
                name:
                    description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
                    type: string
                role:
                    description: The role of the messages author, in this case `assistant`.
                    enum:
                        - assistant
                    type: string
                tool_calls:
                    $ref: '#/components/schemas/ChatCompletionMessageToolCalls'
            required:
                - role
            title: Assistant message
            type: object
        ExtendedChatCompletionRequestFunctionMessage:
            deprecated: true
            properties:
                content:
                    description: The contents of the function message.
                    nullable: true
                    type: string
                name:
                    description: The name of the function to call.
                    type: string
                role:
                    description: The role of the messages author, in this case `function`.
                    enum:
                        - function
                    type: string
            required:
                - role
                - content
                - name
            title: Function message
            type: object
        ExtendedChatCompletionRequestMessage:
            oneOf:
                - $ref: '#/components/schemas/ChatCompletionRequestSystemMessage'
                - $ref: '#/components/schemas/ChatCompletionRequestUserMessage'
                - $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage'
                - $ref: '#/components/schemas/ChatCompletionRequestToolMessage'
                - $ref: '#/components/schemas/ChatCompletionRequestFunctionMessage'
            x-oaiExpandable: true
        ExtendedChatCompletionRequestMessageContentPart:
            oneOf:
                - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
                - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartImage'
            x-oaiExpandable: true
        ExtendedChatCompletionRequestMessageContentPartImage:
            properties:
                image_url:
                    properties:
                        detail:
                            default: auto
                            description: Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision/low-or-high-fidelity-image-understanding).
                            enum:
                                - auto
                                - low
                                - high
                            type: string
                        url:
                            description: Either a URL of the image or the base64 encoded image data.
                            format: uri
                            type: string
                    required:
                        - url
                    type: object
                type:
                    description: The type of the content part.
                    enum:
                        - image_url
                    type: string
            required:
                - type
                - image_url
            title: Image content part
            type: object
        ExtendedChatCompletionRequestMessageContentPartText:
            properties:
                text:
                    description: The text content.
                    type: string
                type:
                    description: The type of the content part.
                    enum:
                        - text
                    type: string
            required:
                - type
                - text
            title: Text content part
            type: object
        ExtendedChatCompletionRequestSystemMessage:
            properties:
                content:
                    description: The contents of the system message.
                    type: string
                name:
                    description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
                    type: string
                role:
                    description: The role of the messages author, in this case `system`.
                    enum:
                        - system
                    type: string
            required:
                - content
                - role
            title: System message
            type: object
        ExtendedChatCompletionRequestToolMessage:
            properties:
                content:
                    description: The contents of the tool message.
                    type: string
                role:
                    description: The role of the messages author, in this case `tool`.
                    enum:
                        - tool
                    type: string
                tool_call_id:
                    description: Tool call that this message is responding to.
                    type: string
            required:
                - role
                - content
                - tool_call_id
            title: Tool message
            type: object
        ExtendedChatCompletionRequestUserMessage:
            properties:
                content:
                    description: |
                        The contents of the user message.
                    oneOf:
                        - description: The text contents of the message.
                          title: Text content
                          type: string
                        - description: An array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts. Image input is only supported when using the `gpt-4-visual-preview` model.
                          items:
                            $ref: '#/components/schemas/ChatCompletionRequestMessageContentPart'
                          minItems: 1
                          title: Array of content parts
                          type: array
                    x-oaiExpandable: true
                name:
                    description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
                    type: string
                role:
                    description: The role of the messages author, in this case `user`.
                    enum:
                        - user
                    type: string
            required:
                - content
                - role
            title: User message
            type: object
        ExtendedChatCompletionResponseMessage:
            description: A chat completion message generated by the model.
            properties:
                content:
                    description: The contents of the message.
                    nullable: true
                    type: string
                function_call:
                    deprecated: true
                    description: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
                    properties:
                        arguments:
                            description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                            type: string
                        name:
                            description: The name of the function to call.
                            type: string
                    required:
                        - name
                        - arguments
                    type: object
                role:
                    description: The role of the author of this message.
                    enum:
                        - assistant
                    type: string
                tool_calls:
                    $ref: '#/components/schemas/ChatCompletionMessageToolCalls'
            required:
                - role
                - content
            type: object
        ExtendedChatCompletionRole:
            description: The role of the author of a message
            enum:
                - system
                - user
                - assistant
                - tool
                - function
            type: string
        ExtendedChatCompletionStreamResponseDelta:
            description: A chat completion delta generated by streamed model responses.
            properties:
                content:
                    description: The contents of the chunk message.
                    nullable: true
                    type: string
                function_call:
                    deprecated: true
                    description: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
                    properties:
                        arguments:
                            description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                            type: string
                        name:
                            description: The name of the function to call.
                            type: string
                    type: object
                role:
                    description: The role of the author of this message.
                    enum:
                        - system
                        - user
                        - assistant
                        - tool
                    type: string
                tool_calls:
                    items:
                        $ref: '#/components/schemas/ChatCompletionMessageToolCallChunk'
                    type: array
            type: object
        ExtendedChatCompletionTokenLogprob:
            properties:
                bytes:
                    description: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
                    items:
                        type: integer
                    nullable: true
                    type: array
                logprob:
                    description: The log probability of this token.
                    type: number
                token:
                    description: The token.
                    type: string
                top_logprobs:
                    description: List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
                    items:
                        properties:
                            bytes:
                                description: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
                                items:
                                    type: integer
                                nullable: true
                                type: array
                            logprob:
                                description: The log probability of this token.
                                type: number
                            token:
                                description: The token.
                                type: string
                        required:
                            - token
                            - logprob
                            - bytes
                        type: object
                    type: array
            required:
                - token
                - logprob
                - bytes
                - top_logprobs
            type: object
        ExtendedChatCompletionTool:
            properties:
                function:
                    $ref: '#/components/schemas/FunctionObject'
                type:
                    description: The type of the tool. Currently, only `function` is supported.
                    enum:
                        - function
                    type: string
            required:
                - type
                - function
            type: object
        ExtendedChatCompletionToolChoiceOption:
            description: |
                Controls which (if any) function is called by the model.
                `none` means the model will not call a function and instead generates a message.
                `auto` means the model can pick between generating a message or calling a function.
                Specifying a particular function via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that function.

                `none` is the default when no functions are present. `auto` is the default if functions are present.
            oneOf:
                - description: |
                    `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
                  enum:
                    - none
                    - auto
                  type: string
                - $ref: '#/components/schemas/ChatCompletionNamedToolChoice'
            x-oaiExpandable: true
        ExtendedCompletionUsage:
            description: Usage statistics for the completion request.
            properties:
                completion_tokens:
                    description: Number of tokens in the generated completion.
                    type: integer
                prompt_tokens:
                    description: Number of tokens in the prompt.
                    type: integer
                total_tokens:
                    description: Total number of tokens used in the request (prompt + completion).
                    type: integer
            required:
                - prompt_tokens
                - completion_tokens
                - total_tokens
            type: object
        ExtendedCreateAssistantFileRequest:
            additionalProperties: false
            properties:
                file_id:
                    description: A [File](/docs/api-reference/files) ID (with `purpose="assistants"`) that the assistant should use. Useful for tools like `retrieval` and `code_interpreter` that can access files.
                    type: string
            required:
                - file_id
            type: object
        ExtendedCreateAssistantRequest:
            additionalProperties: false
            properties:
                description:
                    description: |
                        The description of the assistant. The maximum length is 512 characters.
                    maxLength: 512
                    nullable: true
                    type: string
                file_ids:
                    default: []
                    description: |
                        A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
                    items:
                        type: string
                    maxItems: 20
                    type: array
                gptscript_tools:
                    default: []
                    description: A list of gptscript tools available to the assistant.
                    items:
                        type: string
                    maxItems: 128
                    type: array
                instructions:
                    description: |
                        The system instructions that the assistant uses. The maximum length is 32768 characters.
                    maxLength: 32768
                    nullable: true
                    type: string
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                model:
                    anyOf:
                        - type: string
                    description: |
                        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
                name:
                    description: |
                        The name of the assistant. The maximum length is 256 characters.
                    maxLength: 256
                    nullable: true
                    type: string
                tools:
                    default: []
                    description: |
                        A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
                    items:
                        oneOf:
                            - $ref: '#/components/schemas/AssistantToolsCode'
                            - $ref: '#/components/schemas/AssistantToolsRetrieval'
                            - $ref: '#/components/schemas/AssistantToolsFunction'
                        x-oaiExpandable: true
                    maxItems: 128
                    type: array
            required:
                - model
            type: object
        ExtendedCreateChatCompletionFunctionResponse:
            description: Represents a chat completion response returned by model, based on the provided input.
            properties:
                choices:
                    description: A list of chat completion choices. Can be more than one if `n` is greater than 1.
                    items:
                        properties:
                            finish_reason:
                                description: |
                                    The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function.
                                enum:
                                    - stop
                                    - length
                                    - function_call
                                    - content_filter
                                type: string
                            index:
                                description: The index of the choice in the list of choices.
                                type: integer
                            message:
                                $ref: '#/components/schemas/ChatCompletionResponseMessage'
                        required:
                            - finish_reason
                            - index
                            - message
                            - logprobs
                        type: object
                    type: array
                created:
                    description: The Unix timestamp (in seconds) of when the chat completion was created.
                    type: integer
                id:
                    description: A unique identifier for the chat completion.
                    type: string
                model:
                    description: The model used for the chat completion.
                    type: string
                object:
                    description: The object type, which is always `chat.completion`.
                    enum:
                        - chat.completion
                    type: string
                system_fingerprint:
                    description: |
                        This fingerprint represents the backend configuration that the model runs with.

                        Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
                    type: string
                usage:
                    $ref: '#/components/schemas/CompletionUsage'
            required:
                - choices
                - created
                - id
                - model
                - object
            type: object
            x-oaiMeta:
                example: |
                    {
                      "id": "chatcmpl-abc123",
                      "object": "chat.completion",
                      "created": 1699896916,
                      "model": "gpt-3.5-turbo-0613",
                      "choices": [
                        {
                          "index": 0,
                          "message": {
                            "role": "assistant",
                            "content": null,
                            "tool_calls": [
                              {
                                "id": "call_abc123",
                                "type": "function",
                                "function": {
                                  "name": "get_current_weather",
                                  "arguments": "{\n\"location\": \"Boston, MA\"\n}"
                                }
                              }
                            ]
                          },
                          "logprobs": null,
                          "finish_reason": "tool_calls"
                        }
                      ],
                      "usage": {
                        "prompt_tokens": 82,
                        "completion_tokens": 17,
                        "total_tokens": 99
                      }
                    }
                group: chat
                name: The chat completion object
        ExtendedCreateChatCompletionImageResponse:
            description: Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
            type: object
            x-oaiMeta:
                example: |
                    {
                      "id": "chatcmpl-123",
                      "object": "chat.completion",
                      "created": 1677652288,
                      "model": "gpt-3.5-turbo-0613",
                      "system_fingerprint": "fp_44709d6fcb",
                      "choices": [{
                        "index": 0,
                        "message": {
                          "role": "assistant",
                          "content": "\n\nHello there, how may I assist you today?",
                        },
                        "logprobs": null,
                        "finish_reason": "stop"
                      }],
                      "usage": {
                        "prompt_tokens": 9,
                        "completion_tokens": 12,
                        "total_tokens": 21
                      }
                    }
                group: chat
                name: The chat completion chunk object
        ExtendedCreateChatCompletionRequest:
            properties:
                frequency_penalty:
                    default: 0
                    description: |
                        Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.

                        [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
                    maximum: 2
                    minimum: -2
                    nullable: true
                    type: number
                function_call:
                    deprecated: true
                    description: |
                        Deprecated in favor of `tool_choice`.

                        Controls which (if any) function is called by the model.
                        `none` means the model will not call a function and instead generates a message.
                        `auto` means the model can pick between generating a message or calling a function.
                        Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.

                        `none` is the default when no functions are present. `auto` is the default if functions are present.
                    oneOf:
                        - description: |
                            `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
                          enum:
                            - none
                            - auto
                          type: string
                        - $ref: '#/components/schemas/ChatCompletionFunctionCallOption'
                    x-oaiExpandable: true
                functions:
                    deprecated: true
                    description: |
                        Deprecated in favor of `tools`.

                        A list of functions the model may generate JSON inputs for.
                    items:
                        $ref: '#/components/schemas/ChatCompletionFunctions'
                    maxItems: 128
                    minItems: 1
                    type: array
                logit_bias:
                    additionalProperties:
                        type: integer
                    description: |
                        Modify the likelihood of specified tokens appearing in the completion.

                        Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                logprobs:
                    default: false
                    description: Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`. This option is currently not available on the `gpt-4-vision-preview` model.
                    nullable: true
                    type: boolean
                max_tokens:
                    description: |
                        The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.

                        The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
                    nullable: true
                    type: integer
                messages:
                    description: A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
                    items:
                        $ref: '#/components/schemas/ChatCompletionRequestMessage'
                    minItems: 1
                    type: array
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - gpt-4-0125-preview
                            - gpt-4-turbo-preview
                            - gpt-4-1106-preview
                            - gpt-4-vision-preview
                            - gpt-4
                            - gpt-4-0314
                            - gpt-4-0613
                            - gpt-4-32k
                            - gpt-4-32k-0314
                            - gpt-4-32k-0613
                            - gpt-3.5-turbo
                            - gpt-3.5-turbo-16k
                            - gpt-3.5-turbo-0301
                            - gpt-3.5-turbo-0613
                            - gpt-3.5-turbo-1106
                            - gpt-3.5-turbo-0125
                            - gpt-3.5-turbo-16k-0613
                          type: string
                    description: ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
                    example: gpt-3.5-turbo
                    x-oaiTypeLabel: string
                "n":
                    default: 1
                    description: How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
                    example: 1
                    maximum: 128
                    minimum: 1
                    nullable: true
                    type: integer
                presence_penalty:
                    default: 0
                    description: |
                        Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.

                        [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
                    maximum: 2
                    minimum: -2
                    nullable: true
                    type: number
                response_format:
                    description: |
                        An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.

                        Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON.

                        **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
                    properties:
                        type:
                            default: text
                            description: Must be one of `text` or `json_object`.
                            enum:
                                - text
                                - json_object
                            example: json_object
                            type: string
                    type: object
                seed:
                    description: |
                        This feature is in Beta.
                        If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
                        Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
                    maximum: 9223372036854776000
                    minimum: -9.223372036854776e+18
                    nullable: true
                    type: integer
                    x-oaiMeta:
                        beta: true
                stop:
                    description: |
                        Up to 4 sequences where the API will stop generating further tokens.
                    oneOf:
                        - nullable: true
                          type: string
                        - items:
                            type: string
                          maxItems: 4
                          minItems: 1
                          type: array
                stream:
                    default: false
                    description: |
                        If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
                    nullable: true
                    type: boolean
                temperature:
                    default: 1
                    description: |
                        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

                        We generally recommend altering this or `top_p` but not both.
                    example: 1
                    maximum: 2
                    minimum: 0
                    nullable: true
                    type: number
                tool_choice:
                    $ref: '#/components/schemas/ChatCompletionToolChoiceOption'
                tools:
                    description: |
                        A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.
                    items:
                        $ref: '#/components/schemas/ChatCompletionTool'
                    nullable: true
                    type: array
                top_logprobs:
                    description: An integer between 0 and 5 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
                    maximum: 5
                    minimum: 0
                    nullable: true
                    type: integer
                top_p:
                    default: 1
                    description: |
                        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

                        We generally recommend altering this or `temperature` but not both.
                    example: 1
                    maximum: 1
                    minimum: 0
                    nullable: true
                    type: number
                user:
                    description: |
                        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
                    example: user-1234
                    type: string
            required:
                - model
                - messages
            type: object
        ExtendedCreateChatCompletionResponse:
            description: Represents a chat completion response returned by model, based on the provided input.
            properties:
                choices:
                    description: A list of chat completion choices. Can be more than one if `n` is greater than 1.
                    items:
                        properties:
                            finish_reason:
                                description: |
                                    The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                                    `length` if the maximum number of tokens specified in the request was reached,
                                    `content_filter` if content was omitted due to a flag from our content filters,
                                    `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                                enum:
                                    - stop
                                    - length
                                    - tool_calls
                                    - content_filter
                                    - function_call
                                type: string
                            index:
                                description: The index of the choice in the list of choices.
                                type: integer
                            logprobs:
                                description: Log probability information for the choice.
                                nullable: true
                                properties:
                                    content:
                                        description: A list of message content tokens with log probability information.
                                        items:
                                            $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                                        nullable: true
                                        type: array
                                required:
                                    - content
                                type: object
                            message:
                                $ref: '#/components/schemas/ChatCompletionResponseMessage'
                        required:
                            - finish_reason
                            - index
                            - message
                            - logprobs
                        type: object
                    type: array
                created:
                    description: The Unix timestamp (in seconds) of when the chat completion was created.
                    type: integer
                id:
                    description: A unique identifier for the chat completion.
                    type: string
                model:
                    description: The model used for the chat completion.
                    type: string
                object:
                    description: The object type, which is always `chat.completion`.
                    enum:
                        - chat.completion
                    type: string
                system_fingerprint:
                    description: |
                        This fingerprint represents the backend configuration that the model runs with.

                        Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
                    type: string
                usage:
                    $ref: '#/components/schemas/CompletionUsage'
            required:
                - choices
                - created
                - id
                - model
                - object
            type: object
            x-oaiMeta:
                example: |
                    {
                      "id": "chatcmpl-123",
                      "object": "chat.completion",
                      "created": 1677652288,
                      "model": "gpt-3.5-turbo-0613",
                      "system_fingerprint": "fp_44709d6fcb",
                      "choices": [{
                        "index": 0,
                        "message": {
                          "role": "assistant",
                          "content": "\n\nHello there, how may I assist you today?",
                        },
                        "logprobs": null,
                        "finish_reason": "stop"
                      }],
                      "usage": {
                        "prompt_tokens": 9,
                        "completion_tokens": 12,
                        "total_tokens": 21
                      }
                    }
                group: chat
                name: The chat completion object
        ExtendedCreateChatCompletionStreamResponse:
            description: Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
            properties:
                choices:
                    description: A list of chat completion choices. Can be more than one if `n` is greater than 1.
                    items:
                        properties:
                            delta:
                                $ref: '#/components/schemas/ChatCompletionStreamResponseDelta'
                            finish_reason:
                                description: |
                                    The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                                    `length` if the maximum number of tokens specified in the request was reached,
                                    `content_filter` if content was omitted due to a flag from our content filters,
                                    `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                                enum:
                                    - stop
                                    - length
                                    - tool_calls
                                    - content_filter
                                    - function_call
                                nullable: true
                                type: string
                            index:
                                description: The index of the choice in the list of choices.
                                type: integer
                            logprobs:
                                description: Log probability information for the choice.
                                nullable: true
                                properties:
                                    content:
                                        description: A list of message content tokens with log probability information.
                                        items:
                                            $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                                        nullable: true
                                        type: array
                                required:
                                    - content
                                type: object
                        required:
                            - delta
                            - finish_reason
                            - index
                        type: object
                    type: array
                created:
                    description: The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
                    type: integer
                id:
                    description: A unique identifier for the chat completion. Each chunk has the same ID.
                    type: string
                model:
                    description: The model to generate the completion.
                    type: string
                object:
                    description: The object type, which is always `chat.completion.chunk`.
                    enum:
                        - chat.completion.chunk
                    type: string
                system_fingerprint:
                    description: |
                        This fingerprint represents the backend configuration that the model runs with.
                        Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
                    type: string
            required:
                - choices
                - created
                - id
                - model
                - object
            type: object
            x-oaiMeta:
                example: |
                    {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"role":"assistant","content":""},"logprobs":null,"finish_reason":null}]}

                    {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"Hello"},"logprobs":null,"finish_reason":null}]}

                    {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"!"},"logprobs":null,"finish_reason":null}]}

                    ....

                    {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":" today"},"logprobs":null,"finish_reason":null}]}

                    {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"?"},"logprobs":null,"finish_reason":null}]}

                    {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{},"logprobs":null,"finish_reason":"stop"}]}
                group: chat
                name: The chat completion chunk object
        ExtendedCreateCompletionRequest:
            properties:
                best_of:
                    default: 1
                    description: |
                        Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.

                        When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.

                        **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
                    maximum: 20
                    minimum: 0
                    nullable: true
                    type: integer
                echo:
                    default: false
                    description: |
                        Echo back the prompt in addition to the completion
                    nullable: true
                    type: boolean
                frequency_penalty:
                    default: 0
                    description: |
                        Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.

                        [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
                    maximum: 2
                    minimum: -2
                    nullable: true
                    type: number
                logit_bias:
                    additionalProperties:
                        type: integer
                    description: |
                        Modify the likelihood of specified tokens appearing in the completion.

                        Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.

                        As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                logprobs:
                    description: |
                        Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.

                        The maximum value for `logprobs` is 5.
                    maximum: 5
                    minimum: 0
                    nullable: true
                    type: integer
                max_tokens:
                    default: 16
                    description: |
                        The maximum number of [tokens](/tokenizer) that can be generated in the completion.

                        The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
                    example: 16
                    minimum: 0
                    nullable: true
                    type: integer
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - gpt-3.5-turbo-instruct
                            - davinci-002
                            - babbage-002
                          type: string
                    description: |
                        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
                    x-oaiTypeLabel: string
                "n":
                    default: 1
                    description: |
                        How many completions to generate for each prompt.

                        **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
                    example: 1
                    maximum: 128
                    minimum: 1
                    nullable: true
                    type: integer
                presence_penalty:
                    default: 0
                    description: |
                        Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.

                        [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
                    maximum: 2
                    minimum: -2
                    nullable: true
                    type: number
                prompt:
                    default: <|endoftext|>
                    description: |
                        The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.

                        Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
                    nullable: true
                    oneOf:
                        - default: ""
                          example: This is a test.
                          type: string
                        - items:
                            default: ""
                            example: This is a test.
                            type: string
                          type: array
                        - example: '[1212, 318, 257, 1332, 13]'
                          items:
                            type: integer
                          minItems: 1
                          type: array
                        - example: '[[1212, 318, 257, 1332, 13]]'
                          items:
                            items:
                                type: integer
                            minItems: 1
                            type: array
                          minItems: 1
                          type: array
                seed:
                    description: |
                        If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.

                        Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
                    maximum: 9223372036854776000
                    minimum: -9.223372036854776e+18
                    nullable: true
                    type: integer
                stop:
                    description: |
                        Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
                    nullable: true
                    oneOf:
                        - default: <|endoftext|>
                          example: |4+
                          nullable: true
                          type: string
                        - items:
                            example: '["\n"]'
                            type: string
                          maxItems: 4
                          minItems: 1
                          type: array
                stream:
                    default: false
                    description: |
                        Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
                    nullable: true
                    type: boolean
                suffix:
                    description: The suffix that comes after a completion of inserted text.
                    example: test.
                    nullable: true
                    type: string
                temperature:
                    default: 1
                    description: |
                        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

                        We generally recommend altering this or `top_p` but not both.
                    example: 1
                    maximum: 2
                    minimum: 0
                    nullable: true
                    type: number
                top_p:
                    default: 1
                    description: |
                        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

                        We generally recommend altering this or `temperature` but not both.
                    example: 1
                    maximum: 1
                    minimum: 0
                    nullable: true
                    type: number
                user:
                    description: |
                        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
                    example: user-1234
                    type: string
            required:
                - model
                - prompt
            type: object
        ExtendedCreateCompletionResponse:
            description: |
                Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).
            properties:
                choices:
                    description: The list of completion choices the model generated for the input prompt.
                    items:
                        properties:
                            finish_reason:
                                description: |
                                    The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                                    `length` if the maximum number of tokens specified in the request was reached,
                                    or `content_filter` if content was omitted due to a flag from our content filters.
                                enum:
                                    - stop
                                    - length
                                    - content_filter
                                type: string
                            index:
                                type: integer
                            logprobs:
                                nullable: true
                                properties:
                                    text_offset:
                                        items:
                                            type: integer
                                        type: array
                                    token_logprobs:
                                        items:
                                            type: number
                                        type: array
                                    tokens:
                                        items:
                                            type: string
                                        type: array
                                    top_logprobs:
                                        items:
                                            additionalProperties:
                                                type: number
                                            type: object
                                        type: array
                                type: object
                            text:
                                type: string
                        required:
                            - finish_reason
                            - index
                            - logprobs
                            - text
                        type: object
                    type: array
                created:
                    description: The Unix timestamp (in seconds) of when the completion was created.
                    type: integer
                id:
                    description: A unique identifier for the completion.
                    type: string
                model:
                    description: The model used for completion.
                    type: string
                object:
                    description: The object type, which is always "text_completion"
                    enum:
                        - text_completion
                    type: string
                system_fingerprint:
                    description: |
                        This fingerprint represents the backend configuration that the model runs with.

                        Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
                    type: string
                usage:
                    $ref: '#/components/schemas/CompletionUsage'
            required:
                - id
                - object
                - created
                - model
                - choices
            type: object
            x-oaiMeta:
                example: |
                    {
                      "id": "cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7",
                      "object": "text_completion",
                      "created": 1589478378,
                      "model": "gpt-3.5-turbo",
                      "choices": [
                        {
                          "text": "\n\nThis is indeed a test",
                          "index": 0,
                          "logprobs": null,
                          "finish_reason": "length"
                        }
                      ],
                      "usage": {
                        "prompt_tokens": 5,
                        "completion_tokens": 7,
                        "total_tokens": 12
                      }
                    }
                legacy: true
                name: The completion object
        ExtendedCreateEmbeddingRequest:
            additionalProperties: false
            properties:
                dimensions:
                    description: |
                        The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
                    minimum: 1
                    type: integer
                encoding_format:
                    default: float
                    description: The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
                    enum:
                        - float
                        - base64
                    example: float
                    type: string
                input:
                    description: |
                        Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
                    example: The quick brown fox jumped over the lazy dog
                    oneOf:
                        - default: ""
                          description: The string that will be turned into an embedding.
                          example: This is a test.
                          title: string
                          type: string
                        - description: The array of strings that will be turned into an embedding.
                          items:
                            default: ""
                            example: '[''This is a test.'']'
                            type: string
                          maxItems: 2048
                          minItems: 1
                          title: array
                          type: array
                        - description: The array of integers that will be turned into an embedding.
                          example: '[1212, 318, 257, 1332, 13]'
                          items:
                            type: integer
                          maxItems: 2048
                          minItems: 1
                          title: array
                          type: array
                        - description: The array of arrays containing integers that will be turned into an embedding.
                          example: '[[1212, 318, 257, 1332, 13]]'
                          items:
                            items:
                                type: integer
                            minItems: 1
                            type: array
                          maxItems: 2048
                          minItems: 1
                          title: array
                          type: array
                    x-oaiExpandable: true
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - text-embedding-ada-002
                            - text-embedding-3-small
                            - text-embedding-3-large
                          type: string
                    description: |
                        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
                    example: text-embedding-3-small
                    x-oaiTypeLabel: string
                user:
                    description: |
                        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
                    example: user-1234
                    type: string
            required:
                - model
                - input
            type: object
        ExtendedCreateEmbeddingResponse:
            properties:
                data:
                    description: The list of embeddings generated by the model.
                    items:
                        $ref: '#/components/schemas/Embedding'
                    type: array
                model:
                    description: The name of the model used to generate the embedding.
                    type: string
                object:
                    description: The object type, which is always "list".
                    enum:
                        - list
                    type: string
                usage:
                    description: The usage information for the request.
                    properties:
                        prompt_tokens:
                            description: The number of tokens used by the prompt.
                            type: integer
                        total_tokens:
                            description: The total number of tokens used by the request.
                            type: integer
                    required:
                        - prompt_tokens
                        - total_tokens
                    type: object
            required:
                - object
                - model
                - data
                - usage
            type: object
        ExtendedCreateFileRequest:
            additionalProperties: false
            properties:
                file:
                    description: |
                        The File object (not file name) to be uploaded.
                    format: binary
                    type: string
                purpose:
                    description: |
                        The intended purpose of the uploaded file.

                        Use "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tuning) and "assistants" for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning.
                    enum:
                        - fine-tune
                        - assistants
                    type: string
            required:
                - file
                - purpose
            type: object
        ExtendedCreateFineTuningJobRequest:
            properties:
                hyperparameters:
                    description: The hyperparameters used for the fine-tuning job.
                    properties:
                        batch_size:
                            default: auto
                            description: |
                                Number of examples in each batch. A larger batch size means that model parameters
                                are updated less frequently, but with lower variance.
                            oneOf:
                                - enum:
                                    - auto
                                  type: string
                                - maximum: 256
                                  minimum: 1
                                  type: integer
                        learning_rate_multiplier:
                            default: auto
                            description: |
                                Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
                                overfitting.
                            oneOf:
                                - enum:
                                    - auto
                                  type: string
                                - exclusiveMinimum: true
                                  minimum: 0
                                  type: number
                        n_epochs:
                            default: auto
                            description: |
                                The number of epochs to train the model for. An epoch refers to one full cycle
                                through the training dataset.
                            oneOf:
                                - enum:
                                    - auto
                                  type: string
                                - maximum: 50
                                  minimum: 1
                                  type: integer
                    type: object
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - babbage-002
                            - davinci-002
                            - gpt-3.5-turbo
                          type: string
                    description: |
                        The name of the model to fine-tune. You can select one of the
                        [supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned).
                    example: gpt-3.5-turbo
                    x-oaiTypeLabel: string
                suffix:
                    description: |
                        A string of up to 18 characters that will be added to your fine-tuned model name.

                        For example, a `suffix` of "custom-model-name" would produce a model name like `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`.
                    maxLength: 40
                    minLength: 1
                    nullable: true
                    type: string
                training_file:
                    description: |
                        The ID of an uploaded file that contains training data.

                        See [upload file](/docs/api-reference/files/upload) for how to upload a file.

                        Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.

                        See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
                    example: file-abc123
                    type: string
                validation_file:
                    description: |
                        The ID of an uploaded file that contains validation data.

                        If you provide this file, the data is used to generate validation
                        metrics periodically during fine-tuning. These metrics can be viewed in
                        the fine-tuning results file.
                        The same data should not be present in both train and validation files.

                        Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.

                        See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
                    example: file-abc123
                    nullable: true
                    type: string
            required:
                - model
                - training_file
            type: object
        ExtendedCreateImageEditRequest:
            properties:
                image:
                    description: The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
                    format: binary
                    type: string
                mask:
                    description: An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
                    format: binary
                    type: string
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - dall-e-2
                          type: string
                    default: dall-e-2
                    description: The model to use for image generation. Only `dall-e-2` is supported at this time.
                    example: dall-e-2
                    nullable: true
                    x-oaiTypeLabel: string
                "n":
                    default: 1
                    description: The number of images to generate. Must be between 1 and 10.
                    example: 1
                    maximum: 10
                    minimum: 1
                    nullable: true
                    type: integer
                prompt:
                    description: A text description of the desired image(s). The maximum length is 1000 characters.
                    example: A cute baby sea otter wearing a beret
                    type: string
                response_format:
                    default: url
                    description: The format in which the generated images are returned. Must be one of `url` or `b64_json`.
                    enum:
                        - url
                        - b64_json
                    example: url
                    nullable: true
                    type: string
                size:
                    default: 1024x1024
                    description: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
                    enum:
                        - 256x256
                        - 512x512
                        - 1024x1024
                    example: 1024x1024
                    nullable: true
                    type: string
                user:
                    description: |
                        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
                    example: user-1234
                    type: string
            required:
                - prompt
                - image
            type: object
        ExtendedCreateImageRequest:
            properties:
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - dall-e-2
                            - dall-e-3
                          type: string
                    default: dall-e-2
                    description: The model to use for image generation.
                    example: dall-e-3
                    nullable: true
                    x-oaiTypeLabel: string
                "n":
                    default: 1
                    description: The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
                    example: 1
                    maximum: 10
                    minimum: 1
                    nullable: true
                    type: integer
                prompt:
                    description: A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
                    example: A cute baby sea otter
                    type: string
                quality:
                    default: standard
                    description: The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
                    enum:
                        - standard
                        - hd
                    example: standard
                    type: string
                response_format:
                    default: url
                    description: The format in which the generated images are returned. Must be one of `url` or `b64_json`.
                    enum:
                        - url
                        - b64_json
                    example: url
                    nullable: true
                    type: string
                size:
                    default: 1024x1024
                    description: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
                    enum:
                        - 256x256
                        - 512x512
                        - 1024x1024
                        - 1792x1024
                        - 1024x1792
                    example: 1024x1024
                    nullable: true
                    type: string
                style:
                    default: vivid
                    description: The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
                    enum:
                        - vivid
                        - natural
                    example: vivid
                    nullable: true
                    type: string
                user:
                    description: |
                        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
                    example: user-1234
                    type: string
            required:
                - prompt
            type: object
        ExtendedCreateImageVariationRequest:
            properties:
                image:
                    description: The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
                    format: binary
                    type: string
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - dall-e-2
                          type: string
                    default: dall-e-2
                    description: The model to use for image generation. Only `dall-e-2` is supported at this time.
                    example: dall-e-2
                    nullable: true
                    x-oaiTypeLabel: string
                "n":
                    default: 1
                    description: The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
                    example: 1
                    maximum: 10
                    minimum: 1
                    nullable: true
                    type: integer
                response_format:
                    default: url
                    description: The format in which the generated images are returned. Must be one of `url` or `b64_json`.
                    enum:
                        - url
                        - b64_json
                    example: url
                    nullable: true
                    type: string
                size:
                    default: 1024x1024
                    description: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
                    enum:
                        - 256x256
                        - 512x512
                        - 1024x1024
                    example: 1024x1024
                    nullable: true
                    type: string
                user:
                    description: |
                        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
                    example: user-1234
                    type: string
            required:
                - image
            type: object
        ExtendedCreateMessageRequest:
            additionalProperties: false
            properties:
                content:
                    description: The content of the message.
                    maxLength: 32768
                    minLength: 1
                    type: string
                file_ids:
                    default: []
                    description: A list of [File](/docs/api-reference/files) IDs that the message should use. There can be a maximum of 10 files attached to a message. Useful for tools like `retrieval` and `code_interpreter` that can access and use files.
                    items:
                        type: string
                    maxItems: 10
                    type: array
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                role:
                    description: The role of the entity that is creating the message. Currently only `user` is supported.
                    enum:
                        - user
                    type: string
            required:
                - role
                - content
            type: object
        ExtendedCreateModerationRequest:
            properties:
                input:
                    description: The input text to classify
                    oneOf:
                        - default: ""
                          example: I want to kill them.
                          type: string
                        - items:
                            default: ""
                            example: I want to kill them.
                            type: string
                          type: array
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - text-moderation-latest
                            - text-moderation-stable
                          type: string
                    default: text-moderation-latest
                    description: |
                        Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.

                        The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.
                    example: text-moderation-stable
                    x-oaiTypeLabel: string
            required:
                - input
            type: object
        ExtendedCreateModerationResponse:
            description: Represents policy compliance report by OpenAI's content moderation model against a given input.
            properties:
                id:
                    description: The unique identifier for the moderation request.
                    type: string
                model:
                    description: The model used to generate the moderation results.
                    type: string
                results:
                    description: A list of moderation objects.
                    items:
                        properties:
                            categories:
                                description: A list of the categories, and whether they are flagged or not.
                                properties:
                                    harassment:
                                        description: Content that expresses, incites, or promotes harassing language towards any target.
                                        type: boolean
                                    harassment/threatening:
                                        description: Harassment content that also includes violence or serious harm towards any target.
                                        type: boolean
                                    hate:
                                        description: Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.
                                        type: boolean
                                    hate/threatening:
                                        description: Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
                                        type: boolean
                                    self-harm:
                                        description: Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
                                        type: boolean
                                    self-harm/instructions:
                                        description: Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.
                                        type: boolean
                                    self-harm/intent:
                                        description: Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.
                                        type: boolean
                                    sexual:
                                        description: Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).
                                        type: boolean
                                    sexual/minors:
                                        description: Sexual content that includes an individual who is under 18 years old.
                                        type: boolean
                                    violence:
                                        description: Content that depicts death, violence, or physical injury.
                                        type: boolean
                                    violence/graphic:
                                        description: Content that depicts death, violence, or physical injury in graphic detail.
                                        type: boolean
                                required:
                                    - hate
                                    - hate/threatening
                                    - harassment
                                    - harassment/threatening
                                    - self-harm
                                    - self-harm/intent
                                    - self-harm/instructions
                                    - sexual
                                    - sexual/minors
                                    - violence
                                    - violence/graphic
                                type: object
                            category_scores:
                                description: A list of the categories along with their scores as predicted by model.
                                properties:
                                    harassment:
                                        description: The score for the category 'harassment'.
                                        type: number
                                    harassment/threatening:
                                        description: The score for the category 'harassment/threatening'.
                                        type: number
                                    hate:
                                        description: The score for the category 'hate'.
                                        type: number
                                    hate/threatening:
                                        description: The score for the category 'hate/threatening'.
                                        type: number
                                    self-harm:
                                        description: The score for the category 'self-harm'.
                                        type: number
                                    self-harm/instructions:
                                        description: The score for the category 'self-harm/instructions'.
                                        type: number
                                    self-harm/intent:
                                        description: The score for the category 'self-harm/intent'.
                                        type: number
                                    sexual:
                                        description: The score for the category 'sexual'.
                                        type: number
                                    sexual/minors:
                                        description: The score for the category 'sexual/minors'.
                                        type: number
                                    violence:
                                        description: The score for the category 'violence'.
                                        type: number
                                    violence/graphic:
                                        description: The score for the category 'violence/graphic'.
                                        type: number
                                required:
                                    - hate
                                    - hate/threatening
                                    - harassment
                                    - harassment/threatening
                                    - self-harm
                                    - self-harm/intent
                                    - self-harm/instructions
                                    - sexual
                                    - sexual/minors
                                    - violence
                                    - violence/graphic
                                type: object
                            flagged:
                                description: Whether the content violates [OpenAI's usage policies](/policies/usage-policies).
                                type: boolean
                        required:
                            - flagged
                            - categories
                            - category_scores
                        type: object
                    type: array
            required:
                - id
                - model
                - results
            type: object
            x-oaiMeta:
                example: |
                    {
                      "id": "modr-XXXXX",
                      "model": "text-moderation-005",
                      "results": [
                        {
                          "flagged": true,
                          "categories": {
                            "sexual": false,
                            "hate": false,
                            "harassment": false,
                            "self-harm": false,
                            "sexual/minors": false,
                            "hate/threatening": false,
                            "violence/graphic": false,
                            "self-harm/intent": false,
                            "self-harm/instructions": false,
                            "harassment/threatening": true,
                            "violence": true,
                          },
                          "category_scores": {
                            "sexual": 1.2282071e-06,
                            "hate": 0.010696256,
                            "harassment": 0.29842457,
                            "self-harm": 1.5236925e-08,
                            "sexual/minors": 5.7246268e-08,
                            "hate/threatening": 0.0060676364,
                            "violence/graphic": 4.435014e-06,
                            "self-harm/intent": 8.098441e-10,
                            "self-harm/instructions": 2.8498655e-11,
                            "harassment/threatening": 0.63055265,
                            "violence": 0.99011886,
                          }
                        }
                      ]
                    }
                name: The moderation object
        ExtendedCreateRunRequest:
            additionalProperties: false
            properties:
                additional_instructions:
                    description: Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
                    nullable: true
                    type: string
                assistant_id:
                    description: The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
                    type: string
                instructions:
                    description: Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
                    nullable: true
                    type: string
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                model:
                    description: The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
                    nullable: true
                    type: string
                tools:
                    description: Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
                    items:
                        oneOf:
                            - $ref: '#/components/schemas/AssistantToolsCode'
                            - $ref: '#/components/schemas/AssistantToolsRetrieval'
                            - $ref: '#/components/schemas/AssistantToolsFunction'
                        x-oaiExpandable: true
                    maxItems: 20
                    nullable: true
                    type: array
            required:
                - assistant_id
            type: object
        ExtendedCreateSpeechRequest:
            additionalProperties: false
            properties:
                input:
                    description: The text to generate audio for. The maximum length is 4096 characters.
                    maxLength: 4096
                    type: string
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - tts-1
                            - tts-1-hd
                          type: string
                    description: |
                        One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd`
                    x-oaiTypeLabel: string
                response_format:
                    default: mp3
                    description: "The format to return audio in. \nSupported formats are `mp3`, `opus`, `aac`, `flac`, `pcm`, and `wav`. \n\nThe `pcm` audio format, similar to `wav` but without a header, utilizes a 24kHz sample rate, mono channel, and 16-bit depth in signed little-endian format."
                    enum:
                        - mp3
                        - opus
                        - aac
                        - flac
                        - pcm
                        - wav
                    type: string
                speed:
                    default: 1
                    description: The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
                    maximum: 4
                    minimum: 0.25
                    type: number
                voice:
                    description: The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
                    enum:
                        - alloy
                        - echo
                        - fable
                        - onyx
                        - nova
                        - shimmer
                    type: string
            required:
                - model
                - input
                - voice
            type: object
        ExtendedCreateThreadAndRunRequest:
            additionalProperties: false
            properties:
                assistant_id:
                    description: The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
                    type: string
                instructions:
                    description: Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
                    nullable: true
                    type: string
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                model:
                    description: The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
                    nullable: true
                    type: string
                thread:
                    $ref: '#/components/schemas/CreateThreadRequest'
                tools:
                    description: Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
                    items:
                        oneOf:
                            - $ref: '#/components/schemas/AssistantToolsCode'
                            - $ref: '#/components/schemas/AssistantToolsRetrieval'
                            - $ref: '#/components/schemas/AssistantToolsFunction'
                    maxItems: 20
                    nullable: true
                    type: array
            required:
                - thread_id
                - assistant_id
            type: object
        ExtendedCreateThreadRequest:
            additionalProperties: false
            properties:
                messages:
                    description: A list of [messages](/docs/api-reference/messages) to start the thread with.
                    items:
                        $ref: '#/components/schemas/CreateMessageRequest'
                    type: array
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
            type: object
        ExtendedCreateTranscriptionRequest:
            additionalProperties: false
            properties:
                file:
                    description: |
                        The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
                    format: binary
                    type: string
                    x-oaiTypeLabel: file
                language:
                    description: |
                        The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.
                    type: string
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - whisper-1
                          type: string
                    description: |
                        ID of the model to use. Only `whisper-1` is currently available.
                    example: whisper-1
                    x-oaiTypeLabel: string
                prompt:
                    description: |
                        An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
                    type: string
                response_format:
                    default: json
                    description: |
                        The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
                    enum:
                        - json
                        - text
                        - srt
                        - verbose_json
                        - vtt
                    type: string
                temperature:
                    default: 0
                    description: |
                        The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
                    type: number
                timestamp_granularities[]:
                    default:
                        - segment
                    description: |
                        The timestamp granularities to populate for this transcription. Any of these options: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.
                    items:
                        enum:
                            - word
                            - segment
                        type: string
                    type: array
            required:
                - file
                - model
            type: object
        ExtendedCreateTranscriptionResponse:
            properties:
                text:
                    type: string
            required:
                - text
            type: object
        ExtendedCreateTranslationRequest:
            additionalProperties: false
            properties:
                file:
                    description: |
                        The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
                    format: binary
                    type: string
                    x-oaiTypeLabel: file
                model:
                    anyOf:
                        - type: string
                        - enum:
                            - whisper-1
                          type: string
                    description: |
                        ID of the model to use. Only `whisper-1` is currently available.
                    example: whisper-1
                    x-oaiTypeLabel: string
                prompt:
                    description: |
                        An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.
                    type: string
                response_format:
                    default: json
                    description: |
                        The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
                    type: string
                temperature:
                    default: 0
                    description: |
                        The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
                    type: number
            required:
                - file
                - model
            type: object
        ExtendedCreateTranslationResponse:
            properties:
                text:
                    type: string
            required:
                - text
            type: object
        ExtendedDeleteAssistantFileResponse:
            description: Deletes the association between the assistant and the file, but does not delete the [File](/docs/api-reference/files) object itself.
            properties:
                deleted:
                    type: boolean
                id:
                    type: string
                object:
                    enum:
                        - assistant.file.deleted
                    type: string
            required:
                - id
                - object
                - deleted
            type: object
        ExtendedDeleteAssistantResponse:
            properties:
                deleted:
                    type: boolean
                id:
                    type: string
                object:
                    enum:
                        - assistant.deleted
                    type: string
            required:
                - id
                - object
                - deleted
            type: object
        ExtendedDeleteFileResponse:
            properties:
                deleted:
                    type: boolean
                id:
                    type: string
                object:
                    enum:
                        - file
                    type: string
            required:
                - id
                - object
                - deleted
            type: object
        ExtendedDeleteMessageResponse:
            properties:
                deleted:
                    type: boolean
                id:
                    type: string
                object:
                    enum:
                        - thread.message.deleted
                    type: string
            required:
                - id
                - object
                - deleted
            type: object
        ExtendedDeleteModelResponse:
            properties:
                deleted:
                    type: boolean
                id:
                    type: string
                object:
                    type: string
            required:
                - id
                - object
                - deleted
            type: object
        ExtendedDeleteThreadResponse:
            properties:
                deleted:
                    type: boolean
                id:
                    type: string
                object:
                    enum:
                        - thread.deleted
                    type: string
            required:
                - id
                - object
                - deleted
            type: object
        ExtendedEmbedding:
            description: |
                Represents an embedding vector returned by embedding endpoint.
            properties:
                embedding:
                    description: |
                        The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).
                    items:
                        type: number
                    type: array
                index:
                    description: The index of the embedding in the list of embeddings.
                    type: integer
                object:
                    description: The object type, which is always "embedding".
                    enum:
                        - embedding
                    type: string
            required:
                - index
                - object
                - embedding
            type: object
            x-oaiMeta:
                example: |
                    {
                      "object": "embedding",
                      "embedding": [
                        0.0023064255,
                        -0.009327292,
                        .... (1536 floats total for ada-002)
                        -0.0028842222,
                      ],
                      "index": 0
                    }
                name: The embedding object
        ExtendedError:
            properties:
                code:
                    nullable: true
                    type: string
                message:
                    type: string
                param:
                    nullable: true
                    type: string
                type:
                    type: string
            required:
                - type
                - message
                - param
                - code
            type: object
        ExtendedErrorResponse:
            properties:
                error:
                    $ref: '#/components/schemas/Error'
            required:
                - error
            type: object
        ExtendedFineTuningJob:
            description: |
                The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.
            properties:
                created_at:
                    description: The Unix timestamp (in seconds) for when the fine-tuning job was created.
                    type: integer
                error:
                    description: For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
                    nullable: true
                    properties:
                        code:
                            description: A machine-readable error code.
                            type: string
                        message:
                            description: A human-readable error message.
                            type: string
                        param:
                            description: The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.
                            nullable: true
                            type: string
                    required:
                        - code
                        - message
                        - param
                    type: object
                fine_tuned_model:
                    description: The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
                    nullable: true
                    type: string
                finished_at:
                    description: The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
                    nullable: true
                    type: integer
                hyperparameters:
                    description: The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
                    properties:
                        n_epochs:
                            default: auto
                            description: |-
                                The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
                                "auto" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
                            oneOf:
                                - enum:
                                    - auto
                                  type: string
                                - maximum: 50
                                  minimum: 1
                                  type: integer
                    required:
                        - n_epochs
                    type: object
                id:
                    description: The object identifier, which can be referenced in the API endpoints.
                    type: string
                model:
                    description: The base model that is being fine-tuned.
                    type: string
                object:
                    description: The object type, which is always "fine_tuning.job".
                    enum:
                        - fine_tuning.job
                    type: string
                organization_id:
                    description: The organization that owns the fine-tuning job.
                    type: string
                result_files:
                    description: The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
                    items:
                        example: file-abc123
                        type: string
                    type: array
                status:
                    description: The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
                    enum:
                        - validating_files
                        - queued
                        - running
                        - succeeded
                        - failed
                        - cancelled
                    type: string
                trained_tokens:
                    description: The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
                    nullable: true
                    type: integer
                training_file:
                    description: The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
                    type: string
                validation_file:
                    description: The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
                    nullable: true
                    type: string
            required:
                - created_at
                - error
                - finished_at
                - fine_tuned_model
                - hyperparameters
                - id
                - model
                - object
                - organization_id
                - result_files
                - status
                - trained_tokens
                - training_file
                - validation_file
            title: FineTuningJob
            type: object
            x-oaiMeta:
                example: |
                    {
                      "object": "fine_tuning.job",
                      "id": "ftjob-abc123",
                      "model": "davinci-002",
                      "created_at": 1692661014,
                      "finished_at": 1692661190,
                      "fine_tuned_model": "ft:davinci-002:my-org:custom_suffix:7q8mpxmy",
                      "organization_id": "org-123",
                      "result_files": [
                          "file-abc123"
                      ],
                      "status": "succeeded",
                      "validation_file": null,
                      "training_file": "file-abc123",
                      "hyperparameters": {
                          "n_epochs": 4,
                      },
                      "trained_tokens": 5768
                    }
                name: The fine-tuning job object
        ExtendedFineTuningJobEvent:
            description: Fine-tuning job event object
            properties:
                created_at:
                    type: integer
                id:
                    type: string
                level:
                    enum:
                        - info
                        - warn
                        - error
                    type: string
                message:
                    type: string
                object:
                    enum:
                        - fine_tuning.job.event
                    type: string
            required:
                - id
                - object
                - created_at
                - level
                - message
            type: object
            x-oaiMeta:
                example: |
                    {
                      "object": "fine_tuning.job.event",
                      "id": "ftevent-abc123"
                      "created_at": 1677610602,
                      "level": "info",
                      "message": "Created fine-tuning job"
                    }
                name: The fine-tuning job event object
        ExtendedFunctionObject:
            properties:
                description:
                    description: A description of what the function does, used by the model to choose when and how to call the function.
                    type: string
                name:
                    description: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
                    type: string
                parameters:
                    $ref: '#/components/schemas/FunctionParameters'
            required:
                - name
            type: object
        ExtendedFunctionParameters:
            additionalProperties: true
            description: "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list."
            type: object
        ExtendedImage:
            description: Represents the url or the content of an image generated by the OpenAI API.
            properties:
                b64_json:
                    description: The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
                    type: string
                revised_prompt:
                    description: The prompt that was used to generate the image, if there was any revision to the prompt.
                    type: string
                url:
                    description: The URL of the generated image, if `response_format` is `url` (default).
                    type: string
            type: object
            x-oaiMeta:
                example: |
                    {
                      "url": "...",
                      "revised_prompt": "..."
                    }
                name: The image object
        ExtendedImagesResponse:
            properties:
                created:
                    type: integer
                data:
                    items:
                        $ref: '#/components/schemas/Image'
                    type: array
            required:
                - created
                - data
        ExtendedListAssistantFilesResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/AssistantFileObject'
                    type: array
                first_id:
                    example: file-abc123
                    type: string
                has_more:
                    example: false
                    type: boolean
                last_id:
                    example: file-abc456
                    type: string
                object:
                    example: list
                    type: string
            required:
                - object
                - data
                - items
                - first_id
                - last_id
                - has_more
        ExtendedListAssistantsResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/AssistantObject'
                    type: array
                first_id:
                    example: asst_abc123
                    type: string
                has_more:
                    example: false
                    type: boolean
                last_id:
                    example: asst_abc456
                    type: string
                object:
                    example: list
                    type: string
            required:
                - object
                - data
                - first_id
                - last_id
                - has_more
            type: object
            x-oaiMeta:
                example: |
                    {
                      "object": "list",
                      "data": [
                        {
                          "id": "asst_abc123",
                          "object": "assistant",
                          "created_at": 1698982736,
                          "name": "Coding Tutor",
                          "description": null,
                          "model": "gpt-4",
                          "instructions": "You are a helpful assistant designed to make me better at coding!",
                          "tools": [],
                          "file_ids": [],
                          "metadata": {}
                        },
                        {
                          "id": "asst_abc456",
                          "object": "assistant",
                          "created_at": 1698982718,
                          "name": "My Assistant",
                          "description": null,
                          "model": "gpt-4",
                          "instructions": "You are a helpful assistant designed to make me better at coding!",
                          "tools": [],
                          "file_ids": [],
                          "metadata": {}
                        },
                        {
                          "id": "asst_abc789",
                          "object": "assistant",
                          "created_at": 1698982643,
                          "name": null,
                          "description": null,
                          "model": "gpt-4",
                          "instructions": null,
                          "tools": [],
                          "file_ids": [],
                          "metadata": {}
                        }
                      ],
                      "first_id": "asst_abc123",
                      "last_id": "asst_abc789",
                      "has_more": false
                    }
                group: chat
                name: List assistants response object
        ExtendedListFilesResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/OpenAIFile'
                    type: array
                object:
                    enum:
                        - list
                    type: string
            required:
                - object
                - data
            type: object
        ExtendedListFineTuningJobEventsResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/FineTuningJobEvent'
                    type: array
                object:
                    enum:
                        - list
                    type: string
            required:
                - object
                - data
            type: object
        ExtendedListMessageFilesResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/MessageFileObject'
                    type: array
                first_id:
                    example: file-abc123
                    type: string
                has_more:
                    example: false
                    type: boolean
                last_id:
                    example: file-abc456
                    type: string
                object:
                    example: list
                    type: string
            required:
                - object
                - data
                - items
                - first_id
                - last_id
                - has_more
        ExtendedListMessagesResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/MessageObject'
                    type: array
                first_id:
                    example: msg_abc123
                    type: string
                has_more:
                    example: false
                    type: boolean
                last_id:
                    example: msg_abc123
                    type: string
                object:
                    example: list
                    type: string
            required:
                - object
                - data
                - first_id
                - last_id
                - has_more
        ExtendedListModelsResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/Model'
                    type: array
                object:
                    enum:
                        - list
                    type: string
            required:
                - object
                - data
            type: object
        ExtendedListPaginatedFineTuningJobsResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/FineTuningJob'
                    type: array
                has_more:
                    type: boolean
                object:
                    enum:
                        - list
                    type: string
            required:
                - object
                - data
                - has_more
            type: object
        ExtendedListRunStepsResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/RunStepObject'
                    type: array
                first_id:
                    example: step_abc123
                    type: string
                has_more:
                    example: false
                    type: boolean
                last_id:
                    example: step_abc456
                    type: string
                object:
                    example: list
                    type: string
            required:
                - object
                - data
                - first_id
                - last_id
                - has_more
        ExtendedListRunsResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/RunObject'
                    type: array
                first_id:
                    example: run_abc123
                    type: string
                has_more:
                    example: false
                    type: boolean
                last_id:
                    example: run_abc456
                    type: string
                object:
                    example: list
                    type: string
            required:
                - object
                - data
                - first_id
                - last_id
                - has_more
            type: object
        ExtendedListThreadsResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/ThreadObject'
                    type: array
                first_id:
                    example: asst_abc123
                    type: string
                has_more:
                    example: false
                    type: boolean
                last_id:
                    example: asst_abc456
                    type: string
                object:
                    example: list
                    type: string
            required:
                - object
                - data
                - first_id
                - last_id
                - has_more
        ExtendedMessageContentImageFileObject:
            description: References an image [File](/docs/api-reference/files) in the content of a message.
            properties:
                image_file:
                    properties:
                        file_id:
                            description: The [File](/docs/api-reference/files) ID of the image in the message content.
                            type: string
                    required:
                        - file_id
                    type: object
                type:
                    description: Always `image_file`.
                    enum:
                        - image_file
                    type: string
            required:
                - type
                - image_file
            title: Image file
            type: object
        ExtendedMessageContentTextAnnotationsFileCitationObject:
            description: A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "retrieval" tool to search files.
            properties:
                end_index:
                    minimum: 0
                    type: integer
                file_citation:
                    properties:
                        file_id:
                            description: The ID of the specific File the citation is from.
                            type: string
                        quote:
                            description: The specific quote in the file.
                            type: string
                    required:
                        - file_id
                        - quote
                    type: object
                start_index:
                    minimum: 0
                    type: integer
                text:
                    description: The text in the message content that needs to be replaced.
                    type: string
                type:
                    description: Always `file_citation`.
                    enum:
                        - file_citation
                    type: string
            required:
                - type
                - text
                - file_citation
                - start_index
                - end_index
            title: File citation
            type: object
        ExtendedMessageContentTextAnnotationsFilePathObject:
            description: A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
            properties:
                end_index:
                    minimum: 0
                    type: integer
                file_path:
                    properties:
                        file_id:
                            description: The ID of the file that was generated.
                            type: string
                    required:
                        - file_id
                    type: object
                start_index:
                    minimum: 0
                    type: integer
                text:
                    description: The text in the message content that needs to be replaced.
                    type: string
                type:
                    description: Always `file_path`.
                    enum:
                        - file_path
                    type: string
            required:
                - type
                - text
                - file_path
                - start_index
                - end_index
            title: File path
            type: object
        ExtendedMessageContentTextObject:
            description: The text content that is part of a message.
            properties:
                text:
                    properties:
                        annotations:
                            items:
                                oneOf:
                                    - $ref: '#/components/schemas/MessageContentTextAnnotationsFileCitationObject'
                                    - $ref: '#/components/schemas/MessageContentTextAnnotationsFilePathObject'
                                x-oaiExpandable: true
                            type: array
                        value:
                            description: The data that makes up the text.
                            type: string
                    required:
                        - value
                        - annotations
                    type: object
                type:
                    description: Always `text`.
                    enum:
                        - text
                    type: string
            required:
                - type
                - text
            title: Text
            type: object
        ExtendedMessageFileObject:
            description: A list of files attached to a `message`.
            properties:
                created_at:
                    description: The Unix timestamp (in seconds) for when the message file was created.
                    type: integer
                id:
                    description: The identifier, which can be referenced in API endpoints.
                    type: string
                message_id:
                    description: The ID of the [message](/docs/api-reference/messages) that the [File](/docs/api-reference/files) is attached to.
                    type: string
                object:
                    description: The object type, which is always `thread.message.file`.
                    enum:
                        - thread.message.file
                    type: string
            required:
                - id
                - object
                - created_at
                - message_id
            title: Message files
            type: object
            x-oaiMeta:
                beta: true
                example: |
                    {
                      "id": "file-abc123",
                      "object": "thread.message.file",
                      "created_at": 1698107661,
                      "message_id": "message_QLoItBbqwyAJEzlTy4y9kOMM",
                      "file_id": "file-abc123"
                    }
                name: The message file object
        ExtendedMessageObject:
            description: Represents a message within a [thread](/docs/api-reference/threads).
            properties:
                assistant_id:
                    description: If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
                    nullable: true
                    type: string
                content:
                    description: The content of the message in array of text and/or images.
                    items:
                        oneOf:
                            - $ref: '#/components/schemas/MessageContentImageFileObject'
                            - $ref: '#/components/schemas/MessageContentTextObject'
                        x-oaiExpandable: true
                    type: array
                created_at:
                    description: The Unix timestamp (in seconds) for when the message was created.
                    type: integer
                file_ids:
                    default: []
                    description: A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
                    items:
                        type: string
                    maxItems: 10
                    type: array
                id:
                    description: The identifier, which can be referenced in API endpoints.
                    type: string
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                object:
                    description: The object type, which is always `thread.message`.
                    enum:
                        - thread.message
                    type: string
                role:
                    description: The entity that produced the message. One of `user` or `assistant`.
                    enum:
                        - user
                        - assistant
                    type: string
                run_id:
                    description: If applicable, the ID of the [run](/docs/api-reference/runs) associated with the authoring of this message.
                    nullable: true
                    type: string
                thread_id:
                    description: The [thread](/docs/api-reference/threads) ID that this message belongs to.
                    type: string
            required:
                - id
                - object
                - created_at
                - thread_id
                - role
                - content
                - assistant_id
                - run_id
                - file_ids
                - metadata
            title: The message object
            type: object
            x-oaiMeta:
                beta: true
                example: |
                    {
                      "id": "msg_abc123",
                      "object": "thread.message",
                      "created_at": 1698983503,
                      "thread_id": "thread_abc123",
                      "role": "assistant",
                      "content": [
                        {
                          "type": "text",
                          "text": {
                            "value": "Hi! How can I help you today?",
                            "annotations": []
                          }
                        }
                      ],
                      "file_ids": [],
                      "assistant_id": "asst_abc123",
                      "run_id": "run_abc123",
                      "metadata": {}
                    }
                name: The message object
        ExtendedModel:
            description: Describes an OpenAI model offering that can be used with the API.
            properties:
                created:
                    description: The Unix timestamp (in seconds) when the model was created.
                    type: integer
                id:
                    description: The model identifier, which can be referenced in the API endpoints.
                    type: string
                object:
                    description: The object type, which is always "model".
                    enum:
                        - model
                    type: string
                owned_by:
                    description: The organization that owns the model.
                    type: string
            required:
                - id
                - object
                - created
                - owned_by
            title: Model
            x-oaiMeta:
                example: |
                    {
                      "id": "VAR_model_id",
                      "object": "model",
                      "created": 1686935002,
                      "owned_by": "openai"
                    }
                name: The model object
        ExtendedModifyAssistantRequest:
            additionalProperties: false
            properties:
                description:
                    description: |
                        The description of the assistant. The maximum length is 512 characters.
                    maxLength: 512
                    nullable: true
                    type: string
                file_ids:
                    default: []
                    description: |
                        A list of [File](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. If a file was previously attached to the list but does not show up in the list, it will be deleted from the assistant.
                    items:
                        type: string
                    maxItems: 20
                    type: array
                gptscript_tools:
                    default: []
                    description: A list of gptscript tools available to the assistant.
                    items:
                        type: string
                    maxItems: 128
                    type: array
                instructions:
                    description: |
                        The system instructions that the assistant uses. The maximum length is 32768 characters.
                    maxLength: 32768
                    nullable: true
                    type: string
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                model:
                    anyOf:
                        - type: string
                    description: |
                        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
                name:
                    description: |
                        The name of the assistant. The maximum length is 256 characters.
                    maxLength: 256
                    nullable: true
                    type: string
                tools:
                    default: []
                    description: |
                        A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
                    items:
                        oneOf:
                            - $ref: '#/components/schemas/AssistantToolsCode'
                            - $ref: '#/components/schemas/AssistantToolsRetrieval'
                            - $ref: '#/components/schemas/AssistantToolsFunction'
                        x-oaiExpandable: true
                    maxItems: 128
                    type: array
            type: object
        ExtendedModifyMessageRequest:
            additionalProperties: false
            properties:
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
            type: object
        ExtendedModifyRunRequest:
            additionalProperties: false
            properties:
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
            type: object
        ExtendedModifyThreadRequest:
            additionalProperties: false
            properties:
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
            type: object
        ExtendedOpenAIFile:
            description: The `File` object represents a document that has been uploaded to OpenAI.
            properties:
                bytes:
                    description: The size of the file, in bytes.
                    type: integer
                created_at:
                    description: The Unix timestamp (in seconds) for when the file was created.
                    type: integer
                filename:
                    description: The name of the file.
                    type: string
                id:
                    description: The file identifier, which can be referenced in the API endpoints.
                    type: string
                object:
                    description: The object type, which is always `file`.
                    enum:
                        - file
                    type: string
                purpose:
                    description: The intended purpose of the file. Supported values are `fine-tune`, `fine-tune-results`, `assistants`, and `assistants_output`.
                    enum:
                        - fine-tune
                        - fine-tune-results
                        - assistants
                        - assistants_output
                    type: string
                status:
                    deprecated: true
                    description: Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
                    enum:
                        - uploaded
                        - processed
                        - error
                    type: string
                status_details:
                    deprecated: true
                    description: Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
                    type: string
            required:
                - id
                - object
                - bytes
                - created_at
                - filename
                - purpose
                - status
            title: OpenAIFile
            x-oaiMeta:
                example: |
                    {
                      "id": "file-abc123",
                      "object": "file",
                      "bytes": 120000,
                      "created_at": 1677610602,
                      "filename": "salesOverview.pdf",
                      "purpose": "assistants",
                    }
                name: The file object
        ExtendedRunCompletionUsage:
            description: Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
            nullable: true
            properties:
                completion_tokens:
                    description: Number of completion tokens used over the course of the run.
                    type: integer
                prompt_tokens:
                    description: Number of prompt tokens used over the course of the run.
                    type: integer
                total_tokens:
                    description: Total number of tokens used (prompt + completion).
                    type: integer
            required:
                - prompt_tokens
                - completion_tokens
                - total_tokens
            type: object
        ExtendedRunObject:
            description: Represents an execution run on a [thread](/docs/api-reference/threads).
            properties:
                assistant_id:
                    description: The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
                    type: string
                cancelled_at:
                    description: The Unix timestamp (in seconds) for when the run was cancelled.
                    nullable: true
                    type: integer
                completed_at:
                    description: The Unix timestamp (in seconds) for when the run was completed.
                    nullable: true
                    type: integer
                created_at:
                    description: The Unix timestamp (in seconds) for when the run was created.
                    type: integer
                expires_at:
                    description: The Unix timestamp (in seconds) for when the run will expire.
                    type: integer
                failed_at:
                    description: The Unix timestamp (in seconds) for when the run failed.
                    nullable: true
                    type: integer
                file_ids:
                    default: []
                    description: The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
                    items:
                        type: string
                    type: array
                id:
                    description: The identifier, which can be referenced in API endpoints.
                    type: string
                instructions:
                    description: The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
                    type: string
                last_error:
                    description: The last error associated with this run. Will be `null` if there are no errors.
                    nullable: true
                    properties:
                        code:
                            description: One of `server_error` or `rate_limit_exceeded`.
                            enum:
                                - server_error
                                - rate_limit_exceeded
                            type: string
                        message:
                            description: A human-readable description of the error.
                            type: string
                    required:
                        - code
                        - message
                    type: object
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                model:
                    description: The model that the [assistant](/docs/api-reference/assistants) used for this run.
                    type: string
                object:
                    description: The object type, which is always `thread.run`.
                    enum:
                        - thread.run
                    type: string
                required_action:
                    description: Details on the action required to continue the run. Will be `null` if no action is required.
                    nullable: true
                    properties:
                        submit_tool_outputs:
                            description: Details on the tool outputs needed for this run to continue.
                            properties:
                                tool_calls:
                                    description: A list of the relevant tool calls.
                                    items:
                                        $ref: '#/components/schemas/RunToolCallObject'
                                    type: array
                            required:
                                - tool_calls
                            type: object
                        type:
                            description: For now, this is always `submit_tool_outputs`.
                            enum:
                                - submit_tool_outputs
                            type: string
                    required:
                        - type
                        - submit_tool_outputs
                    type: object
                started_at:
                    description: The Unix timestamp (in seconds) for when the run was started.
                    nullable: true
                    type: integer
                status:
                    description: The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
                    enum:
                        - queued
                        - in_progress
                        - requires_action
                        - cancelling
                        - cancelled
                        - failed
                        - completed
                        - expired
                    type: string
                thread_id:
                    description: The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
                    type: string
                tools:
                    default: []
                    description: The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
                    items:
                        oneOf:
                            - $ref: '#/components/schemas/AssistantToolsCode'
                            - $ref: '#/components/schemas/AssistantToolsRetrieval'
                            - $ref: '#/components/schemas/AssistantToolsFunction'
                        x-oaiExpandable: true
                    maxItems: 20
                    type: array
                usage:
                    $ref: '#/components/schemas/RunCompletionUsage'
            required:
                - id
                - object
                - created_at
                - thread_id
                - assistant_id
                - status
                - required_action
                - last_error
                - expires_at
                - started_at
                - cancelled_at
                - failed_at
                - completed_at
                - model
                - instructions
                - tools
                - file_ids
                - metadata
                - usage
            title: A run on a thread
            type: object
            x-oaiMeta:
                beta: true
                example: |
                    {
                      "id": "run_abc123",
                      "object": "thread.run",
                      "created_at": 1698107661,
                      "assistant_id": "asst_abc123",
                      "thread_id": "thread_abc123",
                      "status": "completed",
                      "started_at": 1699073476,
                      "expires_at": null,
                      "cancelled_at": null,
                      "failed_at": null,
                      "completed_at": 1699073498,
                      "last_error": null,
                      "model": "gpt-4",
                      "instructions": null,
                      "tools": [{"type": "retrieval"}, {"type": "code_interpreter"}],
                      "file_ids": [],
                      "metadata": {},
                      "usage": {
                        "prompt_tokens": 123,
                        "completion_tokens": 456,
                        "total_tokens": 579
                      }
                    }
                name: The run object
        ExtendedRunStepCompletionUsage:
            description: Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.
            nullable: true
            properties:
                completion_tokens:
                    description: Number of completion tokens used over the course of the run step.
                    type: integer
                prompt_tokens:
                    description: Number of prompt tokens used over the course of the run step.
                    type: integer
                total_tokens:
                    description: Total number of tokens used (prompt + completion).
                    type: integer
            required:
                - prompt_tokens
                - completion_tokens
                - total_tokens
            type: object
        ExtendedRunStepDetailsMessageCreationObject:
            description: Details of the message creation by the run step.
            properties:
                message_creation:
                    properties:
                        message_id:
                            description: The ID of the message that was created by this run step.
                            type: string
                    required:
                        - message_id
                    type: object
                type:
                    description: Always `message_creation`.
                    enum:
                        - message_creation
                    type: string
            required:
                - type
                - message_creation
            title: Message creation
            type: object
        ExtendedRunStepDetailsToolCallsCodeObject:
            description: Details of the Code Interpreter tool call the run step was involved in.
            properties:
                code_interpreter:
                    description: The Code Interpreter tool call definition.
                    properties:
                        input:
                            description: The input to the Code Interpreter tool call.
                            type: string
                        outputs:
                            description: The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
                            items:
                                oneOf:
                                    - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeOutputLogsObject'
                                    - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject'
                                type: object
                                x-oaiExpandable: true
                            type: array
                    required:
                        - input
                        - outputs
                    type: object
                id:
                    description: The ID of the tool call.
                    type: string
                type:
                    description: The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
                    enum:
                        - code_interpreter
                    type: string
            required:
                - id
                - type
                - code_interpreter
            title: Code interpreter tool call
            type: object
        ExtendedRunStepDetailsToolCallsCodeOutputImageObject:
            properties:
                image:
                    properties:
                        file_id:
                            description: The [file](/docs/api-reference/files) ID of the image.
                            type: string
                    required:
                        - file_id
                    type: object
                type:
                    description: Always `image`.
                    enum:
                        - image
                    type: string
            required:
                - type
                - image
            title: Code interpreter image output
            type: object
        ExtendedRunStepDetailsToolCallsCodeOutputLogsObject:
            description: Text output from the Code Interpreter tool call as part of a run step.
            properties:
                logs:
                    description: The text output from the Code Interpreter tool call.
                    type: string
                type:
                    description: Always `logs`.
                    enum:
                        - logs
                    type: string
            required:
                - type
                - logs
            title: Code interpreter log output
            type: object
        ExtendedRunStepDetailsToolCallsFunctionObject:
            properties:
                function:
                    description: The definition of the function that was called.
                    properties:
                        arguments:
                            description: The arguments passed to the function.
                            type: string
                        name:
                            description: The name of the function.
                            type: string
                        output:
                            description: The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
                            nullable: true
                            type: string
                    required:
                        - name
                        - arguments
                        - output
                    type: object
                id:
                    description: The ID of the tool call object.
                    type: string
                type:
                    description: The type of tool call. This is always going to be `function` for this type of tool call.
                    enum:
                        - function
                    type: string
            required:
                - id
                - type
                - function
            title: Function tool call
            type: object
        ExtendedRunStepDetailsToolCallsObject:
            description: Details of the tool call.
            properties:
                tool_calls:
                    description: |
                        An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`.
                    items:
                        oneOf:
                            - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeObject'
                            - $ref: '#/components/schemas/RunStepDetailsToolCallsRetrievalObject'
                            - $ref: '#/components/schemas/RunStepDetailsToolCallsFunctionObject'
                        x-oaiExpandable: true
                    type: array
                type:
                    description: Always `tool_calls`.
                    enum:
                        - tool_calls
                    type: string
            required:
                - type
                - tool_calls
            title: Tool calls
            type: object
        ExtendedRunStepDetailsToolCallsRetrievalObject:
            properties:
                id:
                    description: The ID of the tool call object.
                    type: string
                retrieval:
                    description: For now, this is always going to be an empty object.
                    type: object
                    x-oaiTypeLabel: map
                type:
                    description: The type of tool call. This is always going to be `retrieval` for this type of tool call.
                    enum:
                        - retrieval
                    type: string
            required:
                - id
                - type
                - retrieval
            title: Retrieval tool call
            type: object
        ExtendedRunStepObject:
            description: |
                Represents a step in execution of a run.
            properties:
                assistant_id:
                    description: The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
                    type: string
                cancelled_at:
                    description: The Unix timestamp (in seconds) for when the run step was cancelled.
                    nullable: true
                    type: integer
                completed_at:
                    description: The Unix timestamp (in seconds) for when the run step completed.
                    nullable: true
                    type: integer
                created_at:
                    description: The Unix timestamp (in seconds) for when the run step was created.
                    type: integer
                expired_at:
                    description: The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
                    nullable: true
                    type: integer
                failed_at:
                    description: The Unix timestamp (in seconds) for when the run step failed.
                    nullable: true
                    type: integer
                id:
                    description: The identifier of the run step, which can be referenced in API endpoints.
                    type: string
                last_error:
                    description: The last error associated with this run step. Will be `null` if there are no errors.
                    nullable: true
                    properties:
                        code:
                            description: One of `server_error` or `rate_limit_exceeded`.
                            enum:
                                - server_error
                                - rate_limit_exceeded
                            type: string
                        message:
                            description: A human-readable description of the error.
                            type: string
                    required:
                        - code
                        - message
                    type: object
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                object:
                    description: The object type, which is always `thread.run.step`.
                    enum:
                        - thread.run.step
                    type: string
                run_id:
                    description: The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
                    type: string
                status:
                    description: The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
                    enum:
                        - in_progress
                        - cancelled
                        - failed
                        - completed
                        - expired
                    type: string
                step_details:
                    description: The details of the run step.
                    oneOf:
                        - $ref: '#/components/schemas/RunStepDetailsMessageCreationObject'
                        - $ref: '#/components/schemas/RunStepDetailsToolCallsObject'
                    type: object
                    x-oaiExpandable: true
                thread_id:
                    description: The ID of the [thread](/docs/api-reference/threads) that was run.
                    type: string
                type:
                    description: The type of run step, which can be either `message_creation` or `tool_calls`.
                    enum:
                        - message_creation
                        - tool_calls
                    type: string
                usage:
                    $ref: '#/components/schemas/RunStepCompletionUsage'
            required:
                - id
                - object
                - created_at
                - assistant_id
                - thread_id
                - run_id
                - type
                - status
                - step_details
                - last_error
                - expired_at
                - cancelled_at
                - failed_at
                - completed_at
                - metadata
                - usage
            title: Run steps
            type: object
            x-oaiMeta:
                beta: true
                example: |
                    {
                      "id": "step_abc123",
                      "object": "thread.run.step",
                      "created_at": 1699063291,
                      "run_id": "run_abc123",
                      "assistant_id": "asst_abc123",
                      "thread_id": "thread_abc123",
                      "type": "message_creation",
                      "status": "completed",
                      "cancelled_at": null,
                      "completed_at": 1699063291,
                      "expired_at": null,
                      "failed_at": null,
                      "last_error": null,
                      "step_details": {
                        "type": "message_creation",
                        "message_creation": {
                          "message_id": "msg_abc123"
                        }
                      },
                      "usage": {
                        "prompt_tokens": 123,
                        "completion_tokens": 456,
                        "total_tokens": 579
                      }
                    }
                name: The run step object
        ExtendedRunToolCallObject:
            description: Tool call objects
            properties:
                function:
                    description: The function definition.
                    properties:
                        arguments:
                            description: The arguments that the model expects you to pass to the function.
                            type: string
                        name:
                            description: The name of the function.
                            type: string
                    required:
                        - name
                        - arguments
                    type: object
                id:
                    description: The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.
                    type: string
                type:
                    description: The type of tool call the output is required for. For now, this is always `function`.
                    enum:
                        - function
                    type: string
            required:
                - id
                - type
                - function
            type: object
        ExtendedSubmitToolOutputsRunRequest:
            additionalProperties: false
            properties:
                tool_outputs:
                    description: A list of tools for which the outputs are being submitted.
                    items:
                        properties:
                            output:
                                description: The output of the tool call to be submitted to continue the run.
                                type: string
                            tool_call_id:
                                description: The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
                                type: string
                        type: object
                    type: array
            required:
                - tool_outputs
            type: object
        ExtendedThreadObject:
            description: Represents a thread that contains [messages](/docs/api-reference/messages).
            properties:
                created_at:
                    description: The Unix timestamp (in seconds) for when the thread was created.
                    type: integer
                id:
                    description: The identifier, which can be referenced in API endpoints.
                    type: string
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                object:
                    description: The object type, which is always `thread`.
                    enum:
                        - thread
                    type: string
            required:
                - id
                - object
                - created_at
                - metadata
            title: Thread
            type: object
            x-oaiMeta:
                beta: true
                example: |
                    {
                      "id": "thread_abc123",
                      "object": "thread",
                      "created_at": 1698107661,
                      "metadata": {}
                    }
                name: The thread object
        FineTuningJob:
            description: |
                The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.
            properties:
                created_at:
                    description: The Unix timestamp (in seconds) for when the fine-tuning job was created.
                    type: integer
                error:
                    description: For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
                    nullable: true
                    properties:
                        code:
                            description: A machine-readable error code.
                            type: string
                        message:
                            description: A human-readable error message.
                            type: string
                        param:
                            description: The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.
                            nullable: true
                            type: string
                    required:
                        - code
                        - message
                        - param
                    type: object
                fine_tuned_model:
                    description: The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
                    nullable: true
                    type: string
                finished_at:
                    description: The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
                    nullable: true
                    type: integer
                hyperparameters:
                    description: The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
                    properties:
                        n_epochs:
                            default: auto
                            description: |-
                                The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
                                "auto" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
                            oneOf:
                                - enum:
                                    - auto
                                  type: string
                                - maximum: 50
                                  minimum: 1
                                  type: integer
                    required:
                        - n_epochs
                    type: object
                id:
                    description: The object identifier, which can be referenced in the API endpoints.
                    type: string
                model:
                    description: The base model that is being fine-tuned.
                    type: string
                object:
                    description: The object type, which is always "fine_tuning.job".
                    enum:
                        - fine_tuning.job
                    type: string
                organization_id:
                    description: The organization that owns the fine-tuning job.
                    type: string
                result_files:
                    description: The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
                    items:
                        example: file-abc123
                        type: string
                    type: array
                status:
                    description: The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
                    enum:
                        - validating_files
                        - queued
                        - running
                        - succeeded
                        - failed
                        - cancelled
                    type: string
                trained_tokens:
                    description: The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
                    nullable: true
                    type: integer
                training_file:
                    description: The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
                    type: string
                validation_file:
                    description: The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
                    nullable: true
                    type: string
            required:
                - created_at
                - error
                - finished_at
                - fine_tuned_model
                - hyperparameters
                - id
                - model
                - object
                - organization_id
                - result_files
                - status
                - trained_tokens
                - training_file
                - validation_file
            title: FineTuningJob
            type: object
            x-oaiMeta:
                example: |
                    {
                      "object": "fine_tuning.job",
                      "id": "ftjob-abc123",
                      "model": "davinci-002",
                      "created_at": 1692661014,
                      "finished_at": 1692661190,
                      "fine_tuned_model": "ft:davinci-002:my-org:custom_suffix:7q8mpxmy",
                      "organization_id": "org-123",
                      "result_files": [
                          "file-abc123"
                      ],
                      "status": "succeeded",
                      "validation_file": null,
                      "training_file": "file-abc123",
                      "hyperparameters": {
                          "n_epochs": 4,
                      },
                      "trained_tokens": 5768
                    }
                name: The fine-tuning job object
        FineTuningJobEvent:
            description: Fine-tuning job event object
            properties:
                created_at:
                    type: integer
                id:
                    type: string
                level:
                    enum:
                        - info
                        - warn
                        - error
                    type: string
                message:
                    type: string
                object:
                    enum:
                        - fine_tuning.job.event
                    type: string
            required:
                - id
                - object
                - created_at
                - level
                - message
            type: object
            x-oaiMeta:
                example: |
                    {
                      "object": "fine_tuning.job.event",
                      "id": "ftevent-abc123"
                      "created_at": 1677610602,
                      "level": "info",
                      "message": "Created fine-tuning job"
                    }
                name: The fine-tuning job event object
        FunctionObject:
            properties:
                description:
                    description: A description of what the function does, used by the model to choose when and how to call the function.
                    type: string
                name:
                    description: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
                    type: string
                parameters:
                    $ref: '#/components/schemas/FunctionParameters'
            required:
                - name
            type: object
        FunctionParameters:
            additionalProperties: true
            description: "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list."
            type: object
        Image:
            description: Represents the url or the content of an image generated by the OpenAI API.
            properties:
                b64_json:
                    description: The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
                    type: string
                revised_prompt:
                    description: The prompt that was used to generate the image, if there was any revision to the prompt.
                    type: string
                url:
                    description: The URL of the generated image, if `response_format` is `url` (default).
                    type: string
            type: object
            x-oaiMeta:
                example: |
                    {
                      "url": "...",
                      "revised_prompt": "..."
                    }
                name: The image object
        ImagesResponse:
            properties:
                created:
                    type: integer
                data:
                    items:
                        $ref: '#/components/schemas/Image'
                    type: array
            required:
                - created
                - data
        ListAssistantFilesResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/AssistantFileObject'
                    type: array
                first_id:
                    example: file-abc123
                    type: string
                has_more:
                    example: false
                    type: boolean
                last_id:
                    example: file-abc456
                    type: string
                object:
                    example: list
                    type: string
            required:
                - object
                - data
                - items
                - first_id
                - last_id
                - has_more
        ListAssistantsResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/AssistantObject'
                    type: array
                first_id:
                    example: asst_abc123
                    type: string
                has_more:
                    example: false
                    type: boolean
                last_id:
                    example: asst_abc456
                    type: string
                object:
                    example: list
                    type: string
            required:
                - object
                - data
                - first_id
                - last_id
                - has_more
            type: object
            x-oaiMeta:
                example: |
                    {
                      "object": "list",
                      "data": [
                        {
                          "id": "asst_abc123",
                          "object": "assistant",
                          "created_at": 1698982736,
                          "name": "Coding Tutor",
                          "description": null,
                          "model": "gpt-4",
                          "instructions": "You are a helpful assistant designed to make me better at coding!",
                          "tools": [],
                          "file_ids": [],
                          "metadata": {}
                        },
                        {
                          "id": "asst_abc456",
                          "object": "assistant",
                          "created_at": 1698982718,
                          "name": "My Assistant",
                          "description": null,
                          "model": "gpt-4",
                          "instructions": "You are a helpful assistant designed to make me better at coding!",
                          "tools": [],
                          "file_ids": [],
                          "metadata": {}
                        },
                        {
                          "id": "asst_abc789",
                          "object": "assistant",
                          "created_at": 1698982643,
                          "name": null,
                          "description": null,
                          "model": "gpt-4",
                          "instructions": null,
                          "tools": [],
                          "file_ids": [],
                          "metadata": {}
                        }
                      ],
                      "first_id": "asst_abc123",
                      "last_id": "asst_abc789",
                      "has_more": false
                    }
                group: chat
                name: List assistants response object
        ListFilesResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/OpenAIFile'
                    type: array
                object:
                    enum:
                        - list
                    type: string
            required:
                - object
                - data
            type: object
        ListFineTuningJobEventsResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/FineTuningJobEvent'
                    type: array
                object:
                    enum:
                        - list
                    type: string
            required:
                - object
                - data
            type: object
        ListMessageFilesResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/MessageFileObject'
                    type: array
                first_id:
                    example: file-abc123
                    type: string
                has_more:
                    example: false
                    type: boolean
                last_id:
                    example: file-abc456
                    type: string
                object:
                    example: list
                    type: string
            required:
                - object
                - data
                - items
                - first_id
                - last_id
                - has_more
        ListMessagesResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/MessageObject'
                    type: array
                first_id:
                    example: msg_abc123
                    type: string
                has_more:
                    example: false
                    type: boolean
                last_id:
                    example: msg_abc123
                    type: string
                object:
                    example: list
                    type: string
            required:
                - object
                - data
                - first_id
                - last_id
                - has_more
        ListModelsResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/Model'
                    type: array
                object:
                    enum:
                        - list
                    type: string
            required:
                - object
                - data
            type: object
        ListPaginatedFineTuningJobsResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/FineTuningJob'
                    type: array
                has_more:
                    type: boolean
                object:
                    enum:
                        - list
                    type: string
            required:
                - object
                - data
                - has_more
            type: object
        ListRunStepsResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/RunStepObject'
                    type: array
                first_id:
                    example: step_abc123
                    type: string
                has_more:
                    example: false
                    type: boolean
                last_id:
                    example: step_abc456
                    type: string
                object:
                    example: list
                    type: string
            required:
                - object
                - data
                - first_id
                - last_id
                - has_more
        ListRunsResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/RunObject'
                    type: array
                first_id:
                    example: run_abc123
                    type: string
                has_more:
                    example: false
                    type: boolean
                last_id:
                    example: run_abc456
                    type: string
                object:
                    example: list
                    type: string
            required:
                - object
                - data
                - first_id
                - last_id
                - has_more
            type: object
        ListThreadsResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/ThreadObject'
                    type: array
                first_id:
                    example: asst_abc123
                    type: string
                has_more:
                    example: false
                    type: boolean
                last_id:
                    example: asst_abc456
                    type: string
                object:
                    example: list
                    type: string
            required:
                - object
                - data
                - first_id
                - last_id
                - has_more
        MessageContentImageFileObject:
            description: References an image [File](/docs/api-reference/files) in the content of a message.
            properties:
                image_file:
                    properties:
                        file_id:
                            description: The [File](/docs/api-reference/files) ID of the image in the message content.
                            type: string
                    required:
                        - file_id
                    type: object
                type:
                    description: Always `image_file`.
                    enum:
                        - image_file
                    type: string
            required:
                - type
                - image_file
            title: Image file
            type: object
        MessageContentTextAnnotationsFileCitationObject:
            description: A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "retrieval" tool to search files.
            properties:
                end_index:
                    minimum: 0
                    type: integer
                file_citation:
                    properties:
                        file_id:
                            description: The ID of the specific File the citation is from.
                            type: string
                        quote:
                            description: The specific quote in the file.
                            type: string
                    required:
                        - file_id
                        - quote
                    type: object
                start_index:
                    minimum: 0
                    type: integer
                text:
                    description: The text in the message content that needs to be replaced.
                    type: string
                type:
                    description: Always `file_citation`.
                    enum:
                        - file_citation
                    type: string
            required:
                - type
                - text
                - file_citation
                - start_index
                - end_index
            title: File citation
            type: object
        MessageContentTextAnnotationsFilePathObject:
            description: A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
            properties:
                end_index:
                    minimum: 0
                    type: integer
                file_path:
                    properties:
                        file_id:
                            description: The ID of the file that was generated.
                            type: string
                    required:
                        - file_id
                    type: object
                start_index:
                    minimum: 0
                    type: integer
                text:
                    description: The text in the message content that needs to be replaced.
                    type: string
                type:
                    description: Always `file_path`.
                    enum:
                        - file_path
                    type: string
            required:
                - type
                - text
                - file_path
                - start_index
                - end_index
            title: File path
            type: object
        MessageContentTextObject:
            description: The text content that is part of a message.
            properties:
                text:
                    properties:
                        annotations:
                            items:
                                oneOf:
                                    - $ref: '#/components/schemas/MessageContentTextAnnotationsFileCitationObject'
                                    - $ref: '#/components/schemas/MessageContentTextAnnotationsFilePathObject'
                                x-oaiExpandable: true
                            type: array
                        value:
                            description: The data that makes up the text.
                            type: string
                    required:
                        - value
                        - annotations
                    type: object
                type:
                    description: Always `text`.
                    enum:
                        - text
                    type: string
            required:
                - type
                - text
            title: Text
            type: object
        MessageFileObject:
            description: A list of files attached to a `message`.
            properties:
                created_at:
                    description: The Unix timestamp (in seconds) for when the message file was created.
                    type: integer
                id:
                    description: The identifier, which can be referenced in API endpoints.
                    type: string
                message_id:
                    description: The ID of the [message](/docs/api-reference/messages) that the [File](/docs/api-reference/files) is attached to.
                    type: string
                object:
                    description: The object type, which is always `thread.message.file`.
                    enum:
                        - thread.message.file
                    type: string
            required:
                - id
                - object
                - created_at
                - message_id
            title: Message files
            type: object
            x-oaiMeta:
                beta: true
                example: |
                    {
                      "id": "file-abc123",
                      "object": "thread.message.file",
                      "created_at": 1698107661,
                      "message_id": "message_QLoItBbqwyAJEzlTy4y9kOMM",
                      "file_id": "file-abc123"
                    }
                name: The message file object
        MessageObject:
            description: Represents a message within a [thread](/docs/api-reference/threads).
            properties:
                assistant_id:
                    description: If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
                    nullable: true
                    type: string
                content:
                    description: The content of the message in array of text and/or images.
                    items:
                        oneOf:
                            - $ref: '#/components/schemas/MessageContentImageFileObject'
                            - $ref: '#/components/schemas/MessageContentTextObject'
                        x-oaiExpandable: true
                    type: array
                created_at:
                    description: The Unix timestamp (in seconds) for when the message was created.
                    type: integer
                file_ids:
                    default: []
                    description: A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
                    items:
                        type: string
                    maxItems: 10
                    type: array
                id:
                    description: The identifier, which can be referenced in API endpoints.
                    type: string
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                object:
                    description: The object type, which is always `thread.message`.
                    enum:
                        - thread.message
                    type: string
                role:
                    description: The entity that produced the message. One of `user` or `assistant`.
                    enum:
                        - user
                        - assistant
                    type: string
                run_id:
                    description: If applicable, the ID of the [run](/docs/api-reference/runs) associated with the authoring of this message.
                    nullable: true
                    type: string
                thread_id:
                    description: The [thread](/docs/api-reference/threads) ID that this message belongs to.
                    type: string
            required:
                - id
                - object
                - created_at
                - thread_id
                - role
                - content
                - assistant_id
                - run_id
                - file_ids
                - metadata
            title: The message object
            type: object
            x-oaiMeta:
                beta: true
                example: |
                    {
                      "id": "msg_abc123",
                      "object": "thread.message",
                      "created_at": 1698983503,
                      "thread_id": "thread_abc123",
                      "role": "assistant",
                      "content": [
                        {
                          "type": "text",
                          "text": {
                            "value": "Hi! How can I help you today?",
                            "annotations": []
                          }
                        }
                      ],
                      "file_ids": [],
                      "assistant_id": "asst_abc123",
                      "run_id": "run_abc123",
                      "metadata": {}
                    }
                name: The message object
        Model:
            description: Describes an OpenAI model offering that can be used with the API.
            properties:
                created:
                    description: The Unix timestamp (in seconds) when the model was created.
                    type: integer
                id:
                    description: The model identifier, which can be referenced in the API endpoints.
                    type: string
                object:
                    description: The object type, which is always "model".
                    enum:
                        - model
                    type: string
                owned_by:
                    description: The organization that owns the model.
                    type: string
            required:
                - id
                - object
                - created
                - owned_by
            title: Model
            x-oaiMeta:
                example: |
                    {
                      "id": "VAR_model_id",
                      "object": "model",
                      "created": 1686935002,
                      "owned_by": "openai"
                    }
                name: The model object
        ModifyAssistantRequest:
            additionalProperties: false
            properties:
                description:
                    description: |
                        The description of the assistant. The maximum length is 512 characters.
                    maxLength: 512
                    nullable: true
                    type: string
                file_ids:
                    default: []
                    description: |
                        A list of [File](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. If a file was previously attached to the list but does not show up in the list, it will be deleted from the assistant.
                    items:
                        type: string
                    maxItems: 20
                    type: array
                instructions:
                    description: |
                        The system instructions that the assistant uses. The maximum length is 32768 characters.
                    maxLength: 32768
                    nullable: true
                    type: string
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                model:
                    anyOf:
                        - type: string
                    description: |
                        ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
                name:
                    description: |
                        The name of the assistant. The maximum length is 256 characters.
                    maxLength: 256
                    nullable: true
                    type: string
                tools:
                    default: []
                    description: |
                        A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
                    items:
                        oneOf:
                            - $ref: '#/components/schemas/AssistantToolsCode'
                            - $ref: '#/components/schemas/AssistantToolsRetrieval'
                            - $ref: '#/components/schemas/AssistantToolsFunction'
                        x-oaiExpandable: true
                    maxItems: 128
                    type: array
            type: object
        ModifyMessageRequest:
            additionalProperties: false
            properties:
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
            type: object
        ModifyRunRequest:
            additionalProperties: false
            properties:
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
            type: object
        ModifyThreadRequest:
            additionalProperties: false
            properties:
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
            type: object
        OpenAIFile:
            description: The `File` object represents a document that has been uploaded to OpenAI.
            properties:
                bytes:
                    description: The size of the file, in bytes.
                    type: integer
                created_at:
                    description: The Unix timestamp (in seconds) for when the file was created.
                    type: integer
                filename:
                    description: The name of the file.
                    type: string
                id:
                    description: The file identifier, which can be referenced in the API endpoints.
                    type: string
                object:
                    description: The object type, which is always `file`.
                    enum:
                        - file
                    type: string
                purpose:
                    description: The intended purpose of the file. Supported values are `fine-tune`, `fine-tune-results`, `assistants`, and `assistants_output`.
                    enum:
                        - fine-tune
                        - fine-tune-results
                        - assistants
                        - assistants_output
                    type: string
                status:
                    deprecated: true
                    description: Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
                    enum:
                        - uploaded
                        - processed
                        - error
                    type: string
                status_details:
                    deprecated: true
                    description: Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
                    type: string
            required:
                - id
                - object
                - bytes
                - created_at
                - filename
                - purpose
                - status
            title: OpenAIFile
            x-oaiMeta:
                example: |
                    {
                      "id": "file-abc123",
                      "object": "file",
                      "bytes": 120000,
                      "created_at": 1677610602,
                      "filename": "salesOverview.pdf",
                      "purpose": "assistants",
                    }
                name: The file object
        RunCompletionUsage:
            description: Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
            nullable: true
            properties:
                completion_tokens:
                    description: Number of completion tokens used over the course of the run.
                    type: integer
                prompt_tokens:
                    description: Number of prompt tokens used over the course of the run.
                    type: integer
                total_tokens:
                    description: Total number of tokens used (prompt + completion).
                    type: integer
            required:
                - prompt_tokens
                - completion_tokens
                - total_tokens
            type: object
        RunObject:
            description: Represents an execution run on a [thread](/docs/api-reference/threads).
            properties:
                assistant_id:
                    description: The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
                    type: string
                cancelled_at:
                    description: The Unix timestamp (in seconds) for when the run was cancelled.
                    nullable: true
                    type: integer
                completed_at:
                    description: The Unix timestamp (in seconds) for when the run was completed.
                    nullable: true
                    type: integer
                created_at:
                    description: The Unix timestamp (in seconds) for when the run was created.
                    type: integer
                expires_at:
                    description: The Unix timestamp (in seconds) for when the run will expire.
                    type: integer
                failed_at:
                    description: The Unix timestamp (in seconds) for when the run failed.
                    nullable: true
                    type: integer
                file_ids:
                    default: []
                    description: The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
                    items:
                        type: string
                    type: array
                id:
                    description: The identifier, which can be referenced in API endpoints.
                    type: string
                instructions:
                    description: The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
                    type: string
                last_error:
                    description: The last error associated with this run. Will be `null` if there are no errors.
                    nullable: true
                    properties:
                        code:
                            description: One of `server_error` or `rate_limit_exceeded`.
                            enum:
                                - server_error
                                - rate_limit_exceeded
                            type: string
                        message:
                            description: A human-readable description of the error.
                            type: string
                    required:
                        - code
                        - message
                    type: object
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                model:
                    description: The model that the [assistant](/docs/api-reference/assistants) used for this run.
                    type: string
                object:
                    description: The object type, which is always `thread.run`.
                    enum:
                        - thread.run
                    type: string
                required_action:
                    description: Details on the action required to continue the run. Will be `null` if no action is required.
                    nullable: true
                    properties:
                        submit_tool_outputs:
                            description: Details on the tool outputs needed for this run to continue.
                            properties:
                                tool_calls:
                                    description: A list of the relevant tool calls.
                                    items:
                                        $ref: '#/components/schemas/RunToolCallObject'
                                    type: array
                            required:
                                - tool_calls
                            type: object
                        type:
                            description: For now, this is always `submit_tool_outputs`.
                            enum:
                                - submit_tool_outputs
                            type: string
                    required:
                        - type
                        - submit_tool_outputs
                    type: object
                started_at:
                    description: The Unix timestamp (in seconds) for when the run was started.
                    nullable: true
                    type: integer
                status:
                    description: The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
                    enum:
                        - queued
                        - in_progress
                        - requires_action
                        - cancelling
                        - cancelled
                        - failed
                        - completed
                        - expired
                    type: string
                thread_id:
                    description: The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
                    type: string
                tools:
                    default: []
                    description: The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
                    items:
                        oneOf:
                            - $ref: '#/components/schemas/AssistantToolsCode'
                            - $ref: '#/components/schemas/AssistantToolsRetrieval'
                            - $ref: '#/components/schemas/AssistantToolsFunction'
                        x-oaiExpandable: true
                    maxItems: 20
                    type: array
                usage:
                    $ref: '#/components/schemas/RunCompletionUsage'
            required:
                - id
                - object
                - created_at
                - thread_id
                - assistant_id
                - status
                - required_action
                - last_error
                - expires_at
                - started_at
                - cancelled_at
                - failed_at
                - completed_at
                - model
                - instructions
                - tools
                - file_ids
                - metadata
                - usage
            title: A run on a thread
            type: object
            x-oaiMeta:
                beta: true
                example: |
                    {
                      "id": "run_abc123",
                      "object": "thread.run",
                      "created_at": 1698107661,
                      "assistant_id": "asst_abc123",
                      "thread_id": "thread_abc123",
                      "status": "completed",
                      "started_at": 1699073476,
                      "expires_at": null,
                      "cancelled_at": null,
                      "failed_at": null,
                      "completed_at": 1699073498,
                      "last_error": null,
                      "model": "gpt-4",
                      "instructions": null,
                      "tools": [{"type": "retrieval"}, {"type": "code_interpreter"}],
                      "file_ids": [],
                      "metadata": {},
                      "usage": {
                        "prompt_tokens": 123,
                        "completion_tokens": 456,
                        "total_tokens": 579
                      }
                    }
                name: The run object
        RunStepCompletionUsage:
            description: Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.
            nullable: true
            properties:
                completion_tokens:
                    description: Number of completion tokens used over the course of the run step.
                    type: integer
                prompt_tokens:
                    description: Number of prompt tokens used over the course of the run step.
                    type: integer
                total_tokens:
                    description: Total number of tokens used (prompt + completion).
                    type: integer
            required:
                - prompt_tokens
                - completion_tokens
                - total_tokens
            type: object
        RunStepDetailsMessageCreationObject:
            description: Details of the message creation by the run step.
            properties:
                message_creation:
                    properties:
                        message_id:
                            description: The ID of the message that was created by this run step.
                            type: string
                    required:
                        - message_id
                    type: object
                type:
                    description: Always `message_creation`.
                    enum:
                        - message_creation
                    type: string
            required:
                - type
                - message_creation
            title: Message creation
            type: object
        RunStepDetailsToolCallsCodeObject:
            description: Details of the Code Interpreter tool call the run step was involved in.
            properties:
                code_interpreter:
                    description: The Code Interpreter tool call definition.
                    properties:
                        input:
                            description: The input to the Code Interpreter tool call.
                            type: string
                        outputs:
                            description: The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
                            items:
                                oneOf:
                                    - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeOutputLogsObject'
                                    - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject'
                                type: object
                                x-oaiExpandable: true
                            type: array
                    required:
                        - input
                        - outputs
                    type: object
                id:
                    description: The ID of the tool call.
                    type: string
                type:
                    description: The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
                    enum:
                        - code_interpreter
                    type: string
            required:
                - id
                - type
                - code_interpreter
            title: Code interpreter tool call
            type: object
        RunStepDetailsToolCallsCodeOutputImageObject:
            properties:
                image:
                    properties:
                        file_id:
                            description: The [file](/docs/api-reference/files) ID of the image.
                            type: string
                    required:
                        - file_id
                    type: object
                type:
                    description: Always `image`.
                    enum:
                        - image
                    type: string
            required:
                - type
                - image
            title: Code interpreter image output
            type: object
        RunStepDetailsToolCallsCodeOutputLogsObject:
            description: Text output from the Code Interpreter tool call as part of a run step.
            properties:
                logs:
                    description: The text output from the Code Interpreter tool call.
                    type: string
                type:
                    description: Always `logs`.
                    enum:
                        - logs
                    type: string
            required:
                - type
                - logs
            title: Code interpreter log output
            type: object
        RunStepDetailsToolCallsFunctionObject:
            properties:
                function:
                    description: The definition of the function that was called.
                    properties:
                        arguments:
                            description: The arguments passed to the function.
                            type: string
                        name:
                            description: The name of the function.
                            type: string
                        output:
                            description: The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
                            nullable: true
                            type: string
                    required:
                        - name
                        - arguments
                        - output
                    type: object
                id:
                    description: The ID of the tool call object.
                    type: string
                type:
                    description: The type of tool call. This is always going to be `function` for this type of tool call.
                    enum:
                        - function
                    type: string
            required:
                - id
                - type
                - function
            title: Function tool call
            type: object
        RunStepDetailsToolCallsObject:
            description: Details of the tool call.
            properties:
                tool_calls:
                    description: |
                        An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`.
                    items:
                        oneOf:
                            - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeObject'
                            - $ref: '#/components/schemas/RunStepDetailsToolCallsRetrievalObject'
                            - $ref: '#/components/schemas/RunStepDetailsToolCallsFunctionObject'
                        x-oaiExpandable: true
                    type: array
                type:
                    description: Always `tool_calls`.
                    enum:
                        - tool_calls
                    type: string
            required:
                - type
                - tool_calls
            title: Tool calls
            type: object
        RunStepDetailsToolCallsRetrievalObject:
            properties:
                id:
                    description: The ID of the tool call object.
                    type: string
                retrieval:
                    description: For now, this is always going to be an empty object.
                    type: object
                    x-oaiTypeLabel: map
                type:
                    description: The type of tool call. This is always going to be `retrieval` for this type of tool call.
                    enum:
                        - retrieval
                    type: string
            required:
                - id
                - type
                - retrieval
            title: Retrieval tool call
            type: object
        RunStepObject:
            description: |
                Represents a step in execution of a run.
            properties:
                assistant_id:
                    description: The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
                    type: string
                cancelled_at:
                    description: The Unix timestamp (in seconds) for when the run step was cancelled.
                    nullable: true
                    type: integer
                completed_at:
                    description: The Unix timestamp (in seconds) for when the run step completed.
                    nullable: true
                    type: integer
                created_at:
                    description: The Unix timestamp (in seconds) for when the run step was created.
                    type: integer
                expired_at:
                    description: The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
                    nullable: true
                    type: integer
                failed_at:
                    description: The Unix timestamp (in seconds) for when the run step failed.
                    nullable: true
                    type: integer
                id:
                    description: The identifier of the run step, which can be referenced in API endpoints.
                    type: string
                last_error:
                    description: The last error associated with this run step. Will be `null` if there are no errors.
                    nullable: true
                    properties:
                        code:
                            description: One of `server_error` or `rate_limit_exceeded`.
                            enum:
                                - server_error
                                - rate_limit_exceeded
                            type: string
                        message:
                            description: A human-readable description of the error.
                            type: string
                    required:
                        - code
                        - message
                    type: object
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                object:
                    description: The object type, which is always `thread.run.step`.
                    enum:
                        - thread.run.step
                    type: string
                run_id:
                    description: The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
                    type: string
                status:
                    description: The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
                    enum:
                        - in_progress
                        - cancelled
                        - failed
                        - completed
                        - expired
                    type: string
                step_details:
                    description: The details of the run step.
                    oneOf:
                        - $ref: '#/components/schemas/RunStepDetailsMessageCreationObject'
                        - $ref: '#/components/schemas/RunStepDetailsToolCallsObject'
                    type: object
                    x-oaiExpandable: true
                thread_id:
                    description: The ID of the [thread](/docs/api-reference/threads) that was run.
                    type: string
                type:
                    description: The type of run step, which can be either `message_creation` or `tool_calls`.
                    enum:
                        - message_creation
                        - tool_calls
                    type: string
                usage:
                    $ref: '#/components/schemas/RunStepCompletionUsage'
            required:
                - id
                - object
                - created_at
                - assistant_id
                - thread_id
                - run_id
                - type
                - status
                - step_details
                - last_error
                - expired_at
                - cancelled_at
                - failed_at
                - completed_at
                - metadata
                - usage
            title: Run steps
            type: object
            x-oaiMeta:
                beta: true
                example: |
                    {
                      "id": "step_abc123",
                      "object": "thread.run.step",
                      "created_at": 1699063291,
                      "run_id": "run_abc123",
                      "assistant_id": "asst_abc123",
                      "thread_id": "thread_abc123",
                      "type": "message_creation",
                      "status": "completed",
                      "cancelled_at": null,
                      "completed_at": 1699063291,
                      "expired_at": null,
                      "failed_at": null,
                      "last_error": null,
                      "step_details": {
                        "type": "message_creation",
                        "message_creation": {
                          "message_id": "msg_abc123"
                        }
                      },
                      "usage": {
                        "prompt_tokens": 123,
                        "completion_tokens": 456,
                        "total_tokens": 579
                      }
                    }
                name: The run step object
        RunToolCallObject:
            description: Tool call objects
            properties:
                function:
                    description: The function definition.
                    properties:
                        arguments:
                            description: The arguments that the model expects you to pass to the function.
                            type: string
                        name:
                            description: The name of the function.
                            type: string
                    required:
                        - name
                        - arguments
                    type: object
                id:
                    description: The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.
                    type: string
                type:
                    description: The type of tool call the output is required for. For now, this is always `function`.
                    enum:
                        - function
                    type: string
            required:
                - id
                - type
                - function
            type: object
        SubmitToolOutputsRunRequest:
            additionalProperties: false
            properties:
                tool_outputs:
                    description: A list of tools for which the outputs are being submitted.
                    items:
                        properties:
                            output:
                                description: The output of the tool call to be submitted to continue the run.
                                type: string
                            tool_call_id:
                                description: The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
                                type: string
                        type: object
                    type: array
            required:
                - tool_outputs
            type: object
        ThreadObject:
            description: Represents a thread that contains [messages](/docs/api-reference/messages).
            properties:
                created_at:
                    description: The Unix timestamp (in seconds) for when the thread was created.
                    type: integer
                id:
                    description: The identifier, which can be referenced in API endpoints.
                    type: string
                metadata:
                    description: |
                        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                    nullable: true
                    type: object
                    x-oaiTypeLabel: map
                object:
                    description: The object type, which is always `thread`.
                    enum:
                        - thread
                    type: string
            required:
                - id
                - object
                - created_at
                - metadata
            title: Thread
            type: object
            x-oaiMeta:
                beta: true
                example: |
                    {
                      "id": "thread_abc123",
                      "object": "thread",
                      "created_at": 1698107661,
                      "metadata": {}
                    }
                name: The thread object
        XCreateToolRequest:
            additionalProperties: false
            properties:
                contents:
                    description: Contents of the tool
                    nullable: true
                    type: string
                description:
                    description: Description of the tool
                    type: string
                name:
                    description: The name of the tool
                    type: string
                subtool:
                    description: The name of the sub tool to use rather than the first tool
                    nullable: true
                    type: string
                url:
                    description: URL of the tool
                    nullable: true
                    type: string
            required:
                - name
            type: object
        XDeleteToolResponse:
            additionalProperties: false
            properties:
                deleted:
                    type: boolean
                id:
                    type: string
                object:
                    enum:
                        - tool.deleted
                    type: string
            required:
                - id
                - object
                - deleted
            type: object
        XListThreadsResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/ThreadObject'
                    type: array
                first_id:
                    example: thread_abc123
                    type: string
                has_more:
                    example: false
                    type: boolean
                last_id:
                    example: thread_abc456
                    type: string
                object:
                    example: list
                    type: string
            required:
                - object
                - data
                - first_id
                - last_id
                - has_more
            type: object
        XListToolsResponse:
            properties:
                data:
                    items:
                        $ref: '#/components/schemas/XToolObject'
                    type: array
                first_id:
                    example: tool_abc123
                    type: string
                has_more:
                    example: false
                    type: boolean
                last_id:
                    example: tool_abc456
                    type: string
                object:
                    example: list
                    type: string
            required:
                - object
                - data
                - first_id
                - last_id
                - has_more
            type: object
        XModifyToolRequest:
            additionalProperties: false
            properties:
                contents:
                    description: Contents of the tool
                    nullable: true
                    type: string
                description:
                    description: Description of the tool
                    type: string
                name:
                    description: The name of the tool
                    type: string
                retool:
                    default: false
                    description: Pull the contents of the tool from the URL to redefine the tool
                    type: boolean
                url:
                    description: URL of the tool
                    nullable: true
                    type: string
            required:
                - name
            type: object
        XToolObject:
            additionalProperties: false
            properties:
                contents:
                    description: Contents of the tool
                    nullable: true
                    type: string
                created_at:
                    description: The Unix timestamp (in seconds) for when the assistant file was created.
                    type: integer
                description:
                    description: Description of the tool
                    type: string
                id:
                    description: The id of the tool
                    type: string
                name:
                    description: The name of the tool
                    type: string
                object:
                    description: The object type, which is always `tool`.
                    enum:
                        - tool
                    type: string
                subtool:
                    description: The name of the sub tool to use rather than the first tool
                    nullable: true
                    type: string
                url:
                    description: URL of the tool
                    nullable: true
                    type: string
            required:
                - id
                - created_at
                - name
                - object
            type: object
    securitySchemes:
        ApiKeyAuth:
            scheme: bearer
            type: http
info:
    contact:
        name: OpenAI Support
        url: https://help.openai.com/
    description: The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
    license:
        name: MIT
        url: https://github.com/openai/openai-openapi/blob/master/LICENSE
    termsOfService: https://openai.com/policies/terms-of-use
    title: OpenAI API
    version: 2.0.0
openapi: 3.0.0
paths:
    /assistants:
        get:
            operationId: listAssistants
            parameters:
                - description: |
                    A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                  in: query
                  name: limit
                  schema:
                    default: 20
                    type: integer
                - description: |
                    Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                  in: query
                  name: order
                  schema:
                    default: desc
                    enum:
                        - asc
                        - desc
                    type: string
                - description: |
                    A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                  in: query
                  name: after
                  schema:
                    type: string
                - description: |
                    A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                  in: query
                  name: before
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListAssistantsResponse'
                    description: OK
            summary: Returns a list of assistants.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl "https://api.openai.com/v1/assistants?order=desc&limit=20" \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const myAssistants = await openai.beta.assistants.list({
                                order: "desc",
                                limit: "20",
                              });

                              console.log(myAssistants.data);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            my_assistants = client.beta.assistants.list(
                                order="desc",
                                limit="20",
                            )
                            print(my_assistants.data)
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "id": "asst_abc123",
                              "object": "assistant",
                              "created_at": 1698982736,
                              "name": "Coding Tutor",
                              "description": null,
                              "model": "gpt-4",
                              "instructions": "You are a helpful assistant designed to make me better at coding!",
                              "tools": [],
                              "file_ids": [],
                              "metadata": {}
                            },
                            {
                              "id": "asst_abc456",
                              "object": "assistant",
                              "created_at": 1698982718,
                              "name": "My Assistant",
                              "description": null,
                              "model": "gpt-4",
                              "instructions": "You are a helpful assistant designed to make me better at coding!",
                              "tools": [],
                              "file_ids": [],
                              "metadata": {}
                            },
                            {
                              "id": "asst_abc789",
                              "object": "assistant",
                              "created_at": 1698982643,
                              "name": null,
                              "description": null,
                              "model": "gpt-4",
                              "instructions": null,
                              "tools": [],
                              "file_ids": [],
                              "metadata": {}
                            }
                          ],
                          "first_id": "asst_abc123",
                          "last_id": "asst_abc789",
                          "has_more": false
                        }
                group: assistants
                name: List assistants
                returns: A list of [assistant](/docs/api-reference/assistants/object) objects.
        post:
            operationId: createAssistant
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateAssistantRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AssistantObject'
                    description: OK
            summary: Create an assistant with a model and instructions.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    - request:
                        curl: |
                            curl "https://api.openai.com/v1/assistants" \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                "instructions": "You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
                                "name": "Math Tutor",
                                "tools": [{"type": "code_interpreter"}],
                                "model": "gpt-4"
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const myAssistant = await openai.beta.assistants.create({
                                instructions:
                                  "You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
                                name: "Math Tutor",
                                tools: [{ type: "code_interpreter" }],
                                model: "gpt-4",
                              });

                              console.log(myAssistant);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            my_assistant = client.beta.assistants.create(
                                instructions="You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
                                name="Math Tutor",
                                tools=[{"type": "code_interpreter"}],
                                model="gpt-4",
                            )
                            print(my_assistant)
                      response: |
                        {
                          "id": "asst_abc123",
                          "object": "assistant",
                          "created_at": 1698984975,
                          "name": "Math Tutor",
                          "description": null,
                          "model": "gpt-4",
                          "instructions": "You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
                          "tools": [
                            {
                              "type": "code_interpreter"
                            }
                          ],
                          "file_ids": [],
                          "metadata": {}
                        }
                      title: Code Interpreter
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/assistants \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                "instructions": "You are an HR bot, and you have access to files to answer employee questions about company policies.",
                                "tools": [{"type": "retrieval"}],
                                "model": "gpt-4",
                                "file_ids": ["file-abc123"]
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const myAssistant = await openai.beta.assistants.create({
                                instructions:
                                  "You are an HR bot, and you have access to files to answer employee questions about company policies.",
                                name: "HR Helper",
                                tools: [{ type: "retrieval" }],
                                model: "gpt-4",
                                file_ids: ["file-abc123"],
                              });

                              console.log(myAssistant);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            my_assistant = client.beta.assistants.create(
                                instructions="You are an HR bot, and you have access to files to answer employee questions about company policies.",
                                name="HR Helper",
                                tools=[{"type": "retrieval"}],
                                model="gpt-4",
                                file_ids=["file-abc123"],
                            )
                            print(my_assistant)
                      response: |
                        {
                          "id": "asst_abc123",
                          "object": "assistant",
                          "created_at": 1699009403,
                          "name": "HR Helper",
                          "description": null,
                          "model": "gpt-4",
                          "instructions": "You are an HR bot, and you have access to files to answer employee questions about company policies.",
                          "tools": [
                            {
                              "type": "retrieval"
                            }
                          ],
                          "file_ids": [
                            "file-abc123"
                          ],
                          "metadata": {}
                        }
                      title: Files
                group: assistants
                name: Create assistant
                returns: An [assistant](/docs/api-reference/assistants/object) object.
    /assistants/{assistant_id}:
        delete:
            operationId: deleteAssistant
            parameters:
                - description: The ID of the assistant to delete.
                  in: path
                  name: assistant_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteAssistantResponse'
                    description: OK
            summary: Delete an assistant.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/assistants/asst_abc123 \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -X DELETE
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const response = await openai.beta.assistants.del("asst_abc123");

                              console.log(response);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            response = client.beta.assistants.delete("asst_abc123")
                            print(response)
                    response: |
                        {
                          "id": "asst_abc123",
                          "object": "assistant.deleted",
                          "deleted": true
                        }
                group: assistants
                name: Delete assistant
                returns: Deletion status
        get:
            operationId: getAssistant
            parameters:
                - description: The ID of the assistant to retrieve.
                  in: path
                  name: assistant_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AssistantObject'
                    description: OK
            summary: Retrieves an assistant.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/assistants/asst_abc123 \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const myAssistant = await openai.beta.assistants.retrieve(
                                "asst_abc123"
                              );

                              console.log(myAssistant);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            my_assistant = client.beta.assistants.retrieve("asst_abc123")
                            print(my_assistant)
                    response: |
                        {
                          "id": "asst_abc123",
                          "object": "assistant",
                          "created_at": 1699009709,
                          "name": "HR Helper",
                          "description": null,
                          "model": "gpt-4",
                          "instructions": "You are an HR bot, and you have access to files to answer employee questions about company policies.",
                          "tools": [
                            {
                              "type": "retrieval"
                            }
                          ],
                          "file_ids": [
                            "file-abc123"
                          ],
                          "metadata": {}
                        }
                group: assistants
                name: Retrieve assistant
                returns: The [assistant](/docs/api-reference/assistants/object) object matching the specified ID.
        post:
            operationId: modifyAssistant
            parameters:
                - description: The ID of the assistant to modify.
                  in: path
                  name: assistant_id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ModifyAssistantRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AssistantObject'
                    description: OK
            summary: Modifies an assistant.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/assistants/asst_abc123 \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                  "instructions": "You are an HR bot, and you have access to files to answer employee questions about company policies. Always response with info from either of the files.",
                                  "tools": [{"type": "retrieval"}],
                                  "model": "gpt-4",
                                  "file_ids": ["file-abc123", "file-abc456"]
                                }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const myUpdatedAssistant = await openai.beta.assistants.update(
                                "asst_abc123",
                                {
                                  instructions:
                                    "You are an HR bot, and you have access to files to answer employee questions about company policies. Always response with info from either of the files.",
                                  name: "HR Helper",
                                  tools: [{ type: "retrieval" }],
                                  model: "gpt-4",
                                  file_ids: [
                                    "file-abc123",
                                    "file-abc456",
                                  ],
                                }
                              );

                              console.log(myUpdatedAssistant);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            my_updated_assistant = client.beta.assistants.update(
                              "asst_abc123",
                              instructions="You are an HR bot, and you have access to files to answer employee questions about company policies. Always response with info from either of the files.",
                              name="HR Helper",
                              tools=[{"type": "retrieval"}],
                              model="gpt-4",
                              file_ids=["file-abc123", "file-abc456"],
                            )

                            print(my_updated_assistant)
                    response: |
                        {
                          "id": "asst_abc123",
                          "object": "assistant",
                          "created_at": 1699009709,
                          "name": "HR Helper",
                          "description": null,
                          "model": "gpt-4",
                          "instructions": "You are an HR bot, and you have access to files to answer employee questions about company policies. Always response with info from either of the files.",
                          "tools": [
                            {
                              "type": "retrieval"
                            }
                          ],
                          "file_ids": [
                            "file-abc123",
                            "file-abc456"
                          ],
                          "metadata": {}
                        }
                group: assistants
                name: Modify assistant
                returns: The modified [assistant](/docs/api-reference/assistants/object) object.
    /assistants/{assistant_id}/files:
        get:
            operationId: listAssistantFiles
            parameters:
                - description: The ID of the assistant the file belongs to.
                  in: path
                  name: assistant_id
                  required: true
                  schema:
                    type: string
                - description: |
                    A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                  in: query
                  name: limit
                  schema:
                    default: 20
                    type: integer
                - description: |
                    Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                  in: query
                  name: order
                  schema:
                    default: desc
                    enum:
                        - asc
                        - desc
                    type: string
                - description: |
                    A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                  in: query
                  name: after
                  schema:
                    type: string
                - description: |
                    A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                  in: query
                  name: before
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListAssistantFilesResponse'
                    description: OK
            summary: Returns a list of assistant files.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/assistants/asst_abc123/files \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |
                            import OpenAI from "openai";
                            const openai = new OpenAI();

                            async function main() {
                              const assistantFiles = await openai.beta.assistants.files.list(
                                "asst_abc123"
                              );
                              console.log(assistantFiles);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            assistant_files = client.beta.assistants.files.list(
                              assistant_id="asst_abc123"
                            )
                            print(assistant_files)
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "id": "file-abc123",
                              "object": "assistant.file",
                              "created_at": 1699060412,
                              "assistant_id": "asst_abc123"
                            },
                            {
                              "id": "file-abc456",
                              "object": "assistant.file",
                              "created_at": 1699060412,
                              "assistant_id": "asst_abc123"
                            }
                          ],
                          "first_id": "file-abc123",
                          "last_id": "file-abc456",
                          "has_more": false
                        }
                group: assistants
                name: List assistant files
                returns: A list of [assistant file](/docs/api-reference/assistants/file-object) objects.
        post:
            operationId: createAssistantFile
            parameters:
                - description: |
                    The ID of the assistant for which to create a File.
                  in: path
                  name: assistant_id
                  required: true
                  schema:
                    example: file-abc123
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateAssistantFileRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AssistantFileObject'
                    description: OK
            summary: Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/assistants/asst_abc123/files \
                                -H 'Authorization: Bearer $OPENAI_API_KEY"' \
                                -H 'Content-Type: application/json' \
                                -H 'OpenAI-Beta: assistants=v1' \
                                -d '{
                                  "file_id": "file-abc123"
                                }'
                        node.js: |
                            import OpenAI from "openai";
                            const openai = new OpenAI();

                            async function main() {
                              const myAssistantFile = await openai.beta.assistants.files.create(
                                "asst_abc123",
                                {
                                  file_id: "file-abc123"
                                }
                              );
                              console.log(myAssistantFile);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            assistant_file = client.beta.assistants.files.create(
                              assistant_id="asst_abc123",
                              file_id="file-abc123"
                            )
                            print(assistant_file)
                    response: |
                        {
                          "id": "file-abc123",
                          "object": "assistant.file",
                          "created_at": 1699055364,
                          "assistant_id": "asst_abc123"
                        }
                group: assistants
                name: Create assistant file
                returns: An [assistant file](/docs/api-reference/assistants/file-object) object.
    /assistants/{assistant_id}/files/{file_id}:
        delete:
            operationId: deleteAssistantFile
            parameters:
                - description: The ID of the assistant that the file belongs to.
                  in: path
                  name: assistant_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the file to delete.
                  in: path
                  name: file_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteAssistantFileResponse'
                    description: OK
            summary: Delete an assistant file.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/assistants/asst_abc123/files/file-abc123 \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -X DELETE
                        node.js: |
                            import OpenAI from "openai";
                            const openai = new OpenAI();

                            async function main() {
                              const deletedAssistantFile = await openai.beta.assistants.files.del(
                                "asst_abc123",
                                "file-abc123"
                              );
                              console.log(deletedAssistantFile);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            deleted_assistant_file = client.beta.assistants.files.delete(
                                assistant_id="asst_abc123",
                                file_id="file-abc123"
                            )
                            print(deleted_assistant_file)
                    response: |
                        {
                          id: "file-abc123",
                          object: "assistant.file.deleted",
                          deleted: true
                        }
                group: assistants
                name: Delete assistant file
                returns: Deletion status
        get:
            operationId: getAssistantFile
            parameters:
                - description: The ID of the assistant who the file belongs to.
                  in: path
                  name: assistant_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the file we're getting.
                  in: path
                  name: file_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AssistantFileObject'
                    description: OK
            summary: Retrieves an AssistantFile.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/assistants/asst_abc123/files/file-abc123 \
                              -H 'Authorization: Bearer $OPENAI_API_KEY"' \
                              -H 'Content-Type: application/json' \
                              -H 'OpenAI-Beta: assistants=v1'
                        node.js: |
                            import OpenAI from "openai";
                            const openai = new OpenAI();

                            async function main() {
                              const myAssistantFile = await openai.beta.assistants.files.retrieve(
                                "asst_abc123",
                                "file-abc123"
                              );
                              console.log(myAssistantFile);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            assistant_file = client.beta.assistants.files.retrieve(
                              assistant_id="asst_abc123",
                              file_id="file-abc123"
                            )
                            print(assistant_file)
                    response: |
                        {
                          "id": "file-abc123",
                          "object": "assistant.file",
                          "created_at": 1699055364,
                          "assistant_id": "asst_abc123"
                        }
                group: assistants
                name: Retrieve assistant file
                returns: The [assistant file](/docs/api-reference/assistants/file-object) object matching the specified ID.
    /audio/speech:
        post:
            operationId: createSpeech
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateSpeechRequest'
                required: true
            responses:
                "200":
                    content:
                        application/octet-stream:
                            schema:
                                format: binary
                                type: string
                    description: OK
                    headers:
                        Transfer-Encoding:
                            description: chunked
                            schema:
                                type: string
            summary: Generates audio from the input text.
            tags:
                - Audio
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/audio/speech \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -d '{
                                "model": "tts-1",
                                "input": "The quick brown fox jumped over the lazy dog.",
                                "voice": "alloy"
                              }' \
                              --output speech.mp3
                        node: |
                            import fs from "fs";
                            import path from "path";
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            const speechFile = path.resolve("./speech.mp3");

                            async function main() {
                              const mp3 = await openai.audio.speech.create({
                                model: "tts-1",
                                voice: "alloy",
                                input: "Today is a wonderful day to build something people love!",
                              });
                              console.log(speechFile);
                              const buffer = Buffer.from(await mp3.arrayBuffer());
                              await fs.promises.writeFile(speechFile, buffer);
                            }
                            main();
                        python: |
                            from pathlib import Path
                            import openai

                            speech_file_path = Path(__file__).parent / "speech.mp3"
                            response = openai.audio.speech.create(
                              model="tts-1",
                              voice="alloy",
                              input="The quick brown fox jumped over the lazy dog."
                            )
                            response.stream_to_file(speech_file_path)
                group: audio
                name: Create speech
                returns: The audio file content.
    /audio/transcriptions:
        post:
            operationId: createTranscription
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            $ref: '#/components/schemas/CreateTranscriptionRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateTranscriptionResponse'
                    description: OK
            summary: Transcribes audio into the input language.
            tags:
                - Audio
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/audio/transcriptions \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: multipart/form-data" \
                              -F file="@/path/to/file/audio.mp3" \
                              -F model="whisper-1"
                        node: |
                            import fs from "fs";
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const transcription = await openai.audio.transcriptions.create({
                                file: fs.createReadStream("audio.mp3"),
                                model: "whisper-1",
                              });

                              console.log(transcription.text);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            audio_file = open("speech.mp3", "rb")
                            transcript = client.audio.transcriptions.create(
                              model="whisper-1",
                              file=audio_file
                            )
                    response: |
                        {
                          "text": "Imagine the wildest idea that you've ever had, and you're curious about how it might scale to something that's a 100, a 1,000 times bigger. This is a place where you can get to do that."
                        }
                group: audio
                name: Create transcription
                returns: The transcribed text.
    /audio/translations:
        post:
            operationId: createTranslation
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            $ref: '#/components/schemas/CreateTranslationRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateTranslationResponse'
                    description: OK
            summary: Translates audio into English.
            tags:
                - Audio
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/audio/translations \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: multipart/form-data" \
                              -F file="@/path/to/file/german.m4a" \
                              -F model="whisper-1"
                        node: |
                            import fs from "fs";
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                                const translation = await openai.audio.translations.create({
                                    file: fs.createReadStream("speech.mp3"),
                                    model: "whisper-1",
                                });

                                console.log(translation.text);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            audio_file = open("speech.mp3", "rb")
                            transcript = client.audio.translations.create(
                              model="whisper-1",
                              file=audio_file
                            )
                    response: |
                        {
                          "text": "Hello, my name is Wolfgang and I come from Germany. Where are you heading today?"
                        }
                group: audio
                name: Create translation
                returns: The translated text.
    /chat/completions:
        post:
            operationId: createChatCompletion
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateChatCompletionRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateChatCompletionResponse'
                    description: OK
            summary: Creates a model response for the given chat conversation.
            tags:
                - Chat
            x-oaiMeta:
                examples:
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/chat/completions \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "model": "VAR_model_id",
                                "messages": [
                                  {
                                    "role": "system",
                                    "content": "You are a helpful assistant."
                                  },
                                  {
                                    "role": "user",
                                    "content": "Hello!"
                                  }
                                ]
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const completion = await openai.chat.completions.create({
                                messages: [{ role: "system", content: "You are a helpful assistant." }],
                                model: "VAR_model_id",
                              });

                              console.log(completion.choices[0]);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            completion = client.chat.completions.create(
                              model="VAR_model_id",
                              messages=[
                                {"role": "system", "content": "You are a helpful assistant."},
                                {"role": "user", "content": "Hello!"}
                              ]
                            )

                            print(completion.choices[0].message)
                      response: |
                        {
                          "id": "chatcmpl-123",
                          "object": "chat.completion",
                          "created": 1677652288,
                          "model": "gpt-3.5-turbo-0613",
                          "system_fingerprint": "fp_44709d6fcb",
                          "choices": [{
                            "index": 0,
                            "message": {
                              "role": "assistant",
                              "content": "\n\nHello there, how may I assist you today?",
                            },
                            "logprobs": null,
                            "finish_reason": "stop"
                          }],
                          "usage": {
                            "prompt_tokens": 9,
                            "completion_tokens": 12,
                            "total_tokens": 21
                          }
                        }
                      title: Default
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/chat/completions \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "model": "gpt-4-vision-preview",
                                "messages": [
                                  {
                                    "role": "user",
                                    "content": [
                                      {
                                        "type": "text",
                                        "text": "What’s in this image?"
                                      },
                                      {
                                        "type": "image_url",
                                        "image_url": {
                                          "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "max_tokens": 300
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const response = await openai.chat.completions.create({
                                model: "gpt-4-vision-preview",
                                messages: [
                                  {
                                    role: "user",
                                    content: [
                                      { type: "text", text: "What’s in this image?" },
                                      {
                                        type: "image_url",
                                        image_url:
                                          "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
                                      },
                                    ],
                                  },
                                ],
                              });
                              console.log(response.choices[0]);
                            }
                            main();
                        python: |
                            from openai import OpenAI

                            client = OpenAI()

                            response = client.chat.completions.create(
                                model="gpt-4-vision-preview",
                                messages=[
                                    {
                                        "role": "user",
                                        "content": [
                                            {"type": "text", "text": "What’s in this image?"},
                                            {
                                                "type": "image_url",
                                                "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
                                            },
                                        ],
                                    }
                                ],
                                max_tokens=300,
                            )

                            print(response.choices[0])
                      response: |
                        {
                          "id": "chatcmpl-123",
                          "object": "chat.completion",
                          "created": 1677652288,
                          "model": "gpt-3.5-turbo-0613",
                          "system_fingerprint": "fp_44709d6fcb",
                          "choices": [{
                            "index": 0,
                            "message": {
                              "role": "assistant",
                              "content": "\n\nHello there, how may I assist you today?",
                            },
                            "logprobs": null,
                            "finish_reason": "stop"
                          }],
                          "usage": {
                            "prompt_tokens": 9,
                            "completion_tokens": 12,
                            "total_tokens": 21
                          }
                        }
                      title: Image input
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/chat/completions \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "model": "VAR_model_id",
                                "messages": [
                                  {
                                    "role": "system",
                                    "content": "You are a helpful assistant."
                                  },
                                  {
                                    "role": "user",
                                    "content": "Hello!"
                                  }
                                ],
                                "stream": true
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const completion = await openai.chat.completions.create({
                                model: "VAR_model_id",
                                messages: [
                                  {"role": "system", "content": "You are a helpful assistant."},
                                  {"role": "user", "content": "Hello!"}
                                ],
                                stream: true,
                              });

                              for await (const chunk of completion) {
                                console.log(chunk.choices[0].delta.content);
                              }
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            completion = client.chat.completions.create(
                              model="VAR_model_id",
                              messages=[
                                {"role": "system", "content": "You are a helpful assistant."},
                                {"role": "user", "content": "Hello!"}
                              ],
                              stream=True
                            )

                            for chunk in completion:
                              print(chunk.choices[0].delta)
                      response: |
                        {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"role":"assistant","content":""},"logprobs":null,"finish_reason":null}]}

                        {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"Hello"},"logprobs":null,"finish_reason":null}]}

                        {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"!"},"logprobs":null,"finish_reason":null}]}

                        ....

                        {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":" today"},"logprobs":null,"finish_reason":null}]}

                        {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"?"},"logprobs":null,"finish_reason":null}]}

                        {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{},"logprobs":null,"finish_reason":"stop"}]}
                      title: Streaming
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/chat/completions \
                            -H "Content-Type: application/json" \
                            -H "Authorization: Bearer $OPENAI_API_KEY" \
                            -d '{
                              "model": "gpt-3.5-turbo",
                              "messages": [
                                {
                                  "role": "user",
                                  "content": "What is the weather like in Boston?"
                                }
                              ],
                              "tools": [
                                {
                                  "type": "function",
                                  "function": {
                                    "name": "get_current_weather",
                                    "description": "Get the current weather in a given location",
                                    "parameters": {
                                      "type": "object",
                                      "properties": {
                                        "location": {
                                          "type": "string",
                                          "description": "The city and state, e.g. San Francisco, CA"
                                        },
                                        "unit": {
                                          "type": "string",
                                          "enum": ["celsius", "fahrenheit"]
                                        }
                                      },
                                      "required": ["location"]
                                    }
                                  }
                                }
                              ],
                              "tool_choice": "auto"
                            }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const messages = [{"role": "user", "content": "What's the weather like in Boston today?"}];
                              const tools = [
                                  {
                                    "type": "function",
                                    "function": {
                                      "name": "get_current_weather",
                                      "description": "Get the current weather in a given location",
                                      "parameters": {
                                        "type": "object",
                                        "properties": {
                                          "location": {
                                            "type": "string",
                                            "description": "The city and state, e.g. San Francisco, CA",
                                          },
                                          "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
                                        },
                                        "required": ["location"],
                                      },
                                    }
                                  }
                              ];

                              const response = await openai.chat.completions.create({
                                model: "gpt-3.5-turbo",
                                messages: messages,
                                tools: tools,
                                tool_choice: "auto",
                              });

                              console.log(response);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            tools = [
                              {
                                "type": "function",
                                "function": {
                                  "name": "get_current_weather",
                                  "description": "Get the current weather in a given location",
                                  "parameters": {
                                    "type": "object",
                                    "properties": {
                                      "location": {
                                        "type": "string",
                                        "description": "The city and state, e.g. San Francisco, CA",
                                      },
                                      "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
                                    },
                                    "required": ["location"],
                                  },
                                }
                              }
                            ]
                            messages = [{"role": "user", "content": "What's the weather like in Boston today?"}]
                            completion = client.chat.completions.create(
                              model="VAR_model_id",
                              messages=messages,
                              tools=tools,
                              tool_choice="auto"
                            )

                            print(completion)
                      response: |
                        {
                          "id": "chatcmpl-abc123",
                          "object": "chat.completion",
                          "created": 1699896916,
                          "model": "gpt-3.5-turbo-0613",
                          "choices": [
                            {
                              "index": 0,
                              "message": {
                                "role": "assistant",
                                "content": null,
                                "tool_calls": [
                                  {
                                    "id": "call_abc123",
                                    "type": "function",
                                    "function": {
                                      "name": "get_current_weather",
                                      "arguments": "{\n\"location\": \"Boston, MA\"\n}"
                                    }
                                  }
                                ]
                              },
                              "logprobs": null,
                              "finish_reason": "tool_calls"
                            }
                          ],
                          "usage": {
                            "prompt_tokens": 82,
                            "completion_tokens": 17,
                            "total_tokens": 99
                          }
                        }
                      title: Functions
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/chat/completions \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "model": "VAR_model_id",
                                "messages": [
                                  {
                                    "role": "user",
                                    "content": "Hello!"
                                  }
                                ],
                                "logprobs": true,
                                "top_logprobs": 2
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const completion = await openai.chat.completions.create({
                                messages: [{ role: "user", content: "Hello!" }],
                                model: "VAR_model_id",
                                logprobs: true,
                                top_logprobs: 2,
                              });

                              console.log(completion.choices[0]);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            completion = client.chat.completions.create(
                              model="VAR_model_id",
                              messages=[
                                {"role": "user", "content": "Hello!"}
                              ],
                              logprobs=True,
                              top_logprobs=2
                            )

                            print(completion.choices[0].message)
                            print(completion.choices[0].logprobs)
                      response: |
                        {
                          "id": "chatcmpl-123",
                          "object": "chat.completion",
                          "created": 1702685778,
                          "model": "gpt-3.5-turbo-0613",
                          "choices": [
                            {
                              "index": 0,
                              "message": {
                                "role": "assistant",
                                "content": "Hello! How can I assist you today?"
                              },
                              "logprobs": {
                                "content": [
                                  {
                                    "token": "Hello",
                                    "logprob": -0.31725305,
                                    "bytes": [72, 101, 108, 108, 111],
                                    "top_logprobs": [
                                      {
                                        "token": "Hello",
                                        "logprob": -0.31725305,
                                        "bytes": [72, 101, 108, 108, 111]
                                      },
                                      {
                                        "token": "Hi",
                                        "logprob": -1.3190403,
                                        "bytes": [72, 105]
                                      }
                                    ]
                                  },
                                  {
                                    "token": "!",
                                    "logprob": -0.02380986,
                                    "bytes": [
                                      33
                                    ],
                                    "top_logprobs": [
                                      {
                                        "token": "!",
                                        "logprob": -0.02380986,
                                        "bytes": [33]
                                      },
                                      {
                                        "token": " there",
                                        "logprob": -3.787621,
                                        "bytes": [32, 116, 104, 101, 114, 101]
                                      }
                                    ]
                                  },
                                  {
                                    "token": " How",
                                    "logprob": -0.000054669687,
                                    "bytes": [32, 72, 111, 119],
                                    "top_logprobs": [
                                      {
                                        "token": " How",
                                        "logprob": -0.000054669687,
                                        "bytes": [32, 72, 111, 119]
                                      },
                                      {
                                        "token": "<|end|>",
                                        "logprob": -10.953937,
                                        "bytes": null
                                      }
                                    ]
                                  },
                                  {
                                    "token": " can",
                                    "logprob": -0.015801601,
                                    "bytes": [32, 99, 97, 110],
                                    "top_logprobs": [
                                      {
                                        "token": " can",
                                        "logprob": -0.015801601,
                                        "bytes": [32, 99, 97, 110]
                                      },
                                      {
                                        "token": " may",
                                        "logprob": -4.161023,
                                        "bytes": [32, 109, 97, 121]
                                      }
                                    ]
                                  },
                                  {
                                    "token": " I",
                                    "logprob": -3.7697225e-6,
                                    "bytes": [
                                      32,
                                      73
                                    ],
                                    "top_logprobs": [
                                      {
                                        "token": " I",
                                        "logprob": -3.7697225e-6,
                                        "bytes": [32, 73]
                                      },
                                      {
                                        "token": " assist",
                                        "logprob": -13.596657,
                                        "bytes": [32, 97, 115, 115, 105, 115, 116]
                                      }
                                    ]
                                  },
                                  {
                                    "token": " assist",
                                    "logprob": -0.04571125,
                                    "bytes": [32, 97, 115, 115, 105, 115, 116],
                                    "top_logprobs": [
                                      {
                                        "token": " assist",
                                        "logprob": -0.04571125,
                                        "bytes": [32, 97, 115, 115, 105, 115, 116]
                                      },
                                      {
                                        "token": " help",
                                        "logprob": -3.1089056,
                                        "bytes": [32, 104, 101, 108, 112]
                                      }
                                    ]
                                  },
                                  {
                                    "token": " you",
                                    "logprob": -5.4385737e-6,
                                    "bytes": [32, 121, 111, 117],
                                    "top_logprobs": [
                                      {
                                        "token": " you",
                                        "logprob": -5.4385737e-6,
                                        "bytes": [32, 121, 111, 117]
                                      },
                                      {
                                        "token": " today",
                                        "logprob": -12.807695,
                                        "bytes": [32, 116, 111, 100, 97, 121]
                                      }
                                    ]
                                  },
                                  {
                                    "token": " today",
                                    "logprob": -0.0040071653,
                                    "bytes": [32, 116, 111, 100, 97, 121],
                                    "top_logprobs": [
                                      {
                                        "token": " today",
                                        "logprob": -0.0040071653,
                                        "bytes": [32, 116, 111, 100, 97, 121]
                                      },
                                      {
                                        "token": "?",
                                        "logprob": -5.5247097,
                                        "bytes": [63]
                                      }
                                    ]
                                  },
                                  {
                                    "token": "?",
                                    "logprob": -0.0008108172,
                                    "bytes": [63],
                                    "top_logprobs": [
                                      {
                                        "token": "?",
                                        "logprob": -0.0008108172,
                                        "bytes": [63]
                                      },
                                      {
                                        "token": "?\n",
                                        "logprob": -7.184561,
                                        "bytes": [63, 10]
                                      }
                                    ]
                                  }
                                ]
                              },
                              "finish_reason": "stop"
                            }
                          ],
                          "usage": {
                            "prompt_tokens": 9,
                            "completion_tokens": 9,
                            "total_tokens": 18
                          },
                          "system_fingerprint": null
                        }
                      title: Logprobs
                group: chat
                name: Create chat completion
                path: create
                returns: |
                    Returns a [chat completion](/docs/api-reference/chat/object) object, or a streamed sequence of [chat completion chunk](/docs/api-reference/chat/streaming) objects if the request is streamed.
    /completions:
        post:
            operationId: createCompletion
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateCompletionRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateCompletionResponse'
                    description: OK
            summary: Creates a completion for the provided prompt and parameters.
            tags:
                - Completions
            x-oaiMeta:
                examples:
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/completions \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "model": "VAR_model_id",
                                "prompt": "Say this is a test",
                                "max_tokens": 7,
                                "temperature": 0
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const completion = await openai.completions.create({
                                model: "VAR_model_id",
                                prompt: "Say this is a test.",
                                max_tokens: 7,
                                temperature: 0,
                              });

                              console.log(completion);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.completions.create(
                              model="VAR_model_id",
                              prompt="Say this is a test",
                              max_tokens=7,
                              temperature=0
                            )
                      response: |
                        {
                          "id": "cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7",
                          "object": "text_completion",
                          "created": 1589478378,
                          "model": "VAR_model_id",
                          "system_fingerprint": "fp_44709d6fcb",
                          "choices": [
                            {
                              "text": "\n\nThis is indeed a test",
                              "index": 0,
                              "logprobs": null,
                              "finish_reason": "length"
                            }
                          ],
                          "usage": {
                            "prompt_tokens": 5,
                            "completion_tokens": 7,
                            "total_tokens": 12
                          }
                        }
                      title: No streaming
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/completions \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "model": "VAR_model_id",
                                "prompt": "Say this is a test",
                                "max_tokens": 7,
                                "temperature": 0,
                                "stream": true
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const stream = await openai.completions.create({
                                model: "VAR_model_id",
                                prompt: "Say this is a test.",
                                stream: true,
                              });

                              for await (const chunk of stream) {
                                console.log(chunk.choices[0].text)
                              }
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            for chunk in client.completions.create(
                              model="VAR_model_id",
                              prompt="Say this is a test",
                              max_tokens=7,
                              temperature=0,
                              stream=True
                            ):
                              print(chunk.choices[0].text)
                      response: |
                        {
                          "id": "cmpl-7iA7iJjj8V2zOkCGvWF2hAkDWBQZe",
                          "object": "text_completion",
                          "created": 1690759702,
                          "choices": [
                            {
                              "text": "This",
                              "index": 0,
                              "logprobs": null,
                              "finish_reason": null
                            }
                          ],
                          "model": "gpt-3.5-turbo-instruct"
                          "system_fingerprint": "fp_44709d6fcb",
                        }
                      title: Streaming
                group: completions
                legacy: true
                name: Create completion
                returns: |
                    Returns a [completion](/docs/api-reference/completions/object) object, or a sequence of completion objects if the request is streamed.
    /embeddings:
        post:
            operationId: createEmbedding
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateEmbeddingRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateEmbeddingResponse'
                    description: OK
            summary: Creates an embedding vector representing the input text.
            tags:
                - Embeddings
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/embeddings \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -d '{
                                "input": "The food was delicious and the waiter...",
                                "model": "text-embedding-ada-002",
                                "encoding_format": "float"
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const embedding = await openai.embeddings.create({
                                model: "text-embedding-ada-002",
                                input: "The quick brown fox jumped over the lazy dog",
                                encoding_format: "float",
                              });

                              console.log(embedding);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.embeddings.create(
                              model="text-embedding-ada-002",
                              input="The food was delicious and the waiter...",
                              encoding_format="float"
                            )
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "object": "embedding",
                              "embedding": [
                                0.0023064255,
                                -0.009327292,
                                .... (1536 floats total for ada-002)
                                -0.0028842222,
                              ],
                              "index": 0
                            }
                          ],
                          "model": "text-embedding-ada-002",
                          "usage": {
                            "prompt_tokens": 8,
                            "total_tokens": 8
                          }
                        }
                group: embeddings
                name: Create embeddings
                returns: A list of [embedding](/docs/api-reference/embeddings/object) objects.
    /files:
        get:
            operationId: listFiles
            parameters:
                - description: Only return files with the given purpose.
                  in: query
                  name: purpose
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListFilesResponse'
                    description: OK
            summary: Returns a list of files that belong to the user's organization.
            tags:
                - Files
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/files \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const list = await openai.files.list();

                              for await (const file of list) {
                                console.log(file);
                              }
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.files.list()
                    response: |
                        {
                          "data": [
                            {
                              "id": "file-abc123",
                              "object": "file",
                              "bytes": 175,
                              "created_at": 1613677385,
                              "filename": "salesOverview.pdf",
                              "purpose": "assistants",
                            },
                            {
                              "id": "file-abc123",
                              "object": "file",
                              "bytes": 140,
                              "created_at": 1613779121,
                              "filename": "puppy.jsonl",
                              "purpose": "fine-tune",
                            }
                          ],
                          "object": "list"
                        }
                group: files
                name: List files
                returns: A list of [File](/docs/api-reference/files/object) objects.
        post:
            operationId: createFile
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            $ref: '#/components/schemas/CreateFileRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/OpenAIFile'
                    description: OK
            summary: |
                Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.

                The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.

                Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
            tags:
                - Files
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/files \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -F purpose="fine-tune" \
                              -F file="@mydata.jsonl"
                        node.js: |-
                            import fs from "fs";
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const file = await openai.files.create({
                                file: fs.createReadStream("mydata.jsonl"),
                                purpose: "fine-tune",
                              });

                              console.log(file);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.files.create(
                              file=open("mydata.jsonl", "rb"),
                              purpose="fine-tune"
                            )
                    response: |
                        {
                          "id": "file-abc123",
                          "object": "file",
                          "bytes": 120000,
                          "created_at": 1677610602,
                          "filename": "mydata.jsonl",
                          "purpose": "fine-tune",
                        }
                group: files
                name: Upload file
                returns: The uploaded [File](/docs/api-reference/files/object) object.
    /files/{file_id}:
        delete:
            operationId: deleteFile
            parameters:
                - description: The ID of the file to use for this request.
                  in: path
                  name: file_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteFileResponse'
                    description: OK
            summary: Delete a file.
            tags:
                - Files
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/files/file-abc123 \
                              -X DELETE \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const file = await openai.files.del("file-abc123");

                              console.log(file);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.files.delete("file-abc123")
                    response: |
                        {
                          "id": "file-abc123",
                          "object": "file",
                          "deleted": true
                        }
                group: files
                name: Delete file
                returns: Deletion status.
        get:
            operationId: retrieveFile
            parameters:
                - description: The ID of the file to use for this request.
                  in: path
                  name: file_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/OpenAIFile'
                    description: OK
            summary: Returns information about a specific file.
            tags:
                - Files
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/files/file-abc123 \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const file = await openai.files.retrieve("file-abc123");

                              console.log(file);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.files.retrieve("file-abc123")
                    response: |
                        {
                          "id": "file-abc123",
                          "object": "file",
                          "bytes": 120000,
                          "created_at": 1677610602,
                          "filename": "mydata.jsonl",
                          "purpose": "fine-tune",
                        }
                group: files
                name: Retrieve file
                returns: The [File](/docs/api-reference/files/object) object matching the specified ID.
    /files/{file_id}/content:
        get:
            operationId: downloadFile
            parameters:
                - description: The ID of the file to use for this request.
                  in: path
                  name: file_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
            summary: Returns the contents of the specified file.
            tags:
                - Files
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/files/file-abc123/content \
                              -H "Authorization: Bearer $OPENAI_API_KEY" > file.jsonl
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const file = await openai.files.retrieveContent("file-abc123");

                              console.log(file);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            content = client.files.retrieve_content("file-abc123")
                group: files
                name: Retrieve file content
                returns: The file content.
    /fine_tuning/jobs:
        get:
            operationId: listPaginatedFineTuningJobs
            parameters:
                - description: Identifier for the last job from the previous pagination request.
                  in: query
                  name: after
                  schema:
                    type: string
                - description: Number of fine-tuning jobs to retrieve.
                  in: query
                  name: limit
                  schema:
                    default: 20
                    type: integer
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListPaginatedFineTuningJobsResponse'
                    description: OK
            summary: |
                List your organization's fine-tuning jobs
            tags:
                - Fine-tuning
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/fine_tuning/jobs?limit=2 \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const list = await openai.fineTuning.jobs.list();

                              for await (const fineTune of list) {
                                console.log(fineTune);
                              }
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.fine_tuning.jobs.list()
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "object": "fine_tuning.job.event",
                              "id": "ft-event-TjX0lMfOniCZX64t9PUQT5hn",
                              "created_at": 1689813489,
                              "level": "warn",
                              "message": "Fine tuning process stopping due to job cancellation",
                              "data": null,
                              "type": "message"
                            },
                            { ... },
                            { ... }
                          ], "has_more": true
                        }
                group: fine-tuning
                name: List fine-tuning jobs
                returns: A list of paginated [fine-tuning job](/docs/api-reference/fine-tuning/object) objects.
        post:
            operationId: createFineTuningJob
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateFineTuningJobRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/FineTuningJob'
                    description: OK
            summary: |
                Creates a fine-tuning job which begins the process of creating a new model from a given dataset.

                Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.

                [Learn more about fine-tuning](/docs/guides/fine-tuning)
            tags:
                - Fine-tuning
            x-oaiMeta:
                examples:
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/fine_tuning/jobs \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "training_file": "file-BK7bzQj3FfZFXr7DbL6xJwfo",
                                "model": "gpt-3.5-turbo"
                              }'
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const fineTune = await openai.fineTuning.jobs.create({
                                training_file: "file-abc123"
                              });

                              console.log(fineTune);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.fine_tuning.jobs.create(
                              training_file="file-abc123",
                              model="gpt-3.5-turbo"
                            )
                      response: |
                        {
                          "object": "fine_tuning.job",
                          "id": "ftjob-abc123",
                          "model": "gpt-3.5-turbo-0613",
                          "created_at": 1614807352,
                          "fine_tuned_model": null,
                          "organization_id": "org-123",
                          "result_files": [],
                          "status": "queued",
                          "validation_file": null,
                          "training_file": "file-abc123",
                        }
                      title: Default
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/fine_tuning/jobs \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "training_file": "file-abc123",
                                "model": "gpt-3.5-turbo",
                                "hyperparameters": {
                                  "n_epochs": 2
                                }
                              }'
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const fineTune = await openai.fineTuning.jobs.create({
                                training_file: "file-abc123",
                                model: "gpt-3.5-turbo",
                                hyperparameters: { n_epochs: 2 }
                              });

                              console.log(fineTune);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.fine_tuning.jobs.create(
                              training_file="file-abc123",
                              model="gpt-3.5-turbo",
                              hyperparameters={
                                "n_epochs":2
                              }
                            )
                      response: |
                        {
                          "object": "fine_tuning.job",
                          "id": "ftjob-abc123",
                          "model": "gpt-3.5-turbo-0613",
                          "created_at": 1614807352,
                          "fine_tuned_model": null,
                          "organization_id": "org-123",
                          "result_files": [],
                          "status": "queued",
                          "validation_file": null,
                          "training_file": "file-abc123",
                          "hyperparameters": {"n_epochs": 2},
                        }
                      title: Epochs
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/fine_tuning/jobs \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "training_file": "file-abc123",
                                "validation_file": "file-abc123",
                                "model": "gpt-3.5-turbo"
                              }'
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const fineTune = await openai.fineTuning.jobs.create({
                                training_file: "file-abc123",
                                validation_file: "file-abc123"
                              });

                              console.log(fineTune);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.fine_tuning.jobs.create(
                              training_file="file-abc123",
                              validation_file="file-def456",
                              model="gpt-3.5-turbo"
                            )
                      response: |
                        {
                          "object": "fine_tuning.job",
                          "id": "ftjob-abc123",
                          "model": "gpt-3.5-turbo-0613",
                          "created_at": 1614807352,
                          "fine_tuned_model": null,
                          "organization_id": "org-123",
                          "result_files": [],
                          "status": "queued",
                          "validation_file": "file-abc123",
                          "training_file": "file-abc123",
                        }
                      title: Validation file
                group: fine-tuning
                name: Create fine-tuning job
                returns: A [fine-tuning.job](/docs/api-reference/fine-tuning/object) object.
    /fine_tuning/jobs/{fine_tuning_job_id}:
        get:
            operationId: retrieveFineTuningJob
            parameters:
                - description: |
                    The ID of the fine-tuning job.
                  in: path
                  name: fine_tuning_job_id
                  required: true
                  schema:
                    example: ft-AF1WoRqd3aJAHsqc9NY7iL8F
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/FineTuningJob'
                    description: OK
            summary: |
                Get info about a fine-tuning job.

                [Learn more about fine-tuning](/docs/guides/fine-tuning)
            tags:
                - Fine-tuning
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/fine_tuning/jobs/ft-AF1WoRqd3aJAHsqc9NY7iL8F \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const fineTune = await openai.fineTuning.jobs.retrieve("ftjob-abc123");

                              console.log(fineTune);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.fine_tuning.jobs.retrieve("ftjob-abc123")
                    response: |
                        {
                          "object": "fine_tuning.job",
                          "id": "ftjob-abc123",
                          "model": "davinci-002",
                          "created_at": 1692661014,
                          "finished_at": 1692661190,
                          "fine_tuned_model": "ft:davinci-002:my-org:custom_suffix:7q8mpxmy",
                          "organization_id": "org-123",
                          "result_files": [
                              "file-abc123"
                          ],
                          "status": "succeeded",
                          "validation_file": null,
                          "training_file": "file-abc123",
                          "hyperparameters": {
                              "n_epochs": 4,
                          },
                          "trained_tokens": 5768
                        }
                group: fine-tuning
                name: Retrieve fine-tuning job
                returns: The [fine-tuning](/docs/api-reference/fine-tuning/object) object with the given ID.
    /fine_tuning/jobs/{fine_tuning_job_id}/cancel:
        post:
            operationId: cancelFineTuningJob
            parameters:
                - description: |
                    The ID of the fine-tuning job to cancel.
                  in: path
                  name: fine_tuning_job_id
                  required: true
                  schema:
                    example: ft-AF1WoRqd3aJAHsqc9NY7iL8F
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/FineTuningJob'
                    description: OK
            summary: |
                Immediately cancel a fine-tune job.
            tags:
                - Fine-tuning
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl -X POST https://api.openai.com/v1/fine_tuning/jobs/ftjob-abc123/cancel \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const fineTune = await openai.fineTuning.jobs.cancel("ftjob-abc123");

                              console.log(fineTune);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.fine_tuning.jobs.cancel("ftjob-abc123")
                    response: |
                        {
                          "object": "fine_tuning.job",
                          "id": "ftjob-abc123",
                          "model": "gpt-3.5-turbo-0613",
                          "created_at": 1689376978,
                          "fine_tuned_model": null,
                          "organization_id": "org-123",
                          "result_files": [],
                          "hyperparameters": {
                            "n_epochs":  "auto"
                          },
                          "status": "cancelled",
                          "validation_file": "file-abc123",
                          "training_file": "file-abc123"
                        }
                group: fine-tuning
                name: Cancel fine-tuning
                returns: The cancelled [fine-tuning](/docs/api-reference/fine-tuning/object) object.
    /fine_tuning/jobs/{fine_tuning_job_id}/events:
        get:
            operationId: listFineTuningEvents
            parameters:
                - description: |
                    The ID of the fine-tuning job to get events for.
                  in: path
                  name: fine_tuning_job_id
                  required: true
                  schema:
                    example: ft-AF1WoRqd3aJAHsqc9NY7iL8F
                    type: string
                - description: Identifier for the last event from the previous pagination request.
                  in: query
                  name: after
                  schema:
                    type: string
                - description: Number of events to retrieve.
                  in: query
                  name: limit
                  schema:
                    default: 20
                    type: integer
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListFineTuningJobEventsResponse'
                    description: OK
            summary: |
                Get status updates for a fine-tuning job.
            tags:
                - Fine-tuning
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/fine_tuning/jobs/ftjob-abc123/events \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const list = await openai.fineTuning.list_events(id="ftjob-abc123", limit=2);

                              for await (const fineTune of list) {
                                console.log(fineTune);
                              }
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.fine_tuning.jobs.list_events(
                              fine_tuning_job_id="ftjob-abc123",
                              limit=2
                            )
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "object": "fine_tuning.job.event",
                              "id": "ft-event-ddTJfwuMVpfLXseO0Am0Gqjm",
                              "created_at": 1692407401,
                              "level": "info",
                              "message": "Fine tuning job successfully completed",
                              "data": null,
                              "type": "message"
                            },
                            {
                              "object": "fine_tuning.job.event",
                              "id": "ft-event-tyiGuB72evQncpH87xe505Sv",
                              "created_at": 1692407400,
                              "level": "info",
                              "message": "New fine-tuned model created: ft:gpt-3.5-turbo:openai::7p4lURel",
                              "data": null,
                              "type": "message"
                            }
                          ],
                          "has_more": true
                        }
                group: fine-tuning
                name: List fine-tuning events
                returns: A list of fine-tuning event objects.
    /images/edits:
        post:
            operationId: createImageEdit
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            $ref: '#/components/schemas/CreateImageEditRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ImagesResponse'
                    description: OK
            summary: Creates an edited or extended image given an original image and a prompt.
            tags:
                - Images
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/images/edits \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -F image="@otter.png" \
                              -F mask="@mask.png" \
                              -F prompt="A cute baby sea otter wearing a beret" \
                              -F n=2 \
                              -F size="1024x1024"
                        node.js: |-
                            import fs from "fs";
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const image = await openai.images.edit({
                                image: fs.createReadStream("otter.png"),
                                mask: fs.createReadStream("mask.png"),
                                prompt: "A cute baby sea otter wearing a beret",
                              });

                              console.log(image.data);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.images.edit(
                              image=open("otter.png", "rb"),
                              mask=open("mask.png", "rb"),
                              prompt="A cute baby sea otter wearing a beret",
                              n=2,
                              size="1024x1024"
                            )
                    response: |
                        {
                          "created": 1589478378,
                          "data": [
                            {
                              "url": "https://..."
                            },
                            {
                              "url": "https://..."
                            }
                          ]
                        }
                group: images
                name: Create image edit
                returns: Returns a list of [image](/docs/api-reference/images/object) objects.
    /images/generations:
        post:
            operationId: createImage
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateImageRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ImagesResponse'
                    description: OK
            summary: Creates an image given a prompt.
            tags:
                - Images
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/images/generations \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "model": "dall-e-3",
                                "prompt": "A cute baby sea otter",
                                "n": 1,
                                "size": "1024x1024"
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const image = await openai.images.generate({ model: "dall-e-3", prompt: "A cute baby sea otter" });

                              console.log(image.data);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.images.generate(
                              model="dall-e-3",
                              prompt="A cute baby sea otter",
                              n=1,
                              size="1024x1024"
                            )
                    response: |
                        {
                          "created": 1589478378,
                          "data": [
                            {
                              "url": "https://..."
                            },
                            {
                              "url": "https://..."
                            }
                          ]
                        }
                group: images
                name: Create image
                returns: Returns a list of [image](/docs/api-reference/images/object) objects.
    /images/variations:
        post:
            operationId: createImageVariation
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            $ref: '#/components/schemas/CreateImageVariationRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ImagesResponse'
                    description: OK
            summary: Creates a variation of a given image.
            tags:
                - Images
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/images/variations \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -F image="@otter.png" \
                              -F n=2 \
                              -F size="1024x1024"
                        node.js: |-
                            import fs from "fs";
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const image = await openai.images.createVariation({
                                image: fs.createReadStream("otter.png"),
                              });

                              console.log(image.data);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            response = client.images.create_variation(
                              image=open("image_edit_original.png", "rb"),
                              n=2,
                              size="1024x1024"
                            )
                    response: |
                        {
                          "created": 1589478378,
                          "data": [
                            {
                              "url": "https://..."
                            },
                            {
                              "url": "https://..."
                            }
                          ]
                        }
                group: images
                name: Create image variation
                returns: Returns a list of [image](/docs/api-reference/images/object) objects.
    /models:
        get:
            operationId: listModels
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListModelsResponse'
                    description: OK
            summary: Lists the currently available models, and provides basic information about each one such as the owner and availability.
            tags:
                - Models
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/models \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const list = await openai.models.list();

                              for await (const model of list) {
                                console.log(model);
                              }
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.models.list()
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "id": "model-id-0",
                              "object": "model",
                              "created": 1686935002,
                              "owned_by": "organization-owner"
                            },
                            {
                              "id": "model-id-1",
                              "object": "model",
                              "created": 1686935002,
                              "owned_by": "organization-owner",
                            },
                            {
                              "id": "model-id-2",
                              "object": "model",
                              "created": 1686935002,
                              "owned_by": "openai"
                            },
                          ],
                          "object": "list"
                        }
                group: models
                name: List models
                returns: A list of [model](/docs/api-reference/models/object) objects.
    /models/{model}:
        delete:
            operationId: deleteModel
            parameters:
                - description: The model to delete
                  in: path
                  name: model
                  required: true
                  schema:
                    example: ft:gpt-3.5-turbo:acemeco:suffix:abc123
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteModelResponse'
                    description: OK
            summary: Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
            tags:
                - Models
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/models/ft:gpt-3.5-turbo:acemeco:suffix:abc123 \
                              -X DELETE \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const model = await openai.models.del("ft:gpt-3.5-turbo:acemeco:suffix:abc123");

                              console.log(model);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.models.delete("ft:gpt-3.5-turbo:acemeco:suffix:abc123")
                    response: |
                        {
                          "id": "ft:gpt-3.5-turbo:acemeco:suffix:abc123",
                          "object": "model",
                          "deleted": true
                        }
                group: models
                name: Delete a fine-tuned model
                returns: Deletion status.
        get:
            operationId: retrieveModel
            parameters:
                - description: The ID of the model to use for this request
                  in: path
                  name: model
                  required: true
                  schema:
                    example: gpt-3.5-turbo
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Model'
                    description: OK
            summary: Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
            tags:
                - Models
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/models/VAR_model_id \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const model = await openai.models.retrieve("gpt-3.5-turbo");

                              console.log(model);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.models.retrieve("VAR_model_id")
                    response: |
                        {
                          "id": "VAR_model_id",
                          "object": "model",
                          "created": 1686935002,
                          "owned_by": "openai"
                        }
                group: models
                name: Retrieve model
                returns: The [model](/docs/api-reference/models/object) object matching the specified ID.
    /moderations:
        post:
            operationId: createModeration
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateModerationRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateModerationResponse'
                    description: OK
            summary: Classifies if text violates OpenAI's Content Policy
            tags:
                - Moderations
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/moderations \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "input": "I want to kill them."
                              }'
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const moderation = await openai.moderations.create({ input: "I want to kill them." });

                              console.log(moderation);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.moderations.create(input="I want to kill them.")
                    response: |
                        {
                          "id": "modr-XXXXX",
                          "model": "text-moderation-005",
                          "results": [
                            {
                              "flagged": true,
                              "categories": {
                                "sexual": false,
                                "hate": false,
                                "harassment": false,
                                "self-harm": false,
                                "sexual/minors": false,
                                "hate/threatening": false,
                                "violence/graphic": false,
                                "self-harm/intent": false,
                                "self-harm/instructions": false,
                                "harassment/threatening": true,
                                "violence": true,
                              },
                              "category_scores": {
                                "sexual": 1.2282071e-06,
                                "hate": 0.010696256,
                                "harassment": 0.29842457,
                                "self-harm": 1.5236925e-08,
                                "sexual/minors": 5.7246268e-08,
                                "hate/threatening": 0.0060676364,
                                "violence/graphic": 4.435014e-06,
                                "self-harm/intent": 8.098441e-10,
                                "self-harm/instructions": 2.8498655e-11,
                                "harassment/threatening": 0.63055265,
                                "violence": 0.99011886,
                              }
                            }
                          ]
                        }
                group: moderations
                name: Create moderation
                returns: A [moderation](/docs/api-reference/moderations/object) object.
    /rubra/assistants:
        get:
            operationId: extendedListAssistants
            parameters:
                - description: |
                    A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                  in: query
                  name: limit
                  schema:
                    default: 20
                    type: integer
                - description: |
                    Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                  in: query
                  name: order
                  schema:
                    default: desc
                    enum:
                        - asc
                        - desc
                    type: string
                - description: |
                    A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                  in: query
                  name: after
                  schema:
                    type: string
                - description: |
                    A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                  in: query
                  name: before
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedListAssistantsResponse'
                    description: OK
            summary: Returns a list of assistants.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl "https://api.openai.com/v1/assistants?order=desc&limit=20" \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const myAssistants = await openai.beta.assistants.list({
                                order: "desc",
                                limit: "20",
                              });

                              console.log(myAssistants.data);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            my_assistants = client.beta.assistants.list(
                                order="desc",
                                limit="20",
                            )
                            print(my_assistants.data)
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "id": "asst_abc123",
                              "object": "assistant",
                              "created_at": 1698982736,
                              "name": "Coding Tutor",
                              "description": null,
                              "model": "gpt-4",
                              "instructions": "You are a helpful assistant designed to make me better at coding!",
                              "tools": [],
                              "file_ids": [],
                              "metadata": {}
                            },
                            {
                              "id": "asst_abc456",
                              "object": "assistant",
                              "created_at": 1698982718,
                              "name": "My Assistant",
                              "description": null,
                              "model": "gpt-4",
                              "instructions": "You are a helpful assistant designed to make me better at coding!",
                              "tools": [],
                              "file_ids": [],
                              "metadata": {}
                            },
                            {
                              "id": "asst_abc789",
                              "object": "assistant",
                              "created_at": 1698982643,
                              "name": null,
                              "description": null,
                              "model": "gpt-4",
                              "instructions": null,
                              "tools": [],
                              "file_ids": [],
                              "metadata": {}
                            }
                          ],
                          "first_id": "asst_abc123",
                          "last_id": "asst_abc789",
                          "has_more": false
                        }
                group: assistants
                name: List assistants
                returns: A list of [assistant](/docs/api-reference/assistants/object) objects.
        post:
            operationId: extendedCreateAssistant
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtendedCreateAssistantRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedAssistantObject'
                    description: OK
            summary: Create an assistant with a model and instructions.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    - request:
                        curl: |
                            curl "https://api.openai.com/v1/assistants" \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                "instructions": "You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
                                "name": "Math Tutor",
                                "tools": [{"type": "code_interpreter"}],
                                "model": "gpt-4"
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const myAssistant = await openai.beta.assistants.create({
                                instructions:
                                  "You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
                                name: "Math Tutor",
                                tools: [{ type: "code_interpreter" }],
                                model: "gpt-4",
                              });

                              console.log(myAssistant);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            my_assistant = client.beta.assistants.create(
                                instructions="You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
                                name="Math Tutor",
                                tools=[{"type": "code_interpreter"}],
                                model="gpt-4",
                            )
                            print(my_assistant)
                      response: |
                        {
                          "id": "asst_abc123",
                          "object": "assistant",
                          "created_at": 1698984975,
                          "name": "Math Tutor",
                          "description": null,
                          "model": "gpt-4",
                          "instructions": "You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
                          "tools": [
                            {
                              "type": "code_interpreter"
                            }
                          ],
                          "file_ids": [],
                          "metadata": {}
                        }
                      title: Code Interpreter
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/assistants \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                "instructions": "You are an HR bot, and you have access to files to answer employee questions about company policies.",
                                "tools": [{"type": "retrieval"}],
                                "model": "gpt-4",
                                "file_ids": ["file-abc123"]
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const myAssistant = await openai.beta.assistants.create({
                                instructions:
                                  "You are an HR bot, and you have access to files to answer employee questions about company policies.",
                                name: "HR Helper",
                                tools: [{ type: "retrieval" }],
                                model: "gpt-4",
                                file_ids: ["file-abc123"],
                              });

                              console.log(myAssistant);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            my_assistant = client.beta.assistants.create(
                                instructions="You are an HR bot, and you have access to files to answer employee questions about company policies.",
                                name="HR Helper",
                                tools=[{"type": "retrieval"}],
                                model="gpt-4",
                                file_ids=["file-abc123"],
                            )
                            print(my_assistant)
                      response: |
                        {
                          "id": "asst_abc123",
                          "object": "assistant",
                          "created_at": 1699009403,
                          "name": "HR Helper",
                          "description": null,
                          "model": "gpt-4",
                          "instructions": "You are an HR bot, and you have access to files to answer employee questions about company policies.",
                          "tools": [
                            {
                              "type": "retrieval"
                            }
                          ],
                          "file_ids": [
                            "file-abc123"
                          ],
                          "metadata": {}
                        }
                      title: Files
                group: assistants
                name: Create assistant
                returns: An [assistant](/docs/api-reference/assistants/object) object.
    /rubra/assistants/{assistant_id}:
        delete:
            operationId: extendedDeleteAssistant
            parameters:
                - description: The ID of the assistant to delete.
                  in: path
                  name: assistant_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedDeleteAssistantResponse'
                    description: OK
            summary: Delete an assistant.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/assistants/asst_abc123 \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -X DELETE
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const response = await openai.beta.assistants.del("asst_abc123");

                              console.log(response);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            response = client.beta.assistants.delete("asst_abc123")
                            print(response)
                    response: |
                        {
                          "id": "asst_abc123",
                          "object": "assistant.deleted",
                          "deleted": true
                        }
                group: assistants
                name: Delete assistant
                returns: Deletion status
        get:
            operationId: extendedGetAssistant
            parameters:
                - description: The ID of the assistant to retrieve.
                  in: path
                  name: assistant_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedAssistantObject'
                    description: OK
            summary: Retrieves an assistant.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/assistants/asst_abc123 \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const myAssistant = await openai.beta.assistants.retrieve(
                                "asst_abc123"
                              );

                              console.log(myAssistant);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            my_assistant = client.beta.assistants.retrieve("asst_abc123")
                            print(my_assistant)
                    response: |
                        {
                          "id": "asst_abc123",
                          "object": "assistant",
                          "created_at": 1699009709,
                          "name": "HR Helper",
                          "description": null,
                          "model": "gpt-4",
                          "instructions": "You are an HR bot, and you have access to files to answer employee questions about company policies.",
                          "tools": [
                            {
                              "type": "retrieval"
                            }
                          ],
                          "file_ids": [
                            "file-abc123"
                          ],
                          "metadata": {}
                        }
                group: assistants
                name: Retrieve assistant
                returns: The [assistant](/docs/api-reference/assistants/object) object matching the specified ID.
        post:
            operationId: extendedModifyAssistant
            parameters:
                - description: The ID of the assistant to modify.
                  in: path
                  name: assistant_id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtendedModifyAssistantRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedAssistantObject'
                    description: OK
            summary: Modifies an assistant.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/assistants/asst_abc123 \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                  "instructions": "You are an HR bot, and you have access to files to answer employee questions about company policies. Always response with info from either of the files.",
                                  "tools": [{"type": "retrieval"}],
                                  "model": "gpt-4",
                                  "file_ids": ["file-abc123", "file-abc456"]
                                }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const myUpdatedAssistant = await openai.beta.assistants.update(
                                "asst_abc123",
                                {
                                  instructions:
                                    "You are an HR bot, and you have access to files to answer employee questions about company policies. Always response with info from either of the files.",
                                  name: "HR Helper",
                                  tools: [{ type: "retrieval" }],
                                  model: "gpt-4",
                                  file_ids: [
                                    "file-abc123",
                                    "file-abc456",
                                  ],
                                }
                              );

                              console.log(myUpdatedAssistant);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            my_updated_assistant = client.beta.assistants.update(
                              "asst_abc123",
                              instructions="You are an HR bot, and you have access to files to answer employee questions about company policies. Always response with info from either of the files.",
                              name="HR Helper",
                              tools=[{"type": "retrieval"}],
                              model="gpt-4",
                              file_ids=["file-abc123", "file-abc456"],
                            )

                            print(my_updated_assistant)
                    response: |
                        {
                          "id": "asst_abc123",
                          "object": "assistant",
                          "created_at": 1699009709,
                          "name": "HR Helper",
                          "description": null,
                          "model": "gpt-4",
                          "instructions": "You are an HR bot, and you have access to files to answer employee questions about company policies. Always response with info from either of the files.",
                          "tools": [
                            {
                              "type": "retrieval"
                            }
                          ],
                          "file_ids": [
                            "file-abc123",
                            "file-abc456"
                          ],
                          "metadata": {}
                        }
                group: assistants
                name: Modify assistant
                returns: The modified [assistant](/docs/api-reference/assistants/object) object.
    /rubra/assistants/{assistant_id}/files:
        get:
            operationId: extendedListAssistantFiles
            parameters:
                - description: The ID of the assistant the file belongs to.
                  in: path
                  name: assistant_id
                  required: true
                  schema:
                    type: string
                - description: |
                    A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                  in: query
                  name: limit
                  schema:
                    default: 20
                    type: integer
                - description: |
                    Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                  in: query
                  name: order
                  schema:
                    default: desc
                    enum:
                        - asc
                        - desc
                    type: string
                - description: |
                    A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                  in: query
                  name: after
                  schema:
                    type: string
                - description: |
                    A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                  in: query
                  name: before
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedListAssistantFilesResponse'
                    description: OK
            summary: Returns a list of assistant files.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/assistants/asst_abc123/files \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |
                            import OpenAI from "openai";
                            const openai = new OpenAI();

                            async function main() {
                              const assistantFiles = await openai.beta.assistants.files.list(
                                "asst_abc123"
                              );
                              console.log(assistantFiles);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            assistant_files = client.beta.assistants.files.list(
                              assistant_id="asst_abc123"
                            )
                            print(assistant_files)
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "id": "file-abc123",
                              "object": "assistant.file",
                              "created_at": 1699060412,
                              "assistant_id": "asst_abc123"
                            },
                            {
                              "id": "file-abc456",
                              "object": "assistant.file",
                              "created_at": 1699060412,
                              "assistant_id": "asst_abc123"
                            }
                          ],
                          "first_id": "file-abc123",
                          "last_id": "file-abc456",
                          "has_more": false
                        }
                group: assistants
                name: List assistant files
                returns: A list of [assistant file](/docs/api-reference/assistants/file-object) objects.
        post:
            operationId: extendedCreateAssistantFile
            parameters:
                - description: |
                    The ID of the assistant for which to create a File.
                  in: path
                  name: assistant_id
                  required: true
                  schema:
                    example: file-abc123
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtendedCreateAssistantFileRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedAssistantFileObject'
                    description: OK
            summary: Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/assistants/asst_abc123/files \
                                -H 'Authorization: Bearer $OPENAI_API_KEY"' \
                                -H 'Content-Type: application/json' \
                                -H 'OpenAI-Beta: assistants=v1' \
                                -d '{
                                  "file_id": "file-abc123"
                                }'
                        node.js: |
                            import OpenAI from "openai";
                            const openai = new OpenAI();

                            async function main() {
                              const myAssistantFile = await openai.beta.assistants.files.create(
                                "asst_abc123",
                                {
                                  file_id: "file-abc123"
                                }
                              );
                              console.log(myAssistantFile);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            assistant_file = client.beta.assistants.files.create(
                              assistant_id="asst_abc123",
                              file_id="file-abc123"
                            )
                            print(assistant_file)
                    response: |
                        {
                          "id": "file-abc123",
                          "object": "assistant.file",
                          "created_at": 1699055364,
                          "assistant_id": "asst_abc123"
                        }
                group: assistants
                name: Create assistant file
                returns: An [assistant file](/docs/api-reference/assistants/file-object) object.
    /rubra/assistants/{assistant_id}/files/{file_id}:
        delete:
            operationId: extendedDeleteAssistantFile
            parameters:
                - description: The ID of the assistant that the file belongs to.
                  in: path
                  name: assistant_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the file to delete.
                  in: path
                  name: file_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedDeleteAssistantFileResponse'
                    description: OK
            summary: Delete an assistant file.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/assistants/asst_abc123/files/file-abc123 \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -X DELETE
                        node.js: |
                            import OpenAI from "openai";
                            const openai = new OpenAI();

                            async function main() {
                              const deletedAssistantFile = await openai.beta.assistants.files.del(
                                "asst_abc123",
                                "file-abc123"
                              );
                              console.log(deletedAssistantFile);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            deleted_assistant_file = client.beta.assistants.files.delete(
                                assistant_id="asst_abc123",
                                file_id="file-abc123"
                            )
                            print(deleted_assistant_file)
                    response: |
                        {
                          id: "file-abc123",
                          object: "assistant.file.deleted",
                          deleted: true
                        }
                group: assistants
                name: Delete assistant file
                returns: Deletion status
        get:
            operationId: extendedGetAssistantFile
            parameters:
                - description: The ID of the assistant who the file belongs to.
                  in: path
                  name: assistant_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the file we're getting.
                  in: path
                  name: file_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedAssistantFileObject'
                    description: OK
            summary: Retrieves an AssistantFile.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/assistants/asst_abc123/files/file-abc123 \
                              -H 'Authorization: Bearer $OPENAI_API_KEY"' \
                              -H 'Content-Type: application/json' \
                              -H 'OpenAI-Beta: assistants=v1'
                        node.js: |
                            import OpenAI from "openai";
                            const openai = new OpenAI();

                            async function main() {
                              const myAssistantFile = await openai.beta.assistants.files.retrieve(
                                "asst_abc123",
                                "file-abc123"
                              );
                              console.log(myAssistantFile);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            assistant_file = client.beta.assistants.files.retrieve(
                              assistant_id="asst_abc123",
                              file_id="file-abc123"
                            )
                            print(assistant_file)
                    response: |
                        {
                          "id": "file-abc123",
                          "object": "assistant.file",
                          "created_at": 1699055364,
                          "assistant_id": "asst_abc123"
                        }
                group: assistants
                name: Retrieve assistant file
                returns: The [assistant file](/docs/api-reference/assistants/file-object) object matching the specified ID.
    /rubra/audio/speech:
        post:
            operationId: extendedCreateSpeech
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtendedCreateSpeechRequest'
                required: true
            responses:
                "200":
                    content:
                        application/octet-stream:
                            schema:
                                format: binary
                                type: string
                    description: OK
                    headers:
                        Transfer-Encoding:
                            description: chunked
                            schema:
                                type: string
            summary: Generates audio from the input text.
            tags:
                - Audio
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/audio/speech \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -d '{
                                "model": "tts-1",
                                "input": "The quick brown fox jumped over the lazy dog.",
                                "voice": "alloy"
                              }' \
                              --output speech.mp3
                        node: |
                            import fs from "fs";
                            import path from "path";
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            const speechFile = path.resolve("./speech.mp3");

                            async function main() {
                              const mp3 = await openai.audio.speech.create({
                                model: "tts-1",
                                voice: "alloy",
                                input: "Today is a wonderful day to build something people love!",
                              });
                              console.log(speechFile);
                              const buffer = Buffer.from(await mp3.arrayBuffer());
                              await fs.promises.writeFile(speechFile, buffer);
                            }
                            main();
                        python: |
                            from pathlib import Path
                            import openai

                            speech_file_path = Path(__file__).parent / "speech.mp3"
                            response = openai.audio.speech.create(
                              model="tts-1",
                              voice="alloy",
                              input="The quick brown fox jumped over the lazy dog."
                            )
                            response.stream_to_file(speech_file_path)
                group: audio
                name: Create speech
                returns: The audio file content.
    /rubra/audio/transcriptions:
        post:
            operationId: extendedCreateTranscription
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            $ref: '#/components/schemas/ExtendedCreateTranscriptionRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedCreateTranscriptionResponse'
                    description: OK
            summary: Transcribes audio into the input language.
            tags:
                - Audio
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/audio/transcriptions \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: multipart/form-data" \
                              -F file="@/path/to/file/audio.mp3" \
                              -F model="whisper-1"
                        node: |
                            import fs from "fs";
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const transcription = await openai.audio.transcriptions.create({
                                file: fs.createReadStream("audio.mp3"),
                                model: "whisper-1",
                              });

                              console.log(transcription.text);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            audio_file = open("speech.mp3", "rb")
                            transcript = client.audio.transcriptions.create(
                              model="whisper-1",
                              file=audio_file
                            )
                    response: |
                        {
                          "text": "Imagine the wildest idea that you've ever had, and you're curious about how it might scale to something that's a 100, a 1,000 times bigger. This is a place where you can get to do that."
                        }
                group: audio
                name: Create transcription
                returns: The transcribed text.
    /rubra/audio/translations:
        post:
            operationId: extendedCreateTranslation
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            $ref: '#/components/schemas/ExtendedCreateTranslationRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedCreateTranslationResponse'
                    description: OK
            summary: Translates audio into English.
            tags:
                - Audio
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/audio/translations \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: multipart/form-data" \
                              -F file="@/path/to/file/german.m4a" \
                              -F model="whisper-1"
                        node: |
                            import fs from "fs";
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                                const translation = await openai.audio.translations.create({
                                    file: fs.createReadStream("speech.mp3"),
                                    model: "whisper-1",
                                });

                                console.log(translation.text);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            audio_file = open("speech.mp3", "rb")
                            transcript = client.audio.translations.create(
                              model="whisper-1",
                              file=audio_file
                            )
                    response: |
                        {
                          "text": "Hello, my name is Wolfgang and I come from Germany. Where are you heading today?"
                        }
                group: audio
                name: Create translation
                returns: The translated text.
    /rubra/chat/completions:
        post:
            operationId: extendedCreateChatCompletion
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtendedCreateChatCompletionRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedCreateChatCompletionResponse'
                    description: OK
            summary: Creates a model response for the given chat conversation.
            tags:
                - Chat
            x-oaiMeta:
                examples:
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/chat/completions \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "model": "VAR_model_id",
                                "messages": [
                                  {
                                    "role": "system",
                                    "content": "You are a helpful assistant."
                                  },
                                  {
                                    "role": "user",
                                    "content": "Hello!"
                                  }
                                ]
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const completion = await openai.chat.completions.create({
                                messages: [{ role: "system", content: "You are a helpful assistant." }],
                                model: "VAR_model_id",
                              });

                              console.log(completion.choices[0]);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            completion = client.chat.completions.create(
                              model="VAR_model_id",
                              messages=[
                                {"role": "system", "content": "You are a helpful assistant."},
                                {"role": "user", "content": "Hello!"}
                              ]
                            )

                            print(completion.choices[0].message)
                      response: |
                        {
                          "id": "chatcmpl-123",
                          "object": "chat.completion",
                          "created": 1677652288,
                          "model": "gpt-3.5-turbo-0613",
                          "system_fingerprint": "fp_44709d6fcb",
                          "choices": [{
                            "index": 0,
                            "message": {
                              "role": "assistant",
                              "content": "\n\nHello there, how may I assist you today?",
                            },
                            "logprobs": null,
                            "finish_reason": "stop"
                          }],
                          "usage": {
                            "prompt_tokens": 9,
                            "completion_tokens": 12,
                            "total_tokens": 21
                          }
                        }
                      title: Default
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/chat/completions \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "model": "gpt-4-vision-preview",
                                "messages": [
                                  {
                                    "role": "user",
                                    "content": [
                                      {
                                        "type": "text",
                                        "text": "What’s in this image?"
                                      },
                                      {
                                        "type": "image_url",
                                        "image_url": {
                                          "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "max_tokens": 300
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const response = await openai.chat.completions.create({
                                model: "gpt-4-vision-preview",
                                messages: [
                                  {
                                    role: "user",
                                    content: [
                                      { type: "text", text: "What’s in this image?" },
                                      {
                                        type: "image_url",
                                        image_url:
                                          "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
                                      },
                                    ],
                                  },
                                ],
                              });
                              console.log(response.choices[0]);
                            }
                            main();
                        python: |
                            from openai import OpenAI

                            client = OpenAI()

                            response = client.chat.completions.create(
                                model="gpt-4-vision-preview",
                                messages=[
                                    {
                                        "role": "user",
                                        "content": [
                                            {"type": "text", "text": "What’s in this image?"},
                                            {
                                                "type": "image_url",
                                                "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
                                            },
                                        ],
                                    }
                                ],
                                max_tokens=300,
                            )

                            print(response.choices[0])
                      response: |
                        {
                          "id": "chatcmpl-123",
                          "object": "chat.completion",
                          "created": 1677652288,
                          "model": "gpt-3.5-turbo-0613",
                          "system_fingerprint": "fp_44709d6fcb",
                          "choices": [{
                            "index": 0,
                            "message": {
                              "role": "assistant",
                              "content": "\n\nHello there, how may I assist you today?",
                            },
                            "logprobs": null,
                            "finish_reason": "stop"
                          }],
                          "usage": {
                            "prompt_tokens": 9,
                            "completion_tokens": 12,
                            "total_tokens": 21
                          }
                        }
                      title: Image input
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/chat/completions \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "model": "VAR_model_id",
                                "messages": [
                                  {
                                    "role": "system",
                                    "content": "You are a helpful assistant."
                                  },
                                  {
                                    "role": "user",
                                    "content": "Hello!"
                                  }
                                ],
                                "stream": true
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const completion = await openai.chat.completions.create({
                                model: "VAR_model_id",
                                messages: [
                                  {"role": "system", "content": "You are a helpful assistant."},
                                  {"role": "user", "content": "Hello!"}
                                ],
                                stream: true,
                              });

                              for await (const chunk of completion) {
                                console.log(chunk.choices[0].delta.content);
                              }
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            completion = client.chat.completions.create(
                              model="VAR_model_id",
                              messages=[
                                {"role": "system", "content": "You are a helpful assistant."},
                                {"role": "user", "content": "Hello!"}
                              ],
                              stream=True
                            )

                            for chunk in completion:
                              print(chunk.choices[0].delta)
                      response: |
                        {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"role":"assistant","content":""},"logprobs":null,"finish_reason":null}]}

                        {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"Hello"},"logprobs":null,"finish_reason":null}]}

                        {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"!"},"logprobs":null,"finish_reason":null}]}

                        ....

                        {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":" today"},"logprobs":null,"finish_reason":null}]}

                        {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"?"},"logprobs":null,"finish_reason":null}]}

                        {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-3.5-turbo-0613", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{},"logprobs":null,"finish_reason":"stop"}]}
                      title: Streaming
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/chat/completions \
                            -H "Content-Type: application/json" \
                            -H "Authorization: Bearer $OPENAI_API_KEY" \
                            -d '{
                              "model": "gpt-3.5-turbo",
                              "messages": [
                                {
                                  "role": "user",
                                  "content": "What is the weather like in Boston?"
                                }
                              ],
                              "tools": [
                                {
                                  "type": "function",
                                  "function": {
                                    "name": "get_current_weather",
                                    "description": "Get the current weather in a given location",
                                    "parameters": {
                                      "type": "object",
                                      "properties": {
                                        "location": {
                                          "type": "string",
                                          "description": "The city and state, e.g. San Francisco, CA"
                                        },
                                        "unit": {
                                          "type": "string",
                                          "enum": ["celsius", "fahrenheit"]
                                        }
                                      },
                                      "required": ["location"]
                                    }
                                  }
                                }
                              ],
                              "tool_choice": "auto"
                            }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const messages = [{"role": "user", "content": "What's the weather like in Boston today?"}];
                              const tools = [
                                  {
                                    "type": "function",
                                    "function": {
                                      "name": "get_current_weather",
                                      "description": "Get the current weather in a given location",
                                      "parameters": {
                                        "type": "object",
                                        "properties": {
                                          "location": {
                                            "type": "string",
                                            "description": "The city and state, e.g. San Francisco, CA",
                                          },
                                          "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
                                        },
                                        "required": ["location"],
                                      },
                                    }
                                  }
                              ];

                              const response = await openai.chat.completions.create({
                                model: "gpt-3.5-turbo",
                                messages: messages,
                                tools: tools,
                                tool_choice: "auto",
                              });

                              console.log(response);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            tools = [
                              {
                                "type": "function",
                                "function": {
                                  "name": "get_current_weather",
                                  "description": "Get the current weather in a given location",
                                  "parameters": {
                                    "type": "object",
                                    "properties": {
                                      "location": {
                                        "type": "string",
                                        "description": "The city and state, e.g. San Francisco, CA",
                                      },
                                      "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
                                    },
                                    "required": ["location"],
                                  },
                                }
                              }
                            ]
                            messages = [{"role": "user", "content": "What's the weather like in Boston today?"}]
                            completion = client.chat.completions.create(
                              model="VAR_model_id",
                              messages=messages,
                              tools=tools,
                              tool_choice="auto"
                            )

                            print(completion)
                      response: |
                        {
                          "id": "chatcmpl-abc123",
                          "object": "chat.completion",
                          "created": 1699896916,
                          "model": "gpt-3.5-turbo-0613",
                          "choices": [
                            {
                              "index": 0,
                              "message": {
                                "role": "assistant",
                                "content": null,
                                "tool_calls": [
                                  {
                                    "id": "call_abc123",
                                    "type": "function",
                                    "function": {
                                      "name": "get_current_weather",
                                      "arguments": "{\n\"location\": \"Boston, MA\"\n}"
                                    }
                                  }
                                ]
                              },
                              "logprobs": null,
                              "finish_reason": "tool_calls"
                            }
                          ],
                          "usage": {
                            "prompt_tokens": 82,
                            "completion_tokens": 17,
                            "total_tokens": 99
                          }
                        }
                      title: Functions
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/chat/completions \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "model": "VAR_model_id",
                                "messages": [
                                  {
                                    "role": "user",
                                    "content": "Hello!"
                                  }
                                ],
                                "logprobs": true,
                                "top_logprobs": 2
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const completion = await openai.chat.completions.create({
                                messages: [{ role: "user", content: "Hello!" }],
                                model: "VAR_model_id",
                                logprobs: true,
                                top_logprobs: 2,
                              });

                              console.log(completion.choices[0]);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            completion = client.chat.completions.create(
                              model="VAR_model_id",
                              messages=[
                                {"role": "user", "content": "Hello!"}
                              ],
                              logprobs=True,
                              top_logprobs=2
                            )

                            print(completion.choices[0].message)
                            print(completion.choices[0].logprobs)
                      response: |
                        {
                          "id": "chatcmpl-123",
                          "object": "chat.completion",
                          "created": 1702685778,
                          "model": "gpt-3.5-turbo-0613",
                          "choices": [
                            {
                              "index": 0,
                              "message": {
                                "role": "assistant",
                                "content": "Hello! How can I assist you today?"
                              },
                              "logprobs": {
                                "content": [
                                  {
                                    "token": "Hello",
                                    "logprob": -0.31725305,
                                    "bytes": [72, 101, 108, 108, 111],
                                    "top_logprobs": [
                                      {
                                        "token": "Hello",
                                        "logprob": -0.31725305,
                                        "bytes": [72, 101, 108, 108, 111]
                                      },
                                      {
                                        "token": "Hi",
                                        "logprob": -1.3190403,
                                        "bytes": [72, 105]
                                      }
                                    ]
                                  },
                                  {
                                    "token": "!",
                                    "logprob": -0.02380986,
                                    "bytes": [
                                      33
                                    ],
                                    "top_logprobs": [
                                      {
                                        "token": "!",
                                        "logprob": -0.02380986,
                                        "bytes": [33]
                                      },
                                      {
                                        "token": " there",
                                        "logprob": -3.787621,
                                        "bytes": [32, 116, 104, 101, 114, 101]
                                      }
                                    ]
                                  },
                                  {
                                    "token": " How",
                                    "logprob": -0.000054669687,
                                    "bytes": [32, 72, 111, 119],
                                    "top_logprobs": [
                                      {
                                        "token": " How",
                                        "logprob": -0.000054669687,
                                        "bytes": [32, 72, 111, 119]
                                      },
                                      {
                                        "token": "<|end|>",
                                        "logprob": -10.953937,
                                        "bytes": null
                                      }
                                    ]
                                  },
                                  {
                                    "token": " can",
                                    "logprob": -0.015801601,
                                    "bytes": [32, 99, 97, 110],
                                    "top_logprobs": [
                                      {
                                        "token": " can",
                                        "logprob": -0.015801601,
                                        "bytes": [32, 99, 97, 110]
                                      },
                                      {
                                        "token": " may",
                                        "logprob": -4.161023,
                                        "bytes": [32, 109, 97, 121]
                                      }
                                    ]
                                  },
                                  {
                                    "token": " I",
                                    "logprob": -3.7697225e-6,
                                    "bytes": [
                                      32,
                                      73
                                    ],
                                    "top_logprobs": [
                                      {
                                        "token": " I",
                                        "logprob": -3.7697225e-6,
                                        "bytes": [32, 73]
                                      },
                                      {
                                        "token": " assist",
                                        "logprob": -13.596657,
                                        "bytes": [32, 97, 115, 115, 105, 115, 116]
                                      }
                                    ]
                                  },
                                  {
                                    "token": " assist",
                                    "logprob": -0.04571125,
                                    "bytes": [32, 97, 115, 115, 105, 115, 116],
                                    "top_logprobs": [
                                      {
                                        "token": " assist",
                                        "logprob": -0.04571125,
                                        "bytes": [32, 97, 115, 115, 105, 115, 116]
                                      },
                                      {
                                        "token": " help",
                                        "logprob": -3.1089056,
                                        "bytes": [32, 104, 101, 108, 112]
                                      }
                                    ]
                                  },
                                  {
                                    "token": " you",
                                    "logprob": -5.4385737e-6,
                                    "bytes": [32, 121, 111, 117],
                                    "top_logprobs": [
                                      {
                                        "token": " you",
                                        "logprob": -5.4385737e-6,
                                        "bytes": [32, 121, 111, 117]
                                      },
                                      {
                                        "token": " today",
                                        "logprob": -12.807695,
                                        "bytes": [32, 116, 111, 100, 97, 121]
                                      }
                                    ]
                                  },
                                  {
                                    "token": " today",
                                    "logprob": -0.0040071653,
                                    "bytes": [32, 116, 111, 100, 97, 121],
                                    "top_logprobs": [
                                      {
                                        "token": " today",
                                        "logprob": -0.0040071653,
                                        "bytes": [32, 116, 111, 100, 97, 121]
                                      },
                                      {
                                        "token": "?",
                                        "logprob": -5.5247097,
                                        "bytes": [63]
                                      }
                                    ]
                                  },
                                  {
                                    "token": "?",
                                    "logprob": -0.0008108172,
                                    "bytes": [63],
                                    "top_logprobs": [
                                      {
                                        "token": "?",
                                        "logprob": -0.0008108172,
                                        "bytes": [63]
                                      },
                                      {
                                        "token": "?\n",
                                        "logprob": -7.184561,
                                        "bytes": [63, 10]
                                      }
                                    ]
                                  }
                                ]
                              },
                              "finish_reason": "stop"
                            }
                          ],
                          "usage": {
                            "prompt_tokens": 9,
                            "completion_tokens": 9,
                            "total_tokens": 18
                          },
                          "system_fingerprint": null
                        }
                      title: Logprobs
                group: chat
                name: Create chat completion
                path: create
                returns: |
                    Returns a [chat completion](/docs/api-reference/chat/object) object, or a streamed sequence of [chat completion chunk](/docs/api-reference/chat/streaming) objects if the request is streamed.
    /rubra/completions:
        post:
            operationId: extendedCreateCompletion
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtendedCreateCompletionRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedCreateCompletionResponse'
                    description: OK
            summary: Creates a completion for the provided prompt and parameters.
            tags:
                - Completions
            x-oaiMeta:
                examples:
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/completions \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "model": "VAR_model_id",
                                "prompt": "Say this is a test",
                                "max_tokens": 7,
                                "temperature": 0
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const completion = await openai.completions.create({
                                model: "VAR_model_id",
                                prompt: "Say this is a test.",
                                max_tokens: 7,
                                temperature: 0,
                              });

                              console.log(completion);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.completions.create(
                              model="VAR_model_id",
                              prompt="Say this is a test",
                              max_tokens=7,
                              temperature=0
                            )
                      response: |
                        {
                          "id": "cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7",
                          "object": "text_completion",
                          "created": 1589478378,
                          "model": "VAR_model_id",
                          "system_fingerprint": "fp_44709d6fcb",
                          "choices": [
                            {
                              "text": "\n\nThis is indeed a test",
                              "index": 0,
                              "logprobs": null,
                              "finish_reason": "length"
                            }
                          ],
                          "usage": {
                            "prompt_tokens": 5,
                            "completion_tokens": 7,
                            "total_tokens": 12
                          }
                        }
                      title: No streaming
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/completions \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "model": "VAR_model_id",
                                "prompt": "Say this is a test",
                                "max_tokens": 7,
                                "temperature": 0,
                                "stream": true
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const stream = await openai.completions.create({
                                model: "VAR_model_id",
                                prompt: "Say this is a test.",
                                stream: true,
                              });

                              for await (const chunk of stream) {
                                console.log(chunk.choices[0].text)
                              }
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            for chunk in client.completions.create(
                              model="VAR_model_id",
                              prompt="Say this is a test",
                              max_tokens=7,
                              temperature=0,
                              stream=True
                            ):
                              print(chunk.choices[0].text)
                      response: |
                        {
                          "id": "cmpl-7iA7iJjj8V2zOkCGvWF2hAkDWBQZe",
                          "object": "text_completion",
                          "created": 1690759702,
                          "choices": [
                            {
                              "text": "This",
                              "index": 0,
                              "logprobs": null,
                              "finish_reason": null
                            }
                          ],
                          "model": "gpt-3.5-turbo-instruct"
                          "system_fingerprint": "fp_44709d6fcb",
                        }
                      title: Streaming
                group: completions
                legacy: true
                name: Create completion
                returns: |
                    Returns a [completion](/docs/api-reference/completions/object) object, or a sequence of completion objects if the request is streamed.
    /rubra/embeddings:
        post:
            operationId: extendedCreateEmbedding
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtendedCreateEmbeddingRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedCreateEmbeddingResponse'
                    description: OK
            summary: Creates an embedding vector representing the input text.
            tags:
                - Embeddings
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/embeddings \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -d '{
                                "input": "The food was delicious and the waiter...",
                                "model": "text-embedding-ada-002",
                                "encoding_format": "float"
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const embedding = await openai.embeddings.create({
                                model: "text-embedding-ada-002",
                                input: "The quick brown fox jumped over the lazy dog",
                                encoding_format: "float",
                              });

                              console.log(embedding);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.embeddings.create(
                              model="text-embedding-ada-002",
                              input="The food was delicious and the waiter...",
                              encoding_format="float"
                            )
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "object": "embedding",
                              "embedding": [
                                0.0023064255,
                                -0.009327292,
                                .... (1536 floats total for ada-002)
                                -0.0028842222,
                              ],
                              "index": 0
                            }
                          ],
                          "model": "text-embedding-ada-002",
                          "usage": {
                            "prompt_tokens": 8,
                            "total_tokens": 8
                          }
                        }
                group: embeddings
                name: Create embeddings
                returns: A list of [embedding](/docs/api-reference/embeddings/object) objects.
    /rubra/files:
        get:
            operationId: extendedListFiles
            parameters:
                - description: Only return files with the given purpose.
                  in: query
                  name: purpose
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedListFilesResponse'
                    description: OK
            summary: Returns a list of files that belong to the user's organization.
            tags:
                - Files
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/files \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const list = await openai.files.list();

                              for await (const file of list) {
                                console.log(file);
                              }
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.files.list()
                    response: |
                        {
                          "data": [
                            {
                              "id": "file-abc123",
                              "object": "file",
                              "bytes": 175,
                              "created_at": 1613677385,
                              "filename": "salesOverview.pdf",
                              "purpose": "assistants",
                            },
                            {
                              "id": "file-abc123",
                              "object": "file",
                              "bytes": 140,
                              "created_at": 1613779121,
                              "filename": "puppy.jsonl",
                              "purpose": "fine-tune",
                            }
                          ],
                          "object": "list"
                        }
                group: files
                name: List files
                returns: A list of [File](/docs/api-reference/files/object) objects.
        post:
            operationId: extendedCreateFile
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            $ref: '#/components/schemas/ExtendedCreateFileRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedOpenAIFile'
                    description: OK
            summary: |
                Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.

                The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.

                Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
            tags:
                - Files
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/files \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -F purpose="fine-tune" \
                              -F file="@mydata.jsonl"
                        node.js: |-
                            import fs from "fs";
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const file = await openai.files.create({
                                file: fs.createReadStream("mydata.jsonl"),
                                purpose: "fine-tune",
                              });

                              console.log(file);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.files.create(
                              file=open("mydata.jsonl", "rb"),
                              purpose="fine-tune"
                            )
                    response: |
                        {
                          "id": "file-abc123",
                          "object": "file",
                          "bytes": 120000,
                          "created_at": 1677610602,
                          "filename": "mydata.jsonl",
                          "purpose": "fine-tune",
                        }
                group: files
                name: Upload file
                returns: The uploaded [File](/docs/api-reference/files/object) object.
    /rubra/files/{file_id}:
        delete:
            operationId: extendedDeleteFile
            parameters:
                - description: The ID of the file to use for this request.
                  in: path
                  name: file_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedDeleteFileResponse'
                    description: OK
            summary: Delete a file.
            tags:
                - Files
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/files/file-abc123 \
                              -X DELETE \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const file = await openai.files.del("file-abc123");

                              console.log(file);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.files.delete("file-abc123")
                    response: |
                        {
                          "id": "file-abc123",
                          "object": "file",
                          "deleted": true
                        }
                group: files
                name: Delete file
                returns: Deletion status.
        get:
            operationId: extendedRetrieveFile
            parameters:
                - description: The ID of the file to use for this request.
                  in: path
                  name: file_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedOpenAIFile'
                    description: OK
            summary: Returns information about a specific file.
            tags:
                - Files
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/files/file-abc123 \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const file = await openai.files.retrieve("file-abc123");

                              console.log(file);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.files.retrieve("file-abc123")
                    response: |
                        {
                          "id": "file-abc123",
                          "object": "file",
                          "bytes": 120000,
                          "created_at": 1677610602,
                          "filename": "mydata.jsonl",
                          "purpose": "fine-tune",
                        }
                group: files
                name: Retrieve file
                returns: The [File](/docs/api-reference/files/object) object matching the specified ID.
    /rubra/files/{file_id}/content:
        get:
            operationId: extendedDownloadFile
            parameters:
                - description: The ID of the file to use for this request.
                  in: path
                  name: file_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
            summary: Returns the contents of the specified file.
            tags:
                - Files
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/files/file-abc123/content \
                              -H "Authorization: Bearer $OPENAI_API_KEY" > file.jsonl
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const file = await openai.files.retrieveContent("file-abc123");

                              console.log(file);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            content = client.files.retrieve_content("file-abc123")
                group: files
                name: Retrieve file content
                returns: The file content.
    /rubra/fine_tuning/jobs:
        get:
            operationId: extendedListPaginatedFineTuningJobs
            parameters:
                - description: Identifier for the last job from the previous pagination request.
                  in: query
                  name: after
                  schema:
                    type: string
                - description: Number of fine-tuning jobs to retrieve.
                  in: query
                  name: limit
                  schema:
                    default: 20
                    type: integer
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedListPaginatedFineTuningJobsResponse'
                    description: OK
            summary: |
                List your organization's fine-tuning jobs
            tags:
                - Fine-tuning
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/fine_tuning/jobs?limit=2 \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const list = await openai.fineTuning.jobs.list();

                              for await (const fineTune of list) {
                                console.log(fineTune);
                              }
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.fine_tuning.jobs.list()
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "object": "fine_tuning.job.event",
                              "id": "ft-event-TjX0lMfOniCZX64t9PUQT5hn",
                              "created_at": 1689813489,
                              "level": "warn",
                              "message": "Fine tuning process stopping due to job cancellation",
                              "data": null,
                              "type": "message"
                            },
                            { ... },
                            { ... }
                          ], "has_more": true
                        }
                group: fine-tuning
                name: List fine-tuning jobs
                returns: A list of paginated [fine-tuning job](/docs/api-reference/fine-tuning/object) objects.
        post:
            operationId: extendedCreateFineTuningJob
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtendedCreateFineTuningJobRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedFineTuningJob'
                    description: OK
            summary: |
                Creates a fine-tuning job which begins the process of creating a new model from a given dataset.

                Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.

                [Learn more about fine-tuning](/docs/guides/fine-tuning)
            tags:
                - Fine-tuning
            x-oaiMeta:
                examples:
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/fine_tuning/jobs \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "training_file": "file-BK7bzQj3FfZFXr7DbL6xJwfo",
                                "model": "gpt-3.5-turbo"
                              }'
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const fineTune = await openai.fineTuning.jobs.create({
                                training_file: "file-abc123"
                              });

                              console.log(fineTune);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.fine_tuning.jobs.create(
                              training_file="file-abc123",
                              model="gpt-3.5-turbo"
                            )
                      response: |
                        {
                          "object": "fine_tuning.job",
                          "id": "ftjob-abc123",
                          "model": "gpt-3.5-turbo-0613",
                          "created_at": 1614807352,
                          "fine_tuned_model": null,
                          "organization_id": "org-123",
                          "result_files": [],
                          "status": "queued",
                          "validation_file": null,
                          "training_file": "file-abc123",
                        }
                      title: Default
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/fine_tuning/jobs \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "training_file": "file-abc123",
                                "model": "gpt-3.5-turbo",
                                "hyperparameters": {
                                  "n_epochs": 2
                                }
                              }'
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const fineTune = await openai.fineTuning.jobs.create({
                                training_file: "file-abc123",
                                model: "gpt-3.5-turbo",
                                hyperparameters: { n_epochs: 2 }
                              });

                              console.log(fineTune);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.fine_tuning.jobs.create(
                              training_file="file-abc123",
                              model="gpt-3.5-turbo",
                              hyperparameters={
                                "n_epochs":2
                              }
                            )
                      response: |
                        {
                          "object": "fine_tuning.job",
                          "id": "ftjob-abc123",
                          "model": "gpt-3.5-turbo-0613",
                          "created_at": 1614807352,
                          "fine_tuned_model": null,
                          "organization_id": "org-123",
                          "result_files": [],
                          "status": "queued",
                          "validation_file": null,
                          "training_file": "file-abc123",
                          "hyperparameters": {"n_epochs": 2},
                        }
                      title: Epochs
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/fine_tuning/jobs \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "training_file": "file-abc123",
                                "validation_file": "file-abc123",
                                "model": "gpt-3.5-turbo"
                              }'
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const fineTune = await openai.fineTuning.jobs.create({
                                training_file: "file-abc123",
                                validation_file: "file-abc123"
                              });

                              console.log(fineTune);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.fine_tuning.jobs.create(
                              training_file="file-abc123",
                              validation_file="file-def456",
                              model="gpt-3.5-turbo"
                            )
                      response: |
                        {
                          "object": "fine_tuning.job",
                          "id": "ftjob-abc123",
                          "model": "gpt-3.5-turbo-0613",
                          "created_at": 1614807352,
                          "fine_tuned_model": null,
                          "organization_id": "org-123",
                          "result_files": [],
                          "status": "queued",
                          "validation_file": "file-abc123",
                          "training_file": "file-abc123",
                        }
                      title: Validation file
                group: fine-tuning
                name: Create fine-tuning job
                returns: A [fine-tuning.job](/docs/api-reference/fine-tuning/object) object.
    /rubra/fine_tuning/jobs/{fine_tuning_job_id}:
        get:
            operationId: extendedRetrieveFineTuningJob
            parameters:
                - description: |
                    The ID of the fine-tuning job.
                  in: path
                  name: fine_tuning_job_id
                  required: true
                  schema:
                    example: ft-AF1WoRqd3aJAHsqc9NY7iL8F
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedFineTuningJob'
                    description: OK
            summary: |
                Get info about a fine-tuning job.

                [Learn more about fine-tuning](/docs/guides/fine-tuning)
            tags:
                - Fine-tuning
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/fine_tuning/jobs/ft-AF1WoRqd3aJAHsqc9NY7iL8F \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const fineTune = await openai.fineTuning.jobs.retrieve("ftjob-abc123");

                              console.log(fineTune);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.fine_tuning.jobs.retrieve("ftjob-abc123")
                    response: |
                        {
                          "object": "fine_tuning.job",
                          "id": "ftjob-abc123",
                          "model": "davinci-002",
                          "created_at": 1692661014,
                          "finished_at": 1692661190,
                          "fine_tuned_model": "ft:davinci-002:my-org:custom_suffix:7q8mpxmy",
                          "organization_id": "org-123",
                          "result_files": [
                              "file-abc123"
                          ],
                          "status": "succeeded",
                          "validation_file": null,
                          "training_file": "file-abc123",
                          "hyperparameters": {
                              "n_epochs": 4,
                          },
                          "trained_tokens": 5768
                        }
                group: fine-tuning
                name: Retrieve fine-tuning job
                returns: The [fine-tuning](/docs/api-reference/fine-tuning/object) object with the given ID.
    /rubra/fine_tuning/jobs/{fine_tuning_job_id}/cancel:
        post:
            operationId: extendedCancelFineTuningJob
            parameters:
                - description: |
                    The ID of the fine-tuning job to cancel.
                  in: path
                  name: fine_tuning_job_id
                  required: true
                  schema:
                    example: ft-AF1WoRqd3aJAHsqc9NY7iL8F
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedFineTuningJob'
                    description: OK
            summary: |
                Immediately cancel a fine-tune job.
            tags:
                - Fine-tuning
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl -X POST https://api.openai.com/v1/fine_tuning/jobs/ftjob-abc123/cancel \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const fineTune = await openai.fineTuning.jobs.cancel("ftjob-abc123");

                              console.log(fineTune);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.fine_tuning.jobs.cancel("ftjob-abc123")
                    response: |
                        {
                          "object": "fine_tuning.job",
                          "id": "ftjob-abc123",
                          "model": "gpt-3.5-turbo-0613",
                          "created_at": 1689376978,
                          "fine_tuned_model": null,
                          "organization_id": "org-123",
                          "result_files": [],
                          "hyperparameters": {
                            "n_epochs":  "auto"
                          },
                          "status": "cancelled",
                          "validation_file": "file-abc123",
                          "training_file": "file-abc123"
                        }
                group: fine-tuning
                name: Cancel fine-tuning
                returns: The cancelled [fine-tuning](/docs/api-reference/fine-tuning/object) object.
    /rubra/fine_tuning/jobs/{fine_tuning_job_id}/events:
        get:
            operationId: extendedListFineTuningEvents
            parameters:
                - description: |
                    The ID of the fine-tuning job to get events for.
                  in: path
                  name: fine_tuning_job_id
                  required: true
                  schema:
                    example: ft-AF1WoRqd3aJAHsqc9NY7iL8F
                    type: string
                - description: Identifier for the last event from the previous pagination request.
                  in: query
                  name: after
                  schema:
                    type: string
                - description: Number of events to retrieve.
                  in: query
                  name: limit
                  schema:
                    default: 20
                    type: integer
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedListFineTuningJobEventsResponse'
                    description: OK
            summary: |
                Get status updates for a fine-tuning job.
            tags:
                - Fine-tuning
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/fine_tuning/jobs/ftjob-abc123/events \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const list = await openai.fineTuning.list_events(id="ftjob-abc123", limit=2);

                              for await (const fineTune of list) {
                                console.log(fineTune);
                              }
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.fine_tuning.jobs.list_events(
                              fine_tuning_job_id="ftjob-abc123",
                              limit=2
                            )
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "object": "fine_tuning.job.event",
                              "id": "ft-event-ddTJfwuMVpfLXseO0Am0Gqjm",
                              "created_at": 1692407401,
                              "level": "info",
                              "message": "Fine tuning job successfully completed",
                              "data": null,
                              "type": "message"
                            },
                            {
                              "object": "fine_tuning.job.event",
                              "id": "ft-event-tyiGuB72evQncpH87xe505Sv",
                              "created_at": 1692407400,
                              "level": "info",
                              "message": "New fine-tuned model created: ft:gpt-3.5-turbo:openai::7p4lURel",
                              "data": null,
                              "type": "message"
                            }
                          ],
                          "has_more": true
                        }
                group: fine-tuning
                name: List fine-tuning events
                returns: A list of fine-tuning event objects.
    /rubra/images/edits:
        post:
            operationId: extendedCreateImageEdit
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            $ref: '#/components/schemas/ExtendedCreateImageEditRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedImagesResponse'
                    description: OK
            summary: Creates an edited or extended image given an original image and a prompt.
            tags:
                - Images
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/images/edits \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -F image="@otter.png" \
                              -F mask="@mask.png" \
                              -F prompt="A cute baby sea otter wearing a beret" \
                              -F n=2 \
                              -F size="1024x1024"
                        node.js: |-
                            import fs from "fs";
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const image = await openai.images.edit({
                                image: fs.createReadStream("otter.png"),
                                mask: fs.createReadStream("mask.png"),
                                prompt: "A cute baby sea otter wearing a beret",
                              });

                              console.log(image.data);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.images.edit(
                              image=open("otter.png", "rb"),
                              mask=open("mask.png", "rb"),
                              prompt="A cute baby sea otter wearing a beret",
                              n=2,
                              size="1024x1024"
                            )
                    response: |
                        {
                          "created": 1589478378,
                          "data": [
                            {
                              "url": "https://..."
                            },
                            {
                              "url": "https://..."
                            }
                          ]
                        }
                group: images
                name: Create image edit
                returns: Returns a list of [image](/docs/api-reference/images/object) objects.
    /rubra/images/generations:
        post:
            operationId: extendedCreateImage
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtendedCreateImageRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedImagesResponse'
                    description: OK
            summary: Creates an image given a prompt.
            tags:
                - Images
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/images/generations \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "model": "dall-e-3",
                                "prompt": "A cute baby sea otter",
                                "n": 1,
                                "size": "1024x1024"
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const image = await openai.images.generate({ model: "dall-e-3", prompt: "A cute baby sea otter" });

                              console.log(image.data);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.images.generate(
                              model="dall-e-3",
                              prompt="A cute baby sea otter",
                              n=1,
                              size="1024x1024"
                            )
                    response: |
                        {
                          "created": 1589478378,
                          "data": [
                            {
                              "url": "https://..."
                            },
                            {
                              "url": "https://..."
                            }
                          ]
                        }
                group: images
                name: Create image
                returns: Returns a list of [image](/docs/api-reference/images/object) objects.
    /rubra/images/variations:
        post:
            operationId: extendedCreateImageVariation
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            $ref: '#/components/schemas/ExtendedCreateImageVariationRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedImagesResponse'
                    description: OK
            summary: Creates a variation of a given image.
            tags:
                - Images
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/images/variations \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -F image="@otter.png" \
                              -F n=2 \
                              -F size="1024x1024"
                        node.js: |-
                            import fs from "fs";
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const image = await openai.images.createVariation({
                                image: fs.createReadStream("otter.png"),
                              });

                              console.log(image.data);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            response = client.images.create_variation(
                              image=open("image_edit_original.png", "rb"),
                              n=2,
                              size="1024x1024"
                            )
                    response: |
                        {
                          "created": 1589478378,
                          "data": [
                            {
                              "url": "https://..."
                            },
                            {
                              "url": "https://..."
                            }
                          ]
                        }
                group: images
                name: Create image variation
                returns: Returns a list of [image](/docs/api-reference/images/object) objects.
    /rubra/models:
        get:
            operationId: extendedListModels
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedListModelsResponse'
                    description: OK
            summary: Lists the currently available models, and provides basic information about each one such as the owner and availability.
            tags:
                - Models
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/models \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const list = await openai.models.list();

                              for await (const model of list) {
                                console.log(model);
                              }
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.models.list()
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "id": "model-id-0",
                              "object": "model",
                              "created": 1686935002,
                              "owned_by": "organization-owner"
                            },
                            {
                              "id": "model-id-1",
                              "object": "model",
                              "created": 1686935002,
                              "owned_by": "organization-owner",
                            },
                            {
                              "id": "model-id-2",
                              "object": "model",
                              "created": 1686935002,
                              "owned_by": "openai"
                            },
                          ],
                          "object": "list"
                        }
                group: models
                name: List models
                returns: A list of [model](/docs/api-reference/models/object) objects.
    /rubra/models/{model}:
        delete:
            operationId: extendedDeleteModel
            parameters:
                - description: The model to delete
                  in: path
                  name: model
                  required: true
                  schema:
                    example: ft:gpt-3.5-turbo:acemeco:suffix:abc123
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedDeleteModelResponse'
                    description: OK
            summary: Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
            tags:
                - Models
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/models/ft:gpt-3.5-turbo:acemeco:suffix:abc123 \
                              -X DELETE \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const model = await openai.models.del("ft:gpt-3.5-turbo:acemeco:suffix:abc123");

                              console.log(model);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.models.delete("ft:gpt-3.5-turbo:acemeco:suffix:abc123")
                    response: |
                        {
                          "id": "ft:gpt-3.5-turbo:acemeco:suffix:abc123",
                          "object": "model",
                          "deleted": true
                        }
                group: models
                name: Delete a fine-tuned model
                returns: Deletion status.
        get:
            operationId: extendedRetrieveModel
            parameters:
                - description: The ID of the model to use for this request
                  in: path
                  name: model
                  required: true
                  schema:
                    example: gpt-3.5-turbo
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedModel'
                    description: OK
            summary: Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
            tags:
                - Models
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/models/VAR_model_id \
                              -H "Authorization: Bearer $OPENAI_API_KEY"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const model = await openai.models.retrieve("gpt-3.5-turbo");

                              console.log(model);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.models.retrieve("VAR_model_id")
                    response: |
                        {
                          "id": "VAR_model_id",
                          "object": "model",
                          "created": 1686935002,
                          "owned_by": "openai"
                        }
                group: models
                name: Retrieve model
                returns: The [model](/docs/api-reference/models/object) object matching the specified ID.
    /rubra/moderations:
        post:
            operationId: extendedCreateModeration
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtendedCreateModerationRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedCreateModerationResponse'
                    description: OK
            summary: Classifies if text violates OpenAI's Content Policy
            tags:
                - Moderations
            x-oaiMeta:
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/moderations \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -d '{
                                "input": "I want to kill them."
                              }'
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const moderation = await openai.moderations.create({ input: "I want to kill them." });

                              console.log(moderation);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            client.moderations.create(input="I want to kill them.")
                    response: |
                        {
                          "id": "modr-XXXXX",
                          "model": "text-moderation-005",
                          "results": [
                            {
                              "flagged": true,
                              "categories": {
                                "sexual": false,
                                "hate": false,
                                "harassment": false,
                                "self-harm": false,
                                "sexual/minors": false,
                                "hate/threatening": false,
                                "violence/graphic": false,
                                "self-harm/intent": false,
                                "self-harm/instructions": false,
                                "harassment/threatening": true,
                                "violence": true,
                              },
                              "category_scores": {
                                "sexual": 1.2282071e-06,
                                "hate": 0.010696256,
                                "harassment": 0.29842457,
                                "self-harm": 1.5236925e-08,
                                "sexual/minors": 5.7246268e-08,
                                "hate/threatening": 0.0060676364,
                                "violence/graphic": 4.435014e-06,
                                "self-harm/intent": 8.098441e-10,
                                "self-harm/instructions": 2.8498655e-11,
                                "harassment/threatening": 0.63055265,
                                "violence": 0.99011886,
                              }
                            }
                          ]
                        }
                group: moderations
                name: Create moderation
                returns: A [moderation](/docs/api-reference/moderations/object) object.
    /rubra/threads:
        post:
            operationId: extendedCreateThread
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtendedCreateThreadRequest'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedThreadObject'
                    description: OK
            summary: Create a thread.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/threads \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d ''
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const emptyThread = await openai.beta.threads.create();

                              console.log(emptyThread);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            empty_thread = client.beta.threads.create()
                            print(empty_thread)
                      response: |
                        {
                          "id": "thread_abc123",
                          "object": "thread",
                          "created_at": 1699012949,
                          "metadata": {}
                        }
                      title: Empty
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/threads \
                            -H "Content-Type: application/json" \
                            -H "Authorization: Bearer $OPENAI_API_KEY" \
                            -H "OpenAI-Beta: assistants=v1" \
                            -d '{
                                "messages": [{
                                  "role": "user",
                                  "content": "Hello, what is AI?",
                                  "file_ids": ["file-abc123"]
                                }, {
                                  "role": "user",
                                  "content": "How does AI work? Explain it in simple terms."
                                }]
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const messageThread = await openai.beta.threads.create({
                                messages: [
                                  {
                                    role: "user",
                                    content: "Hello, what is AI?",
                                    file_ids: ["file-abc123"],
                                  },
                                  {
                                    role: "user",
                                    content: "How does AI work? Explain it in simple terms.",
                                  },
                                ],
                              });

                              console.log(messageThread);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            message_thread = client.beta.threads.create(
                              messages=[
                                {
                                  "role": "user",
                                  "content": "Hello, what is AI?",
                                  "file_ids": ["file-abc123"],
                                },
                                {
                                  "role": "user",
                                  "content": "How does AI work? Explain it in simple terms."
                                },
                              ]
                            )

                            print(message_thread)
                      response: |
                        {
                          id: 'thread_abc123',
                          object: 'thread',
                          created_at: 1699014083,
                          metadata: {}
                        }
                      title: Messages
                group: threads
                name: Create thread
                returns: A [thread](/docs/api-reference/threads) object.
    /rubra/threads/{thread_id}:
        delete:
            operationId: extendedDeleteThread
            parameters:
                - description: The ID of the thread to delete.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedDeleteThreadResponse'
                    description: OK
            summary: Delete a thread.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123 \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -X DELETE
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const response = await openai.beta.threads.del("thread_abc123");

                              console.log(response);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            response = client.beta.threads.delete("thread_abc123")
                            print(response)
                    response: |
                        {
                          "id": "thread_abc123",
                          "object": "thread.deleted",
                          "deleted": true
                        }
                group: threads
                name: Delete thread
                returns: Deletion status
        get:
            operationId: extendedGetThread
            parameters:
                - description: The ID of the thread to retrieve.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedThreadObject'
                    description: OK
            summary: Retrieves a thread.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123 \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const myThread = await openai.beta.threads.retrieve(
                                "thread_abc123"
                              );

                              console.log(myThread);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            my_thread = client.beta.threads.retrieve("thread_abc123")
                            print(my_thread)
                    response: |
                        {
                          "id": "thread_abc123",
                          "object": "thread",
                          "created_at": 1699014083,
                          "metadata": {}
                        }
                group: threads
                name: Retrieve thread
                returns: The [thread](/docs/api-reference/threads/object) object matching the specified ID.
        post:
            operationId: extendedModifyThread
            parameters:
                - description: The ID of the thread to modify. Only the `metadata` can be modified.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtendedModifyThreadRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedThreadObject'
                    description: OK
            summary: Modifies a thread.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123 \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                  "metadata": {
                                    "modified": "true",
                                    "user": "abc123"
                                  }
                                }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const updatedThread = await openai.beta.threads.update(
                                "thread_abc123",
                                {
                                  metadata: { modified: "true", user: "abc123" },
                                }
                              );

                              console.log(updatedThread);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            my_updated_thread = client.beta.threads.update(
                              "thread_abc123",
                              metadata={
                                "modified": "true",
                                "user": "abc123"
                              }
                            )
                            print(my_updated_thread)
                    response: |
                        {
                          "id": "thread_abc123",
                          "object": "thread",
                          "created_at": 1699014083,
                          "metadata": {
                            "modified": "true",
                            "user": "abc123"
                          }
                        }
                group: threads
                name: Modify thread
                returns: The modified [thread](/docs/api-reference/threads/object) object matching the specified ID.
    /rubra/threads/{thread_id}/messages:
        get:
            operationId: extendedListMessages
            parameters:
                - description: The ID of the [thread](/docs/api-reference/threads) the messages belong to.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: |
                    A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                  in: query
                  name: limit
                  schema:
                    default: 20
                    type: integer
                - description: |
                    Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                  in: query
                  name: order
                  schema:
                    default: desc
                    enum:
                        - asc
                        - desc
                    type: string
                - description: |
                    A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                  in: query
                  name: after
                  schema:
                    type: string
                - description: |
                    A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                  in: query
                  name: before
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedListMessagesResponse'
                    description: OK
            summary: Returns a list of messages for a given thread.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/messages \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const threadMessages = await openai.beta.threads.messages.list(
                                "thread_abc123"
                              );

                              console.log(threadMessages.data);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            thread_messages = client.beta.threads.messages.list("thread_abc123")
                            print(thread_messages.data)
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "id": "msg_abc123",
                              "object": "thread.message",
                              "created_at": 1699016383,
                              "thread_id": "thread_abc123",
                              "role": "user",
                              "content": [
                                {
                                  "type": "text",
                                  "text": {
                                    "value": "How does AI work? Explain it in simple terms.",
                                    "annotations": []
                                  }
                                }
                              ],
                              "file_ids": [],
                              "assistant_id": null,
                              "run_id": null,
                              "metadata": {}
                            },
                            {
                              "id": "msg_abc456",
                              "object": "thread.message",
                              "created_at": 1699016383,
                              "thread_id": "thread_abc123",
                              "role": "user",
                              "content": [
                                {
                                  "type": "text",
                                  "text": {
                                    "value": "Hello, what is AI?",
                                    "annotations": []
                                  }
                                }
                              ],
                              "file_ids": [
                                "file-abc123"
                              ],
                              "assistant_id": null,
                              "run_id": null,
                              "metadata": {}
                            }
                          ],
                          "first_id": "msg_abc123",
                          "last_id": "msg_abc456",
                          "has_more": false
                        }
                group: threads
                name: List messages
                returns: A list of [message](/docs/api-reference/messages) objects.
        post:
            operationId: extendedCreateMessage
            parameters:
                - description: The ID of the [thread](/docs/api-reference/threads) to create a message for.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtendedCreateMessageRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedMessageObject'
                    description: OK
            summary: Create a message.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/messages \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                  "role": "user",
                                  "content": "How does AI work? Explain it in simple terms."
                                }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const threadMessages = await openai.beta.threads.messages.create(
                                "thread_abc123",
                                { role: "user", content: "How does AI work? Explain it in simple terms." }
                              );

                              console.log(threadMessages);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            thread_message = client.beta.threads.messages.create(
                              "thread_abc123",
                              role="user",
                              content="How does AI work? Explain it in simple terms.",
                            )
                            print(thread_message)
                    response: |
                        {
                          "id": "msg_abc123",
                          "object": "thread.message",
                          "created_at": 1699017614,
                          "thread_id": "thread_abc123",
                          "role": "user",
                          "content": [
                            {
                              "type": "text",
                              "text": {
                                "value": "How does AI work? Explain it in simple terms.",
                                "annotations": []
                              }
                            }
                          ],
                          "file_ids": [],
                          "assistant_id": null,
                          "run_id": null,
                          "metadata": {}
                        }
                group: threads
                name: Create message
                returns: A [message](/docs/api-reference/messages/object) object.
    /rubra/threads/{thread_id}/messages/{message_id}:
        get:
            operationId: extendedGetMessage
            parameters:
                - description: The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the message to retrieve.
                  in: path
                  name: message_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedMessageObject'
                    description: OK
            summary: Retrieve a message.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/messages/msg_abc123 \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const message = await openai.beta.threads.messages.retrieve(
                                "thread_abc123",
                                "msg_abc123"
                              );

                              console.log(message);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            message = client.beta.threads.messages.retrieve(
                              message_id="msg_abc123",
                              thread_id="thread_abc123",
                            )
                            print(message)
                    response: |
                        {
                          "id": "msg_abc123",
                          "object": "thread.message",
                          "created_at": 1699017614,
                          "thread_id": "thread_abc123",
                          "role": "user",
                          "content": [
                            {
                              "type": "text",
                              "text": {
                                "value": "How does AI work? Explain it in simple terms.",
                                "annotations": []
                              }
                            }
                          ],
                          "file_ids": [],
                          "assistant_id": null,
                          "run_id": null,
                          "metadata": {}
                        }
                group: threads
                name: Retrieve message
                returns: The [message](/docs/api-reference/threads/messages/object) object matching the specified ID.
        post:
            operationId: extendedModifyMessage
            parameters:
                - description: The ID of the thread to which this message belongs.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the message to modify.
                  in: path
                  name: message_id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtendedModifyMessageRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedMessageObject'
                    description: OK
            summary: Modifies a message.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/messages/msg_abc123 \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                  "metadata": {
                                    "modified": "true",
                                    "user": "abc123"
                                  }
                                }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const message = await openai.beta.threads.messages.update(
                                "thread_abc123",
                                "msg_abc123",
                                {
                                  metadata: {
                                    modified: "true",
                                    user: "abc123",
                                  },
                                }
                              }'
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            message = client.beta.threads.messages.update(
                              message_id="msg_abc12",
                              thread_id="thread_abc123",
                              metadata={
                                "modified": "true",
                                "user": "abc123",
                              },
                            )
                            print(message)
                    response: |
                        {
                          "id": "msg_abc123",
                          "object": "thread.message",
                          "created_at": 1699017614,
                          "thread_id": "thread_abc123",
                          "role": "user",
                          "content": [
                            {
                              "type": "text",
                              "text": {
                                "value": "How does AI work? Explain it in simple terms.",
                                "annotations": []
                              }
                            }
                          ],
                          "file_ids": [],
                          "assistant_id": null,
                          "run_id": null,
                          "metadata": {
                            "modified": "true",
                            "user": "abc123"
                          }
                        }
                group: threads
                name: Modify message
                returns: The modified [message](/docs/api-reference/threads/messages/object) object.
    /rubra/threads/{thread_id}/messages/{message_id}/files:
        get:
            operationId: extendedListMessageFiles
            parameters:
                - description: The ID of the thread that the message and files belong to.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the message that the files belongs to.
                  in: path
                  name: message_id
                  required: true
                  schema:
                    type: string
                - description: |
                    A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                  in: query
                  name: limit
                  schema:
                    default: 20
                    type: integer
                - description: |
                    Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                  in: query
                  name: order
                  schema:
                    default: desc
                    enum:
                        - asc
                        - desc
                    type: string
                - description: |
                    A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                  in: query
                  name: after
                  schema:
                    type: string
                - description: |
                    A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                  in: query
                  name: before
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedListMessageFilesResponse'
                    description: OK
            summary: Returns a list of message files.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/messages/msg_abc123/files \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |
                            import OpenAI from "openai";
                            const openai = new OpenAI();

                            async function main() {
                              const messageFiles = await openai.beta.threads.messages.files.list(
                                "thread_abc123",
                                "msg_abc123"
                              );
                              console.log(messageFiles);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            message_files = client.beta.threads.messages.files.list(
                              thread_id="thread_abc123",
                              message_id="msg_abc123"
                            )
                            print(message_files)
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "id": "file-abc123",
                              "object": "thread.message.file",
                              "created_at": 1699061776,
                              "message_id": "msg_abc123"
                            },
                            {
                              "id": "file-abc123",
                              "object": "thread.message.file",
                              "created_at": 1699061776,
                              "message_id": "msg_abc123"
                            }
                          ],
                          "first_id": "file-abc123",
                          "last_id": "file-abc123",
                          "has_more": false
                        }
                group: threads
                name: List message files
                returns: A list of [message file](/docs/api-reference/messages/file-object) objects.
    /rubra/threads/{thread_id}/messages/{message_id}/files/{file_id}:
        get:
            operationId: extendedGetMessageFile
            parameters:
                - description: The ID of the thread to which the message and File belong.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    example: thread_abc123
                    type: string
                - description: The ID of the message the file belongs to.
                  in: path
                  name: message_id
                  required: true
                  schema:
                    example: msg_abc123
                    type: string
                - description: The ID of the file being retrieved.
                  in: path
                  name: file_id
                  required: true
                  schema:
                    example: file-abc123
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedMessageFileObject'
                    description: OK
            summary: Retrieves a message file.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/messages/msg_abc123/files/file-abc123 \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |
                            import OpenAI from "openai";
                            const openai = new OpenAI();

                            async function main() {
                              const messageFile = await openai.beta.threads.messages.files.retrieve(
                                "thread_abc123",
                                "msg_abc123",
                                "file-abc123"
                              );
                              console.log(messageFile);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            message_files = client.beta.threads.messages.files.retrieve(
                                thread_id="thread_abc123",
                                message_id="msg_abc123",
                                file_id="file-abc123"
                            )
                            print(message_files)
                    response: |
                        {
                          "id": "file-abc123",
                          "object": "thread.message.file",
                          "created_at": 1699061776,
                          "message_id": "msg_abc123"
                        }
                group: threads
                name: Retrieve message file
                returns: The [message file](/docs/api-reference/messages/file-object) object.
    /rubra/threads/{thread_id}/runs:
        get:
            operationId: extendedListRuns
            parameters:
                - description: The ID of the thread the run belongs to.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: |
                    A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                  in: query
                  name: limit
                  schema:
                    default: 20
                    type: integer
                - description: |
                    Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                  in: query
                  name: order
                  schema:
                    default: desc
                    enum:
                        - asc
                        - desc
                    type: string
                - description: |
                    A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                  in: query
                  name: after
                  schema:
                    type: string
                - description: |
                    A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                  in: query
                  name: before
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedListRunsResponse'
                    description: OK
            summary: Returns a list of runs belonging to a thread.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/runs \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const runs = await openai.beta.threads.runs.list(
                                "thread_abc123"
                              );

                              console.log(runs);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            runs = client.beta.threads.runs.list(
                              "thread_abc123"
                            )
                            print(runs)
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "id": "run_abc123",
                              "object": "thread.run",
                              "created_at": 1699075072,
                              "assistant_id": "asst_abc123",
                              "thread_id": "thread_abc123",
                              "status": "completed",
                              "started_at": 1699075072,
                              "expires_at": null,
                              "cancelled_at": null,
                              "failed_at": null,
                              "completed_at": 1699075073,
                              "last_error": null,
                              "model": "gpt-3.5-turbo",
                              "instructions": null,
                              "tools": [
                                {
                                  "type": "code_interpreter"
                                }
                              ],
                              "file_ids": [
                                "file-abc123",
                                "file-abc456"
                              ],
                              "metadata": {},
                              "usage": {
                                "prompt_tokens": 123,
                                "completion_tokens": 456,
                                "total_tokens": 579
                              }
                            },
                            {
                              "id": "run_abc456",
                              "object": "thread.run",
                              "created_at": 1699063290,
                              "assistant_id": "asst_abc123",
                              "thread_id": "thread_abc123",
                              "status": "completed",
                              "started_at": 1699063290,
                              "expires_at": null,
                              "cancelled_at": null,
                              "failed_at": null,
                              "completed_at": 1699063291,
                              "last_error": null,
                              "model": "gpt-3.5-turbo",
                              "instructions": null,
                              "tools": [
                                {
                                  "type": "code_interpreter"
                                }
                              ],
                              "file_ids": [
                                "file-abc123",
                                "file-abc456"
                              ],
                              "metadata": {},
                              "usage": {
                                "prompt_tokens": 123,
                                "completion_tokens": 456,
                                "total_tokens": 579
                              }
                            }
                          ],
                          "first_id": "run_abc123",
                          "last_id": "run_abc456",
                          "has_more": false
                        }
                group: threads
                name: List runs
                returns: A list of [run](/docs/api-reference/runs/object) objects.
        post:
            operationId: extendedCreateRun
            parameters:
                - description: The ID of the thread to run.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtendedCreateRunRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedRunObject'
                    description: OK
            summary: Create a run.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/runs \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                "assistant_id": "asst_abc123"
                              }'
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const run = await openai.beta.threads.runs.create(
                                "thread_abc123",
                                { assistant_id: "asst_abc123" }
                              );

                              console.log(run);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            run = client.beta.threads.runs.create(
                              thread_id="thread_abc123",
                              assistant_id="asst_abc123"
                            )
                            print(run)
                    response: |
                        {
                          "id": "run_abc123",
                          "object": "thread.run",
                          "created_at": 1699063290,
                          "assistant_id": "asst_abc123",
                          "thread_id": "thread_abc123",
                          "status": "queued",
                          "started_at": 1699063290,
                          "expires_at": null,
                          "cancelled_at": null,
                          "failed_at": null,
                          "completed_at": 1699063291,
                          "last_error": null,
                          "model": "gpt-4",
                          "instructions": null,
                          "tools": [
                            {
                              "type": "code_interpreter"
                            }
                          ],
                          "file_ids": [
                            "file-abc123",
                            "file-abc456"
                          ],
                          "metadata": {},
                          "usage": null
                        }
                group: threads
                name: Create run
                returns: A [run](/docs/api-reference/runs/object) object.
    /rubra/threads/{thread_id}/runs/{run_id}:
        get:
            operationId: extendedGetRun
            parameters:
                - description: The ID of the [thread](/docs/api-reference/threads) that was run.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the run to retrieve.
                  in: path
                  name: run_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedRunObject'
                    description: OK
            summary: Retrieves a run.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123 \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const run = await openai.beta.threads.runs.retrieve(
                                "thread_abc123",
                                "run_abc123"
                              );

                              console.log(run);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            run = client.beta.threads.runs.retrieve(
                              thread_id="thread_abc123",
                              run_id="run_abc123"
                            )
                            print(run)
                    response: |
                        {
                          "id": "run_abc123",
                          "object": "thread.run",
                          "created_at": 1699075072,
                          "assistant_id": "asst_abc123",
                          "thread_id": "thread_abc123",
                          "status": "completed",
                          "started_at": 1699075072,
                          "expires_at": null,
                          "cancelled_at": null,
                          "failed_at": null,
                          "completed_at": 1699075073,
                          "last_error": null,
                          "model": "gpt-3.5-turbo",
                          "instructions": null,
                          "tools": [
                            {
                              "type": "code_interpreter"
                            }
                          ],
                          "file_ids": [
                            "file-abc123",
                            "file-abc456"
                          ],
                          "metadata": {},
                          "usage": {
                            "prompt_tokens": 123,
                            "completion_tokens": 456,
                            "total_tokens": 579
                          }
                        }
                group: threads
                name: Retrieve run
                returns: The [run](/docs/api-reference/runs/object) object matching the specified ID.
        post:
            operationId: extendedModifyRun
            parameters:
                - description: The ID of the [thread](/docs/api-reference/threads) that was run.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the run to modify.
                  in: path
                  name: run_id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtendedModifyRunRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedRunObject'
                    description: OK
            summary: Modifies a run.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123 \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                "metadata": {
                                  "user_id": "user_abc123"
                                }
                              }'
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const run = await openai.beta.threads.runs.update(
                                "thread_abc123",
                                "run_abc123",
                                {
                                  metadata: {
                                    user_id: "user_abc123",
                                  },
                                }
                              );

                              console.log(run);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            run = client.beta.threads.runs.update(
                              thread_id="thread_abc123",
                              run_id="run_abc123",
                              metadata={"user_id": "user_abc123"},
                            )
                            print(run)
                    response: |
                        {
                          "id": "run_abc123",
                          "object": "thread.run",
                          "created_at": 1699075072,
                          "assistant_id": "asst_abc123",
                          "thread_id": "thread_abc123",
                          "status": "completed",
                          "started_at": 1699075072,
                          "expires_at": null,
                          "cancelled_at": null,
                          "failed_at": null,
                          "completed_at": 1699075073,
                          "last_error": null,
                          "model": "gpt-3.5-turbo",
                          "instructions": null,
                          "tools": [
                            {
                              "type": "code_interpreter"
                            }
                          ],
                          "file_ids": [
                            "file-abc123",
                            "file-abc456"
                          ],
                          "metadata": {
                            "user_id": "user_abc123"
                          },
                          "usage": {
                            "prompt_tokens": 123,
                            "completion_tokens": 456,
                            "total_tokens": 579
                          }
                        }
                group: threads
                name: Modify run
                returns: The modified [run](/docs/api-reference/runs/object) object matching the specified ID.
    /rubra/threads/{thread_id}/runs/{run_id}/cancel:
        post:
            operationId: extendedCancelRun
            parameters:
                - description: The ID of the thread to which this run belongs.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the run to cancel.
                  in: path
                  name: run_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedRunObject'
                    description: OK
            summary: Cancels a run that is `in_progress`.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123/cancel \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -X POST
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const run = await openai.beta.threads.runs.cancel(
                                "thread_abc123",
                                "run_abc123"
                              );

                              console.log(run);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            run = client.beta.threads.runs.cancel(
                              thread_id="thread_abc123",
                              run_id="run_abc123"
                            )
                            print(run)
                    response: |
                        {
                          "id": "run_abc123",
                          "object": "thread.run",
                          "created_at": 1699076126,
                          "assistant_id": "asst_abc123",
                          "thread_id": "thread_abc123",
                          "status": "cancelling",
                          "started_at": 1699076126,
                          "expires_at": 1699076726,
                          "cancelled_at": null,
                          "failed_at": null,
                          "completed_at": null,
                          "last_error": null,
                          "model": "gpt-4",
                          "instructions": "You summarize books.",
                          "tools": [
                            {
                              "type": "retrieval"
                            }
                          ],
                          "file_ids": [],
                          "metadata": {},
                          "usage": null
                        }
                group: threads
                name: Cancel a run
                returns: The modified [run](/docs/api-reference/runs/object) object matching the specified ID.
    /rubra/threads/{thread_id}/runs/{run_id}/steps:
        get:
            operationId: extendedListRunSteps
            parameters:
                - description: The ID of the thread the run and run steps belong to.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the run the run steps belong to.
                  in: path
                  name: run_id
                  required: true
                  schema:
                    type: string
                - description: |
                    A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                  in: query
                  name: limit
                  schema:
                    default: 20
                    type: integer
                - description: |
                    Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                  in: query
                  name: order
                  schema:
                    default: desc
                    enum:
                        - asc
                        - desc
                    type: string
                - description: |
                    A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                  in: query
                  name: after
                  schema:
                    type: string
                - description: |
                    A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                  in: query
                  name: before
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedListRunStepsResponse'
                    description: OK
            summary: Returns a list of run steps belonging to a run.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123/steps \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |
                            import OpenAI from "openai";
                            const openai = new OpenAI();

                            async function main() {
                              const runStep = await openai.beta.threads.runs.steps.list(
                                "thread_abc123",
                                "run_abc123"
                              );
                              console.log(runStep);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            run_steps = client.beta.threads.runs.steps.list(
                                thread_id="thread_abc123",
                                run_id="run_abc123"
                            )
                            print(run_steps)
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "id": "step_abc123",
                              "object": "thread.run.step",
                              "created_at": 1699063291,
                              "run_id": "run_abc123",
                              "assistant_id": "asst_abc123",
                              "thread_id": "thread_abc123",
                              "type": "message_creation",
                              "status": "completed",
                              "cancelled_at": null,
                              "completed_at": 1699063291,
                              "expired_at": null,
                              "failed_at": null,
                              "last_error": null,
                              "step_details": {
                                "type": "message_creation",
                                "message_creation": {
                                  "message_id": "msg_abc123"
                                }
                              },
                              "usage": {
                                "prompt_tokens": 123,
                                "completion_tokens": 456,
                                "total_tokens": 579
                              }
                            }
                          ],
                          "first_id": "step_abc123",
                          "last_id": "step_abc456",
                          "has_more": false
                        }
                group: threads
                name: List run steps
                returns: A list of [run step](/docs/api-reference/runs/step-object) objects.
    /rubra/threads/{thread_id}/runs/{run_id}/steps/{step_id}:
        get:
            operationId: extendedGetRunStep
            parameters:
                - description: The ID of the thread to which the run and run step belongs.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the run to which the run step belongs.
                  in: path
                  name: run_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the run step to retrieve.
                  in: path
                  name: step_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedRunStepObject'
                    description: OK
            summary: Retrieves a run step.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123/steps/step_abc123 \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |
                            import OpenAI from "openai";
                            const openai = new OpenAI();

                            async function main() {
                              const runStep = await openai.beta.threads.runs.steps.retrieve(
                                "thread_abc123",
                                "run_abc123",
                                "step_abc123"
                              );
                              console.log(runStep);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            run_step = client.beta.threads.runs.steps.retrieve(
                                thread_id="thread_abc123",
                                run_id="run_abc123",
                                step_id="step_abc123"
                            )
                            print(run_step)
                    response: |
                        {
                          "id": "step_abc123",
                          "object": "thread.run.step",
                          "created_at": 1699063291,
                          "run_id": "run_abc123",
                          "assistant_id": "asst_abc123",
                          "thread_id": "thread_abc123",
                          "type": "message_creation",
                          "status": "completed",
                          "cancelled_at": null,
                          "completed_at": 1699063291,
                          "expired_at": null,
                          "failed_at": null,
                          "last_error": null,
                          "step_details": {
                            "type": "message_creation",
                            "message_creation": {
                              "message_id": "msg_abc123"
                            }
                          },
                          "usage": {
                            "prompt_tokens": 123,
                            "completion_tokens": 456,
                            "total_tokens": 579
                          }
                        }
                group: threads
                name: Retrieve run step
                returns: The [run step](/docs/api-reference/runs/step-object) object matching the specified ID.
    /rubra/threads/{thread_id}/runs/{run_id}/submit_tool_outputs:
        post:
            operationId: extendedSubmitToolOuputsToRun
            parameters:
                - description: The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the run that requires the tool output submission.
                  in: path
                  name: run_id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtendedSubmitToolOutputsRunRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedRunObject'
                    description: OK
            summary: |
                When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123/submit_tool_outputs \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                "tool_outputs": [
                                  {
                                    "tool_call_id": "call_abc123",
                                    "output": "28C"
                                  }
                                ]
                              }'
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const run = await openai.beta.threads.runs.submitToolOutputs(
                                "thread_abc123",
                                "run_abc123",
                                {
                                  tool_outputs: [
                                    {
                                      tool_call_id: "call_abc123",
                                      output: "28C",
                                    },
                                  ],
                                }
                              );

                              console.log(run);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            run = client.beta.threads.runs.submit_tool_outputs(
                              thread_id="thread_abc123",
                              run_id="run_abc123",
                              tool_outputs=[
                                {
                                  "tool_call_id": "call_abc123",
                                  "output": "28C"
                                }
                              ]
                            )
                            print(run)
                    response: |
                        {
                          "id": "run_abc123",
                          "object": "thread.run",
                          "created_at": 1699075592,
                          "assistant_id": "asst_abc123",
                          "thread_id": "thread_abc123",
                          "status": "queued",
                          "started_at": 1699075592,
                          "expires_at": 1699076192,
                          "cancelled_at": null,
                          "failed_at": null,
                          "completed_at": null,
                          "last_error": null,
                          "model": "gpt-4",
                          "instructions": "You tell the weather.",
                          "tools": [
                            {
                              "type": "function",
                              "function": {
                                "name": "get_weather",
                                "description": "Determine weather in my location",
                                "parameters": {
                                  "type": "object",
                                  "properties": {
                                    "location": {
                                      "type": "string",
                                      "description": "The city and state e.g. San Francisco, CA"
                                    },
                                    "unit": {
                                      "type": "string",
                                      "enum": [
                                        "c",
                                        "f"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ]
                                }
                              }
                            }
                          ],
                          "file_ids": [],
                          "metadata": {},
                          "usage": null
                        }
                group: threads
                name: Submit tool outputs to run
                returns: The modified [run](/docs/api-reference/runs/object) object matching the specified ID.
    /rubra/threads/runs:
        post:
            operationId: extendedCreateThreadAndRun
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtendedCreateThreadAndRunRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtendedRunObject'
                    description: OK
            summary: Create a thread and run it in one request.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/runs \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                  "assistant_id": "asst_abc123",
                                  "thread": {
                                    "messages": [
                                      {"role": "user", "content": "Explain deep learning to a 5 year old."}
                                    ]
                                  }
                                }'
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const run = await openai.beta.threads.createAndRun({
                                assistant_id: "asst_abc123",
                                thread: {
                                  messages: [
                                    { role: "user", content: "Explain deep learning to a 5 year old." },
                                  ],
                                },
                              });

                              console.log(run);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            run = client.beta.threads.create_and_run(
                              assistant_id="asst_abc123",
                              thread={
                                "messages": [
                                  {"role": "user", "content": "Explain deep learning to a 5 year old."}
                                ]
                              }
                            )
                    response: |
                        {
                          "id": "run_abc123",
                          "object": "thread.run",
                          "created_at": 1699076792,
                          "assistant_id": "asst_abc123",
                          "thread_id": "thread_abc123",
                          "status": "queued",
                          "started_at": null,
                          "expires_at": 1699077392,
                          "cancelled_at": null,
                          "failed_at": null,
                          "completed_at": null,
                          "last_error": null,
                          "model": "gpt-4",
                          "instructions": "You are a helpful assistant.",
                          "tools": [],
                          "file_ids": [],
                          "metadata": {},
                          "usage": null
                        }
                group: threads
                name: Create thread and run
                returns: A [run](/docs/api-reference/runs/object) object.
    /rubra/x/threads:
        get:
            operationId: listThreads
            parameters:
                - description: |
                    A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                  in: query
                  name: limit
                  schema:
                    default: 20
                    type: integer
                - description: |
                    Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                  in: query
                  name: order
                  schema:
                    default: desc
                    enum:
                        - asc
                        - desc
                    type: string
                - description: |
                    A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                  in: query
                  name: after
                  schema:
                    type: string
                - description: |
                    A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                  in: query
                  name: before
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/XListThreadsResponse'
                    description: OK
            summary: List threads
    /rubra/x/tools:
        get:
            operationId: listTools
            parameters:
                - description: |
                    A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                  in: query
                  name: limit
                  schema:
                    default: 20
                    type: integer
                - description: |
                    Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                  in: query
                  name: order
                  schema:
                    default: desc
                    enum:
                        - asc
                        - desc
                    type: string
                - description: |
                    A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                  in: query
                  name: after
                  schema:
                    type: string
                - description: |
                    A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                  in: query
                  name: before
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/XListToolsResponse'
                    description: OK
            summary: List tools
        post:
            operationId: createTool
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/XCreateToolRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/XToolObject'
                    description: OK
            summary: Creates a tool for use with gptscript engine.
    /rubra/x/tools/{id}:
        delete:
            operationId: deleteTool
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/XDeleteToolResponse'
                    description: OK
            summary: Delete tool
        get:
            operationId: getTool
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/XToolObject'
                    description: OK
            summary: Get tool
        post:
            operationId: modifyTool
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/XModifyToolRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/XToolObject'
                    description: OK
            summary: Modify tool
    /threads:
        post:
            operationId: createThread
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateThreadRequest'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ThreadObject'
                    description: OK
            summary: Create a thread.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/threads \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d ''
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const emptyThread = await openai.beta.threads.create();

                              console.log(emptyThread);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            empty_thread = client.beta.threads.create()
                            print(empty_thread)
                      response: |
                        {
                          "id": "thread_abc123",
                          "object": "thread",
                          "created_at": 1699012949,
                          "metadata": {}
                        }
                      title: Empty
                    - request:
                        curl: |
                            curl https://api.openai.com/v1/threads \
                            -H "Content-Type: application/json" \
                            -H "Authorization: Bearer $OPENAI_API_KEY" \
                            -H "OpenAI-Beta: assistants=v1" \
                            -d '{
                                "messages": [{
                                  "role": "user",
                                  "content": "Hello, what is AI?",
                                  "file_ids": ["file-abc123"]
                                }, {
                                  "role": "user",
                                  "content": "How does AI work? Explain it in simple terms."
                                }]
                              }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const messageThread = await openai.beta.threads.create({
                                messages: [
                                  {
                                    role: "user",
                                    content: "Hello, what is AI?",
                                    file_ids: ["file-abc123"],
                                  },
                                  {
                                    role: "user",
                                    content: "How does AI work? Explain it in simple terms.",
                                  },
                                ],
                              });

                              console.log(messageThread);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            message_thread = client.beta.threads.create(
                              messages=[
                                {
                                  "role": "user",
                                  "content": "Hello, what is AI?",
                                  "file_ids": ["file-abc123"],
                                },
                                {
                                  "role": "user",
                                  "content": "How does AI work? Explain it in simple terms."
                                },
                              ]
                            )

                            print(message_thread)
                      response: |
                        {
                          id: 'thread_abc123',
                          object: 'thread',
                          created_at: 1699014083,
                          metadata: {}
                        }
                      title: Messages
                group: threads
                name: Create thread
                returns: A [thread](/docs/api-reference/threads) object.
    /threads/{thread_id}:
        delete:
            operationId: deleteThread
            parameters:
                - description: The ID of the thread to delete.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteThreadResponse'
                    description: OK
            summary: Delete a thread.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123 \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -X DELETE
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const response = await openai.beta.threads.del("thread_abc123");

                              console.log(response);
                            }
                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            response = client.beta.threads.delete("thread_abc123")
                            print(response)
                    response: |
                        {
                          "id": "thread_abc123",
                          "object": "thread.deleted",
                          "deleted": true
                        }
                group: threads
                name: Delete thread
                returns: Deletion status
        get:
            operationId: getThread
            parameters:
                - description: The ID of the thread to retrieve.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ThreadObject'
                    description: OK
            summary: Retrieves a thread.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123 \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const myThread = await openai.beta.threads.retrieve(
                                "thread_abc123"
                              );

                              console.log(myThread);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            my_thread = client.beta.threads.retrieve("thread_abc123")
                            print(my_thread)
                    response: |
                        {
                          "id": "thread_abc123",
                          "object": "thread",
                          "created_at": 1699014083,
                          "metadata": {}
                        }
                group: threads
                name: Retrieve thread
                returns: The [thread](/docs/api-reference/threads/object) object matching the specified ID.
        post:
            operationId: modifyThread
            parameters:
                - description: The ID of the thread to modify. Only the `metadata` can be modified.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ModifyThreadRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ThreadObject'
                    description: OK
            summary: Modifies a thread.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123 \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                  "metadata": {
                                    "modified": "true",
                                    "user": "abc123"
                                  }
                                }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const updatedThread = await openai.beta.threads.update(
                                "thread_abc123",
                                {
                                  metadata: { modified: "true", user: "abc123" },
                                }
                              );

                              console.log(updatedThread);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            my_updated_thread = client.beta.threads.update(
                              "thread_abc123",
                              metadata={
                                "modified": "true",
                                "user": "abc123"
                              }
                            )
                            print(my_updated_thread)
                    response: |
                        {
                          "id": "thread_abc123",
                          "object": "thread",
                          "created_at": 1699014083,
                          "metadata": {
                            "modified": "true",
                            "user": "abc123"
                          }
                        }
                group: threads
                name: Modify thread
                returns: The modified [thread](/docs/api-reference/threads/object) object matching the specified ID.
    /threads/{thread_id}/messages:
        get:
            operationId: listMessages
            parameters:
                - description: The ID of the [thread](/docs/api-reference/threads) the messages belong to.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: |
                    A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                  in: query
                  name: limit
                  schema:
                    default: 20
                    type: integer
                - description: |
                    Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                  in: query
                  name: order
                  schema:
                    default: desc
                    enum:
                        - asc
                        - desc
                    type: string
                - description: |
                    A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                  in: query
                  name: after
                  schema:
                    type: string
                - description: |
                    A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                  in: query
                  name: before
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListMessagesResponse'
                    description: OK
            summary: Returns a list of messages for a given thread.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/messages \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const threadMessages = await openai.beta.threads.messages.list(
                                "thread_abc123"
                              );

                              console.log(threadMessages.data);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            thread_messages = client.beta.threads.messages.list("thread_abc123")
                            print(thread_messages.data)
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "id": "msg_abc123",
                              "object": "thread.message",
                              "created_at": 1699016383,
                              "thread_id": "thread_abc123",
                              "role": "user",
                              "content": [
                                {
                                  "type": "text",
                                  "text": {
                                    "value": "How does AI work? Explain it in simple terms.",
                                    "annotations": []
                                  }
                                }
                              ],
                              "file_ids": [],
                              "assistant_id": null,
                              "run_id": null,
                              "metadata": {}
                            },
                            {
                              "id": "msg_abc456",
                              "object": "thread.message",
                              "created_at": 1699016383,
                              "thread_id": "thread_abc123",
                              "role": "user",
                              "content": [
                                {
                                  "type": "text",
                                  "text": {
                                    "value": "Hello, what is AI?",
                                    "annotations": []
                                  }
                                }
                              ],
                              "file_ids": [
                                "file-abc123"
                              ],
                              "assistant_id": null,
                              "run_id": null,
                              "metadata": {}
                            }
                          ],
                          "first_id": "msg_abc123",
                          "last_id": "msg_abc456",
                          "has_more": false
                        }
                group: threads
                name: List messages
                returns: A list of [message](/docs/api-reference/messages) objects.
        post:
            operationId: createMessage
            parameters:
                - description: The ID of the [thread](/docs/api-reference/threads) to create a message for.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateMessageRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MessageObject'
                    description: OK
            summary: Create a message.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/messages \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                  "role": "user",
                                  "content": "How does AI work? Explain it in simple terms."
                                }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const threadMessages = await openai.beta.threads.messages.create(
                                "thread_abc123",
                                { role: "user", content: "How does AI work? Explain it in simple terms." }
                              );

                              console.log(threadMessages);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            thread_message = client.beta.threads.messages.create(
                              "thread_abc123",
                              role="user",
                              content="How does AI work? Explain it in simple terms.",
                            )
                            print(thread_message)
                    response: |
                        {
                          "id": "msg_abc123",
                          "object": "thread.message",
                          "created_at": 1699017614,
                          "thread_id": "thread_abc123",
                          "role": "user",
                          "content": [
                            {
                              "type": "text",
                              "text": {
                                "value": "How does AI work? Explain it in simple terms.",
                                "annotations": []
                              }
                            }
                          ],
                          "file_ids": [],
                          "assistant_id": null,
                          "run_id": null,
                          "metadata": {}
                        }
                group: threads
                name: Create message
                returns: A [message](/docs/api-reference/messages/object) object.
    /threads/{thread_id}/messages/{message_id}:
        get:
            operationId: getMessage
            parameters:
                - description: The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the message to retrieve.
                  in: path
                  name: message_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MessageObject'
                    description: OK
            summary: Retrieve a message.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/messages/msg_abc123 \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const message = await openai.beta.threads.messages.retrieve(
                                "thread_abc123",
                                "msg_abc123"
                              );

                              console.log(message);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            message = client.beta.threads.messages.retrieve(
                              message_id="msg_abc123",
                              thread_id="thread_abc123",
                            )
                            print(message)
                    response: |
                        {
                          "id": "msg_abc123",
                          "object": "thread.message",
                          "created_at": 1699017614,
                          "thread_id": "thread_abc123",
                          "role": "user",
                          "content": [
                            {
                              "type": "text",
                              "text": {
                                "value": "How does AI work? Explain it in simple terms.",
                                "annotations": []
                              }
                            }
                          ],
                          "file_ids": [],
                          "assistant_id": null,
                          "run_id": null,
                          "metadata": {}
                        }
                group: threads
                name: Retrieve message
                returns: The [message](/docs/api-reference/threads/messages/object) object matching the specified ID.
        post:
            operationId: modifyMessage
            parameters:
                - description: The ID of the thread to which this message belongs.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the message to modify.
                  in: path
                  name: message_id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ModifyMessageRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MessageObject'
                    description: OK
            summary: Modifies a message.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/messages/msg_abc123 \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                  "metadata": {
                                    "modified": "true",
                                    "user": "abc123"
                                  }
                                }'
                        node.js: |-
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const message = await openai.beta.threads.messages.update(
                                "thread_abc123",
                                "msg_abc123",
                                {
                                  metadata: {
                                    modified: "true",
                                    user: "abc123",
                                  },
                                }
                              }'
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            message = client.beta.threads.messages.update(
                              message_id="msg_abc12",
                              thread_id="thread_abc123",
                              metadata={
                                "modified": "true",
                                "user": "abc123",
                              },
                            )
                            print(message)
                    response: |
                        {
                          "id": "msg_abc123",
                          "object": "thread.message",
                          "created_at": 1699017614,
                          "thread_id": "thread_abc123",
                          "role": "user",
                          "content": [
                            {
                              "type": "text",
                              "text": {
                                "value": "How does AI work? Explain it in simple terms.",
                                "annotations": []
                              }
                            }
                          ],
                          "file_ids": [],
                          "assistant_id": null,
                          "run_id": null,
                          "metadata": {
                            "modified": "true",
                            "user": "abc123"
                          }
                        }
                group: threads
                name: Modify message
                returns: The modified [message](/docs/api-reference/threads/messages/object) object.
    /threads/{thread_id}/messages/{message_id}/files:
        get:
            operationId: listMessageFiles
            parameters:
                - description: The ID of the thread that the message and files belong to.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the message that the files belongs to.
                  in: path
                  name: message_id
                  required: true
                  schema:
                    type: string
                - description: |
                    A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                  in: query
                  name: limit
                  schema:
                    default: 20
                    type: integer
                - description: |
                    Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                  in: query
                  name: order
                  schema:
                    default: desc
                    enum:
                        - asc
                        - desc
                    type: string
                - description: |
                    A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                  in: query
                  name: after
                  schema:
                    type: string
                - description: |
                    A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                  in: query
                  name: before
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListMessageFilesResponse'
                    description: OK
            summary: Returns a list of message files.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/messages/msg_abc123/files \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |
                            import OpenAI from "openai";
                            const openai = new OpenAI();

                            async function main() {
                              const messageFiles = await openai.beta.threads.messages.files.list(
                                "thread_abc123",
                                "msg_abc123"
                              );
                              console.log(messageFiles);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            message_files = client.beta.threads.messages.files.list(
                              thread_id="thread_abc123",
                              message_id="msg_abc123"
                            )
                            print(message_files)
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "id": "file-abc123",
                              "object": "thread.message.file",
                              "created_at": 1699061776,
                              "message_id": "msg_abc123"
                            },
                            {
                              "id": "file-abc123",
                              "object": "thread.message.file",
                              "created_at": 1699061776,
                              "message_id": "msg_abc123"
                            }
                          ],
                          "first_id": "file-abc123",
                          "last_id": "file-abc123",
                          "has_more": false
                        }
                group: threads
                name: List message files
                returns: A list of [message file](/docs/api-reference/messages/file-object) objects.
    /threads/{thread_id}/messages/{message_id}/files/{file_id}:
        get:
            operationId: getMessageFile
            parameters:
                - description: The ID of the thread to which the message and File belong.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    example: thread_abc123
                    type: string
                - description: The ID of the message the file belongs to.
                  in: path
                  name: message_id
                  required: true
                  schema:
                    example: msg_abc123
                    type: string
                - description: The ID of the file being retrieved.
                  in: path
                  name: file_id
                  required: true
                  schema:
                    example: file-abc123
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MessageFileObject'
                    description: OK
            summary: Retrieves a message file.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/messages/msg_abc123/files/file-abc123 \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |
                            import OpenAI from "openai";
                            const openai = new OpenAI();

                            async function main() {
                              const messageFile = await openai.beta.threads.messages.files.retrieve(
                                "thread_abc123",
                                "msg_abc123",
                                "file-abc123"
                              );
                              console.log(messageFile);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            message_files = client.beta.threads.messages.files.retrieve(
                                thread_id="thread_abc123",
                                message_id="msg_abc123",
                                file_id="file-abc123"
                            )
                            print(message_files)
                    response: |
                        {
                          "id": "file-abc123",
                          "object": "thread.message.file",
                          "created_at": 1699061776,
                          "message_id": "msg_abc123"
                        }
                group: threads
                name: Retrieve message file
                returns: The [message file](/docs/api-reference/messages/file-object) object.
    /threads/{thread_id}/runs:
        get:
            operationId: listRuns
            parameters:
                - description: The ID of the thread the run belongs to.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: |
                    A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                  in: query
                  name: limit
                  schema:
                    default: 20
                    type: integer
                - description: |
                    Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                  in: query
                  name: order
                  schema:
                    default: desc
                    enum:
                        - asc
                        - desc
                    type: string
                - description: |
                    A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                  in: query
                  name: after
                  schema:
                    type: string
                - description: |
                    A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                  in: query
                  name: before
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListRunsResponse'
                    description: OK
            summary: Returns a list of runs belonging to a thread.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/runs \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const runs = await openai.beta.threads.runs.list(
                                "thread_abc123"
                              );

                              console.log(runs);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            runs = client.beta.threads.runs.list(
                              "thread_abc123"
                            )
                            print(runs)
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "id": "run_abc123",
                              "object": "thread.run",
                              "created_at": 1699075072,
                              "assistant_id": "asst_abc123",
                              "thread_id": "thread_abc123",
                              "status": "completed",
                              "started_at": 1699075072,
                              "expires_at": null,
                              "cancelled_at": null,
                              "failed_at": null,
                              "completed_at": 1699075073,
                              "last_error": null,
                              "model": "gpt-3.5-turbo",
                              "instructions": null,
                              "tools": [
                                {
                                  "type": "code_interpreter"
                                }
                              ],
                              "file_ids": [
                                "file-abc123",
                                "file-abc456"
                              ],
                              "metadata": {},
                              "usage": {
                                "prompt_tokens": 123,
                                "completion_tokens": 456,
                                "total_tokens": 579
                              }
                            },
                            {
                              "id": "run_abc456",
                              "object": "thread.run",
                              "created_at": 1699063290,
                              "assistant_id": "asst_abc123",
                              "thread_id": "thread_abc123",
                              "status": "completed",
                              "started_at": 1699063290,
                              "expires_at": null,
                              "cancelled_at": null,
                              "failed_at": null,
                              "completed_at": 1699063291,
                              "last_error": null,
                              "model": "gpt-3.5-turbo",
                              "instructions": null,
                              "tools": [
                                {
                                  "type": "code_interpreter"
                                }
                              ],
                              "file_ids": [
                                "file-abc123",
                                "file-abc456"
                              ],
                              "metadata": {},
                              "usage": {
                                "prompt_tokens": 123,
                                "completion_tokens": 456,
                                "total_tokens": 579
                              }
                            }
                          ],
                          "first_id": "run_abc123",
                          "last_id": "run_abc456",
                          "has_more": false
                        }
                group: threads
                name: List runs
                returns: A list of [run](/docs/api-reference/runs/object) objects.
        post:
            operationId: createRun
            parameters:
                - description: The ID of the thread to run.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateRunRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RunObject'
                    description: OK
            summary: Create a run.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/runs \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                "assistant_id": "asst_abc123"
                              }'
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const run = await openai.beta.threads.runs.create(
                                "thread_abc123",
                                { assistant_id: "asst_abc123" }
                              );

                              console.log(run);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            run = client.beta.threads.runs.create(
                              thread_id="thread_abc123",
                              assistant_id="asst_abc123"
                            )
                            print(run)
                    response: |
                        {
                          "id": "run_abc123",
                          "object": "thread.run",
                          "created_at": 1699063290,
                          "assistant_id": "asst_abc123",
                          "thread_id": "thread_abc123",
                          "status": "queued",
                          "started_at": 1699063290,
                          "expires_at": null,
                          "cancelled_at": null,
                          "failed_at": null,
                          "completed_at": 1699063291,
                          "last_error": null,
                          "model": "gpt-4",
                          "instructions": null,
                          "tools": [
                            {
                              "type": "code_interpreter"
                            }
                          ],
                          "file_ids": [
                            "file-abc123",
                            "file-abc456"
                          ],
                          "metadata": {},
                          "usage": null
                        }
                group: threads
                name: Create run
                returns: A [run](/docs/api-reference/runs/object) object.
    /threads/{thread_id}/runs/{run_id}:
        get:
            operationId: getRun
            parameters:
                - description: The ID of the [thread](/docs/api-reference/threads) that was run.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the run to retrieve.
                  in: path
                  name: run_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RunObject'
                    description: OK
            summary: Retrieves a run.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123 \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const run = await openai.beta.threads.runs.retrieve(
                                "thread_abc123",
                                "run_abc123"
                              );

                              console.log(run);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            run = client.beta.threads.runs.retrieve(
                              thread_id="thread_abc123",
                              run_id="run_abc123"
                            )
                            print(run)
                    response: |
                        {
                          "id": "run_abc123",
                          "object": "thread.run",
                          "created_at": 1699075072,
                          "assistant_id": "asst_abc123",
                          "thread_id": "thread_abc123",
                          "status": "completed",
                          "started_at": 1699075072,
                          "expires_at": null,
                          "cancelled_at": null,
                          "failed_at": null,
                          "completed_at": 1699075073,
                          "last_error": null,
                          "model": "gpt-3.5-turbo",
                          "instructions": null,
                          "tools": [
                            {
                              "type": "code_interpreter"
                            }
                          ],
                          "file_ids": [
                            "file-abc123",
                            "file-abc456"
                          ],
                          "metadata": {},
                          "usage": {
                            "prompt_tokens": 123,
                            "completion_tokens": 456,
                            "total_tokens": 579
                          }
                        }
                group: threads
                name: Retrieve run
                returns: The [run](/docs/api-reference/runs/object) object matching the specified ID.
        post:
            operationId: modifyRun
            parameters:
                - description: The ID of the [thread](/docs/api-reference/threads) that was run.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the run to modify.
                  in: path
                  name: run_id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ModifyRunRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RunObject'
                    description: OK
            summary: Modifies a run.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123 \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                "metadata": {
                                  "user_id": "user_abc123"
                                }
                              }'
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const run = await openai.beta.threads.runs.update(
                                "thread_abc123",
                                "run_abc123",
                                {
                                  metadata: {
                                    user_id: "user_abc123",
                                  },
                                }
                              );

                              console.log(run);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            run = client.beta.threads.runs.update(
                              thread_id="thread_abc123",
                              run_id="run_abc123",
                              metadata={"user_id": "user_abc123"},
                            )
                            print(run)
                    response: |
                        {
                          "id": "run_abc123",
                          "object": "thread.run",
                          "created_at": 1699075072,
                          "assistant_id": "asst_abc123",
                          "thread_id": "thread_abc123",
                          "status": "completed",
                          "started_at": 1699075072,
                          "expires_at": null,
                          "cancelled_at": null,
                          "failed_at": null,
                          "completed_at": 1699075073,
                          "last_error": null,
                          "model": "gpt-3.5-turbo",
                          "instructions": null,
                          "tools": [
                            {
                              "type": "code_interpreter"
                            }
                          ],
                          "file_ids": [
                            "file-abc123",
                            "file-abc456"
                          ],
                          "metadata": {
                            "user_id": "user_abc123"
                          },
                          "usage": {
                            "prompt_tokens": 123,
                            "completion_tokens": 456,
                            "total_tokens": 579
                          }
                        }
                group: threads
                name: Modify run
                returns: The modified [run](/docs/api-reference/runs/object) object matching the specified ID.
    /threads/{thread_id}/runs/{run_id}/cancel:
        post:
            operationId: cancelRun
            parameters:
                - description: The ID of the thread to which this run belongs.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the run to cancel.
                  in: path
                  name: run_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RunObject'
                    description: OK
            summary: Cancels a run that is `in_progress`.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123/cancel \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -X POST
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const run = await openai.beta.threads.runs.cancel(
                                "thread_abc123",
                                "run_abc123"
                              );

                              console.log(run);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            run = client.beta.threads.runs.cancel(
                              thread_id="thread_abc123",
                              run_id="run_abc123"
                            )
                            print(run)
                    response: |
                        {
                          "id": "run_abc123",
                          "object": "thread.run",
                          "created_at": 1699076126,
                          "assistant_id": "asst_abc123",
                          "thread_id": "thread_abc123",
                          "status": "cancelling",
                          "started_at": 1699076126,
                          "expires_at": 1699076726,
                          "cancelled_at": null,
                          "failed_at": null,
                          "completed_at": null,
                          "last_error": null,
                          "model": "gpt-4",
                          "instructions": "You summarize books.",
                          "tools": [
                            {
                              "type": "retrieval"
                            }
                          ],
                          "file_ids": [],
                          "metadata": {},
                          "usage": null
                        }
                group: threads
                name: Cancel a run
                returns: The modified [run](/docs/api-reference/runs/object) object matching the specified ID.
    /threads/{thread_id}/runs/{run_id}/steps:
        get:
            operationId: listRunSteps
            parameters:
                - description: The ID of the thread the run and run steps belong to.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the run the run steps belong to.
                  in: path
                  name: run_id
                  required: true
                  schema:
                    type: string
                - description: |
                    A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                  in: query
                  name: limit
                  schema:
                    default: 20
                    type: integer
                - description: |
                    Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                  in: query
                  name: order
                  schema:
                    default: desc
                    enum:
                        - asc
                        - desc
                    type: string
                - description: |
                    A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                  in: query
                  name: after
                  schema:
                    type: string
                - description: |
                    A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                  in: query
                  name: before
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListRunStepsResponse'
                    description: OK
            summary: Returns a list of run steps belonging to a run.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123/steps \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |
                            import OpenAI from "openai";
                            const openai = new OpenAI();

                            async function main() {
                              const runStep = await openai.beta.threads.runs.steps.list(
                                "thread_abc123",
                                "run_abc123"
                              );
                              console.log(runStep);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            run_steps = client.beta.threads.runs.steps.list(
                                thread_id="thread_abc123",
                                run_id="run_abc123"
                            )
                            print(run_steps)
                    response: |
                        {
                          "object": "list",
                          "data": [
                            {
                              "id": "step_abc123",
                              "object": "thread.run.step",
                              "created_at": 1699063291,
                              "run_id": "run_abc123",
                              "assistant_id": "asst_abc123",
                              "thread_id": "thread_abc123",
                              "type": "message_creation",
                              "status": "completed",
                              "cancelled_at": null,
                              "completed_at": 1699063291,
                              "expired_at": null,
                              "failed_at": null,
                              "last_error": null,
                              "step_details": {
                                "type": "message_creation",
                                "message_creation": {
                                  "message_id": "msg_abc123"
                                }
                              },
                              "usage": {
                                "prompt_tokens": 123,
                                "completion_tokens": 456,
                                "total_tokens": 579
                              }
                            }
                          ],
                          "first_id": "step_abc123",
                          "last_id": "step_abc456",
                          "has_more": false
                        }
                group: threads
                name: List run steps
                returns: A list of [run step](/docs/api-reference/runs/step-object) objects.
    /threads/{thread_id}/runs/{run_id}/steps/{step_id}:
        get:
            operationId: getRunStep
            parameters:
                - description: The ID of the thread to which the run and run step belongs.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the run to which the run step belongs.
                  in: path
                  name: run_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the run step to retrieve.
                  in: path
                  name: step_id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RunStepObject'
                    description: OK
            summary: Retrieves a run step.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123/steps/step_abc123 \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1"
                        node.js: |
                            import OpenAI from "openai";
                            const openai = new OpenAI();

                            async function main() {
                              const runStep = await openai.beta.threads.runs.steps.retrieve(
                                "thread_abc123",
                                "run_abc123",
                                "step_abc123"
                              );
                              console.log(runStep);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            run_step = client.beta.threads.runs.steps.retrieve(
                                thread_id="thread_abc123",
                                run_id="run_abc123",
                                step_id="step_abc123"
                            )
                            print(run_step)
                    response: |
                        {
                          "id": "step_abc123",
                          "object": "thread.run.step",
                          "created_at": 1699063291,
                          "run_id": "run_abc123",
                          "assistant_id": "asst_abc123",
                          "thread_id": "thread_abc123",
                          "type": "message_creation",
                          "status": "completed",
                          "cancelled_at": null,
                          "completed_at": 1699063291,
                          "expired_at": null,
                          "failed_at": null,
                          "last_error": null,
                          "step_details": {
                            "type": "message_creation",
                            "message_creation": {
                              "message_id": "msg_abc123"
                            }
                          },
                          "usage": {
                            "prompt_tokens": 123,
                            "completion_tokens": 456,
                            "total_tokens": 579
                          }
                        }
                group: threads
                name: Retrieve run step
                returns: The [run step](/docs/api-reference/runs/step-object) object matching the specified ID.
    /threads/{thread_id}/runs/{run_id}/submit_tool_outputs:
        post:
            operationId: submitToolOuputsToRun
            parameters:
                - description: The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
                  in: path
                  name: thread_id
                  required: true
                  schema:
                    type: string
                - description: The ID of the run that requires the tool output submission.
                  in: path
                  name: run_id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SubmitToolOutputsRunRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RunObject'
                    description: OK
            summary: |
                When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123/submit_tool_outputs \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                "tool_outputs": [
                                  {
                                    "tool_call_id": "call_abc123",
                                    "output": "28C"
                                  }
                                ]
                              }'
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const run = await openai.beta.threads.runs.submitToolOutputs(
                                "thread_abc123",
                                "run_abc123",
                                {
                                  tool_outputs: [
                                    {
                                      tool_call_id: "call_abc123",
                                      output: "28C",
                                    },
                                  ],
                                }
                              );

                              console.log(run);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            run = client.beta.threads.runs.submit_tool_outputs(
                              thread_id="thread_abc123",
                              run_id="run_abc123",
                              tool_outputs=[
                                {
                                  "tool_call_id": "call_abc123",
                                  "output": "28C"
                                }
                              ]
                            )
                            print(run)
                    response: |
                        {
                          "id": "run_abc123",
                          "object": "thread.run",
                          "created_at": 1699075592,
                          "assistant_id": "asst_abc123",
                          "thread_id": "thread_abc123",
                          "status": "queued",
                          "started_at": 1699075592,
                          "expires_at": 1699076192,
                          "cancelled_at": null,
                          "failed_at": null,
                          "completed_at": null,
                          "last_error": null,
                          "model": "gpt-4",
                          "instructions": "You tell the weather.",
                          "tools": [
                            {
                              "type": "function",
                              "function": {
                                "name": "get_weather",
                                "description": "Determine weather in my location",
                                "parameters": {
                                  "type": "object",
                                  "properties": {
                                    "location": {
                                      "type": "string",
                                      "description": "The city and state e.g. San Francisco, CA"
                                    },
                                    "unit": {
                                      "type": "string",
                                      "enum": [
                                        "c",
                                        "f"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ]
                                }
                              }
                            }
                          ],
                          "file_ids": [],
                          "metadata": {},
                          "usage": null
                        }
                group: threads
                name: Submit tool outputs to run
                returns: The modified [run](/docs/api-reference/runs/object) object matching the specified ID.
    /threads/runs:
        post:
            operationId: createThreadAndRun
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateThreadAndRunRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RunObject'
                    description: OK
            summary: Create a thread and run it in one request.
            tags:
                - Assistants
            x-oaiMeta:
                beta: true
                examples:
                    request:
                        curl: |
                            curl https://api.openai.com/v1/threads/runs \
                              -H "Authorization: Bearer $OPENAI_API_KEY" \
                              -H "Content-Type: application/json" \
                              -H "OpenAI-Beta: assistants=v1" \
                              -d '{
                                  "assistant_id": "asst_abc123",
                                  "thread": {
                                    "messages": [
                                      {"role": "user", "content": "Explain deep learning to a 5 year old."}
                                    ]
                                  }
                                }'
                        node.js: |
                            import OpenAI from "openai";

                            const openai = new OpenAI();

                            async function main() {
                              const run = await openai.beta.threads.createAndRun({
                                assistant_id: "asst_abc123",
                                thread: {
                                  messages: [
                                    { role: "user", content: "Explain deep learning to a 5 year old." },
                                  ],
                                },
                              });

                              console.log(run);
                            }

                            main();
                        python: |
                            from openai import OpenAI
                            client = OpenAI()

                            run = client.beta.threads.create_and_run(
                              assistant_id="asst_abc123",
                              thread={
                                "messages": [
                                  {"role": "user", "content": "Explain deep learning to a 5 year old."}
                                ]
                              }
                            )
                    response: |
                        {
                          "id": "run_abc123",
                          "object": "thread.run",
                          "created_at": 1699076792,
                          "assistant_id": "asst_abc123",
                          "thread_id": "thread_abc123",
                          "status": "queued",
                          "started_at": null,
                          "expires_at": 1699077392,
                          "cancelled_at": null,
                          "failed_at": null,
                          "completed_at": null,
                          "last_error": null,
                          "model": "gpt-4",
                          "instructions": "You are a helpful assistant.",
                          "tools": [],
                          "file_ids": [],
                          "metadata": {},
                          "usage": null
                        }
                group: threads
                name: Create thread and run
                returns: A [run](/docs/api-reference/runs/object) object.
security:
    - ApiKeyAuth: []
servers:
    - url: https://api.openai.com/v1
tags:
    - description: Build Assistants that can call models and use tools.
      name: Assistants
    - description: Learn how to turn audio into text or text into audio.
      name: Audio
    - description: Given a list of messages comprising a conversation, the model will return a response.
      name: Chat
    - description: Given a prompt, the model will return one or more predicted completions, and can also return the probabilities of alternative tokens at each position.
      name: Completions
    - description: Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.
      name: Embeddings
    - description: Manage fine-tuning jobs to tailor a model to your specific training data.
      name: Fine-tuning
    - description: Files are used to upload documents that can be used with features like Assistants and Fine-tuning.
      name: Files
    - description: Given a prompt and/or an input image, the model will generate a new image.
      name: Images
    - description: List and describe the various models available in the API.
      name: Models
    - description: Given a input text, outputs if the model classifies it as violating OpenAI's content policy.
      name: Moderations
x-oaiMeta:
    groups:
        - description: |
            Learn how to turn audio into text or text into audio.

            Related guide: [Speech to text](/docs/guides/speech-to-text)
          id: audio
          sections:
            - key: createSpeech
              path: createSpeech
              type: endpoint
            - key: createTranscription
              path: createTranscription
              type: endpoint
            - key: createTranslation
              path: createTranslation
              type: endpoint
          title: Audio
        - description: |
            Given a list of messages comprising a conversation, the model will return a response.

            Related guide: [Chat Completions](/docs/guides/text-generation)
          id: chat
          sections:
            - key: createChatCompletion
              path: create
              type: endpoint
            - key: CreateChatCompletionResponse
              path: object
              type: object
            - key: CreateChatCompletionStreamResponse
              path: streaming
              type: object
          title: Chat
        - description: |
            Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.

            Related guide: [Embeddings](/docs/guides/embeddings)
          id: embeddings
          sections:
            - key: createEmbedding
              path: create
              type: endpoint
            - key: Embedding
              path: object
              type: object
          title: Embeddings
        - description: |
            Manage fine-tuning jobs to tailor a model to your specific training data.

            Related guide: [Fine-tune models](/docs/guides/fine-tuning)
          id: fine-tuning
          sections:
            - key: createFineTuningJob
              path: create
              type: endpoint
            - key: listPaginatedFineTuningJobs
              path: list
              type: endpoint
            - key: listFineTuningEvents
              path: list-events
              type: endpoint
            - key: retrieveFineTuningJob
              path: retrieve
              type: endpoint
            - key: cancelFineTuningJob
              path: cancel
              type: endpoint
            - key: FineTuningJob
              path: object
              type: object
            - key: FineTuningJobEvent
              path: event-object
              type: object
          title: Fine-tuning
        - description: |
            Files are used to upload documents that can be used with features like [Assistants](/docs/api-reference/assistants) and [Fine-tuning](/docs/api-reference/fine-tuning).
          id: files
          sections:
            - key: createFile
              path: create
              type: endpoint
            - key: listFiles
              path: list
              type: endpoint
            - key: retrieveFile
              path: retrieve
              type: endpoint
            - key: deleteFile
              path: delete
              type: endpoint
            - key: downloadFile
              path: retrieve-contents
              type: endpoint
            - key: OpenAIFile
              path: object
              type: object
          title: Files
        - description: |
            Given a prompt and/or an input image, the model will generate a new image.

            Related guide: [Image generation](/docs/guides/images)
          id: images
          sections:
            - key: createImage
              path: create
              type: endpoint
            - key: createImageEdit
              path: createEdit
              type: endpoint
            - key: createImageVariation
              path: createVariation
              type: endpoint
            - key: Image
              path: object
              type: object
          title: Images
        - description: |
            List and describe the various models available in the API. You can refer to the [Models](/docs/models) documentation to understand what models are available and the differences between them.
          id: models
          sections:
            - key: listModels
              path: list
              type: endpoint
            - key: retrieveModel
              path: retrieve
              type: endpoint
            - key: deleteModel
              path: delete
              type: endpoint
            - key: Model
              path: object
              type: object
          title: Models
        - description: |
            Given a input text, outputs if the model classifies it as violating OpenAI's content policy.

            Related guide: [Moderations](/docs/guides/moderation)
          id: moderations
          sections:
            - key: createModeration
              path: create
              type: endpoint
            - key: CreateModerationResponse
              path: object
              type: object
          title: Moderations
        - beta: true
          description: |
            Build assistants that can call models and use tools to perform tasks.

            [Get started with the Assistants API](/docs/assistants)
          id: assistants
          sections:
            - key: createAssistant
              path: createAssistant
              type: endpoint
            - key: createAssistantFile
              path: createAssistantFile
              type: endpoint
            - key: listAssistants
              path: listAssistants
              type: endpoint
            - key: listAssistantFiles
              path: listAssistantFiles
              type: endpoint
            - key: getAssistant
              path: getAssistant
              type: endpoint
            - key: getAssistantFile
              path: getAssistantFile
              type: endpoint
            - key: modifyAssistant
              path: modifyAssistant
              type: endpoint
            - key: deleteAssistant
              path: deleteAssistant
              type: endpoint
            - key: deleteAssistantFile
              path: deleteAssistantFile
              type: endpoint
            - key: AssistantObject
              path: object
              type: object
            - key: AssistantFileObject
              path: file-object
              type: object
          title: Assistants
        - beta: true
          description: |
            Create threads that assistants can interact with.

            Related guide: [Assistants](/docs/assistants/overview)
          id: threads
          sections:
            - key: createThread
              path: createThread
              type: endpoint
            - key: getThread
              path: getThread
              type: endpoint
            - key: modifyThread
              path: modifyThread
              type: endpoint
            - key: deleteThread
              path: deleteThread
              type: endpoint
            - key: ThreadObject
              path: object
              type: object
          title: Threads
        - beta: true
          description: |
            Create messages within threads

            Related guide: [Assistants](/docs/assistants/overview)
          id: messages
          sections:
            - key: createMessage
              path: createMessage
              type: endpoint
            - key: listMessages
              path: listMessages
              type: endpoint
            - key: listMessageFiles
              path: listMessageFiles
              type: endpoint
            - key: getMessage
              path: getMessage
              type: endpoint
            - key: getMessageFile
              path: getMessageFile
              type: endpoint
            - key: modifyMessage
              path: modifyMessage
              type: endpoint
            - key: MessageObject
              path: object
              type: object
            - key: MessageFileObject
              path: file-object
              type: object
          title: Messages
        - beta: true
          description: |
            Represents an execution run on a thread.

            Related guide: [Assistants](/docs/assistants/overview)
          id: runs
          sections:
            - key: createRun
              path: createRun
              type: endpoint
            - key: createThreadAndRun
              path: createThreadAndRun
              type: endpoint
            - key: listRuns
              path: listRuns
              type: endpoint
            - key: listRunSteps
              path: listRunSteps
              type: endpoint
            - key: getRun
              path: getRun
              type: endpoint
            - key: getRunStep
              path: getRunStep
              type: endpoint
            - key: modifyRun
              path: modifyRun
              type: endpoint
            - key: submitToolOuputsToRun
              path: submitToolOutputs
              type: endpoint
            - key: cancelRun
              path: cancelRun
              type: endpoint
            - key: RunObject
              path: object
              type: object
            - key: RunStepObject
              path: step-object
              type: object
          title: Runs
        - description: |
            Given a prompt, the model will return one or more predicted completions along with the probabilities of alternative tokens at each position. Most developer should use our [Chat Completions API](/docs/guides/text-generation/text-generation-models) to leverage our best and newest models. Most models that support the legacy Completions endpoint [will be shut off on January 4th, 2024](/docs/deprecations/2023-07-06-gpt-and-embeddings).
          id: completions
          legacy: true
          sections:
            - key: createCompletion
              path: create
              type: endpoint
            - key: CreateCompletionResponse
              path: object
              type: object
          title: Completions
