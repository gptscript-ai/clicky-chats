//go:build go1.22

// Package openai provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package openai

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of assistants.
	// (GET /assistants)
	ListAssistants(w http.ResponseWriter, r *http.Request, params ListAssistantsParams)
	// Create an assistant with a model and instructions.
	// (POST /assistants)
	CreateAssistant(w http.ResponseWriter, r *http.Request)
	// Delete an assistant.
	// (DELETE /assistants/{assistant_id})
	DeleteAssistant(w http.ResponseWriter, r *http.Request, assistantId string)
	// Retrieves an assistant.
	// (GET /assistants/{assistant_id})
	GetAssistant(w http.ResponseWriter, r *http.Request, assistantId string)
	// Modifies an assistant.
	// (POST /assistants/{assistant_id})
	ModifyAssistant(w http.ResponseWriter, r *http.Request, assistantId string)
	// Returns a list of assistant files.
	// (GET /assistants/{assistant_id}/files)
	ListAssistantFiles(w http.ResponseWriter, r *http.Request, assistantId string, params ListAssistantFilesParams)
	// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
	// (POST /assistants/{assistant_id}/files)
	CreateAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string)
	// Delete an assistant file.
	// (DELETE /assistants/{assistant_id}/files/{file_id})
	DeleteAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string, fileId string)
	// Retrieves an AssistantFile.
	// (GET /assistants/{assistant_id}/files/{file_id})
	GetAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string, fileId string)
	// Generates audio from the input text.
	// (POST /audio/speech)
	CreateSpeech(w http.ResponseWriter, r *http.Request)
	// Transcribes audio into the input language.
	// (POST /audio/transcriptions)
	CreateTranscription(w http.ResponseWriter, r *http.Request)
	// Translates audio into English.
	// (POST /audio/translations)
	CreateTranslation(w http.ResponseWriter, r *http.Request)
	// Creates a model response for the given chat conversation.
	// (POST /chat/completions)
	CreateChatCompletion(w http.ResponseWriter, r *http.Request)
	// Creates a completion for the provided prompt and parameters.
	// (POST /completions)
	CreateCompletion(w http.ResponseWriter, r *http.Request)
	// Creates an embedding vector representing the input text.
	// (POST /embeddings)
	CreateEmbedding(w http.ResponseWriter, r *http.Request)
	// Returns a list of files that belong to the user's organization.
	// (GET /files)
	ListFiles(w http.ResponseWriter, r *http.Request, params ListFilesParams)
	// Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.
	//
	// The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.
	//
	// Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
	// (POST /files)
	CreateFile(w http.ResponseWriter, r *http.Request)
	// Delete a file.
	// (DELETE /files/{file_id})
	DeleteFile(w http.ResponseWriter, r *http.Request, fileId string)
	// Returns information about a specific file.
	// (GET /files/{file_id})
	RetrieveFile(w http.ResponseWriter, r *http.Request, fileId string)
	// Returns the contents of the specified file.
	// (GET /files/{file_id}/content)
	DownloadFile(w http.ResponseWriter, r *http.Request, fileId string)
	// List your organization's fine-tuning jobs
	// (GET /fine_tuning/jobs)
	ListPaginatedFineTuningJobs(w http.ResponseWriter, r *http.Request, params ListPaginatedFineTuningJobsParams)
	// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
	//
	// Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
	//
	// [Learn more about fine-tuning](/docs/guides/fine-tuning)
	// (POST /fine_tuning/jobs)
	CreateFineTuningJob(w http.ResponseWriter, r *http.Request)
	// Get info about a fine-tuning job.
	//
	// [Learn more about fine-tuning](/docs/guides/fine-tuning)
	// (GET /fine_tuning/jobs/{fine_tuning_job_id})
	RetrieveFineTuningJob(w http.ResponseWriter, r *http.Request, fineTuningJobId string)
	// Immediately cancel a fine-tune job.
	// (POST /fine_tuning/jobs/{fine_tuning_job_id}/cancel)
	CancelFineTuningJob(w http.ResponseWriter, r *http.Request, fineTuningJobId string)
	// Get status updates for a fine-tuning job.
	// (GET /fine_tuning/jobs/{fine_tuning_job_id}/events)
	ListFineTuningEvents(w http.ResponseWriter, r *http.Request, fineTuningJobId string, params ListFineTuningEventsParams)
	// Creates an edited or extended image given an original image and a prompt.
	// (POST /images/edits)
	CreateImageEdit(w http.ResponseWriter, r *http.Request)
	// Creates an image given a prompt.
	// (POST /images/generations)
	CreateImage(w http.ResponseWriter, r *http.Request)
	// Creates a variation of a given image.
	// (POST /images/variations)
	CreateImageVariation(w http.ResponseWriter, r *http.Request)
	// Lists the currently available models, and provides basic information about each one such as the owner and availability.
	// (GET /models)
	ListModels(w http.ResponseWriter, r *http.Request)
	// Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
	// (DELETE /models/{model})
	DeleteModel(w http.ResponseWriter, r *http.Request, model string)
	// Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
	// (GET /models/{model})
	RetrieveModel(w http.ResponseWriter, r *http.Request, model string)
	// Classifies if text is potentially harmful.
	// (POST /moderations)
	CreateModeration(w http.ResponseWriter, r *http.Request)
	// Create a thread.
	// (POST /threads)
	CreateThread(w http.ResponseWriter, r *http.Request)
	// Create a thread and run it in one request.
	// (POST /threads/runs)
	CreateThreadAndRun(w http.ResponseWriter, r *http.Request)
	// Delete a thread.
	// (DELETE /threads/{thread_id})
	DeleteThread(w http.ResponseWriter, r *http.Request, threadId string)
	// Retrieves a thread.
	// (GET /threads/{thread_id})
	GetThread(w http.ResponseWriter, r *http.Request, threadId string)
	// Modifies a thread.
	// (POST /threads/{thread_id})
	ModifyThread(w http.ResponseWriter, r *http.Request, threadId string)
	// Returns a list of messages for a given thread.
	// (GET /threads/{thread_id}/messages)
	ListMessages(w http.ResponseWriter, r *http.Request, threadId string, params ListMessagesParams)
	// Create a message.
	// (POST /threads/{thread_id}/messages)
	CreateMessage(w http.ResponseWriter, r *http.Request, threadId string)
	// Retrieve a message.
	// (GET /threads/{thread_id}/messages/{message_id})
	GetMessage(w http.ResponseWriter, r *http.Request, threadId string, messageId string)
	// Modifies a message.
	// (POST /threads/{thread_id}/messages/{message_id})
	ModifyMessage(w http.ResponseWriter, r *http.Request, threadId string, messageId string)
	// Returns a list of message files.
	// (GET /threads/{thread_id}/messages/{message_id}/files)
	ListMessageFiles(w http.ResponseWriter, r *http.Request, threadId string, messageId string, params ListMessageFilesParams)
	// Retrieves a message file.
	// (GET /threads/{thread_id}/messages/{message_id}/files/{file_id})
	GetMessageFile(w http.ResponseWriter, r *http.Request, threadId string, messageId string, fileId string)
	// Returns a list of runs belonging to a thread.
	// (GET /threads/{thread_id}/runs)
	ListRuns(w http.ResponseWriter, r *http.Request, threadId string, params ListRunsParams)
	// Create a run.
	// (POST /threads/{thread_id}/runs)
	CreateRun(w http.ResponseWriter, r *http.Request, threadId string)
	// Retrieves a run.
	// (GET /threads/{thread_id}/runs/{run_id})
	GetRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Modifies a run.
	// (POST /threads/{thread_id}/runs/{run_id})
	ModifyRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Cancels a run that is `in_progress`.
	// (POST /threads/{thread_id}/runs/{run_id}/cancel)
	CancelRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Returns a list of run steps belonging to a run.
	// (GET /threads/{thread_id}/runs/{run_id}/steps)
	ListRunSteps(w http.ResponseWriter, r *http.Request, threadId string, runId string, params ListRunStepsParams)
	// Retrieves a run step.
	// (GET /threads/{thread_id}/runs/{run_id}/steps/{step_id})
	GetRunStep(w http.ResponseWriter, r *http.Request, threadId string, runId string, stepId string)
	// List run step events
	// (GET /threads/{thread_id}/runs/{run_id}/steps/{step_id}/x-events)
	XListRunStepEvents(w http.ResponseWriter, r *http.Request, threadId string, runId string, stepId string, params XListRunStepEventsParams)
	// When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
	// (POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs)
	SubmitToolOuputsToRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Stream run events when the run is in progress
	// (GET /threads/{thread_id}/runs/{run_id}/x-stream)
	XStreamRun(w http.ResponseWriter, r *http.Request, threadId string, runId string, params XStreamRunParams)
	// List threads
	// (GET /x-threads)
	XListThreads(w http.ResponseWriter, r *http.Request, params XListThreadsParams)
	// List tools
	// (GET /x-tools)
	XListTools(w http.ResponseWriter, r *http.Request, params XListToolsParams)
	// Creates a tool for use with gptscript engine.
	// (POST /x-tools)
	XCreateTool(w http.ResponseWriter, r *http.Request)
	// Inspect tool
	// (POST /x-tools/inspect)
	XInspectTool(w http.ResponseWriter, r *http.Request)
	// Run tool
	// (POST /x-tools/run)
	XRunTool(w http.ResponseWriter, r *http.Request)
	// Delete tool
	// (DELETE /x-tools/{id})
	XDeleteTool(w http.ResponseWriter, r *http.Request, id string)
	// Get tool
	// (GET /x-tools/{id})
	XGetTool(w http.ResponseWriter, r *http.Request, id string)
	// Modify tool
	// (POST /x-tools/{id})
	XModifyTool(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListAssistants operation middleware
func (siw *ServerInterfaceWrapper) ListAssistants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAssistantsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAssistants(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateAssistant operation middleware
func (siw *ServerInterfaceWrapper) CreateAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAssistant(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteAssistant operation middleware
func (siw *ServerInterfaceWrapper) DeleteAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAssistant(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAssistant operation middleware
func (siw *ServerInterfaceWrapper) GetAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAssistant(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyAssistant operation middleware
func (siw *ServerInterfaceWrapper) ModifyAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyAssistant(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListAssistantFiles operation middleware
func (siw *ServerInterfaceWrapper) ListAssistantFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAssistantFilesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAssistantFiles(w, r, assistantId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateAssistantFile operation middleware
func (siw *ServerInterfaceWrapper) CreateAssistantFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAssistantFile(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteAssistantFile operation middleware
func (siw *ServerInterfaceWrapper) DeleteAssistantFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAssistantFile(w, r, assistantId, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAssistantFile operation middleware
func (siw *ServerInterfaceWrapper) GetAssistantFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAssistantFile(w, r, assistantId, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSpeech operation middleware
func (siw *ServerInterfaceWrapper) CreateSpeech(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSpeech(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTranscription operation middleware
func (siw *ServerInterfaceWrapper) CreateTranscription(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTranscription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTranslation operation middleware
func (siw *ServerInterfaceWrapper) CreateTranslation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTranslation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateChatCompletion operation middleware
func (siw *ServerInterfaceWrapper) CreateChatCompletion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateChatCompletion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCompletion operation middleware
func (siw *ServerInterfaceWrapper) CreateCompletion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCompletion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateEmbedding operation middleware
func (siw *ServerInterfaceWrapper) CreateEmbedding(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEmbedding(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFiles operation middleware
func (siw *ServerInterfaceWrapper) ListFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFilesParams

	// ------------- Optional query parameter "purpose" -------------

	err = runtime.BindQueryParameter("form", true, false, "purpose", r.URL.Query(), &params.Purpose)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "purpose", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFiles(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFile operation middleware
func (siw *ServerInterfaceWrapper) CreateFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFile operation middleware
func (siw *ServerInterfaceWrapper) DeleteFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFile(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetrieveFile operation middleware
func (siw *ServerInterfaceWrapper) RetrieveFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveFile(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DownloadFile operation middleware
func (siw *ServerInterfaceWrapper) DownloadFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DownloadFile(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPaginatedFineTuningJobs operation middleware
func (siw *ServerInterfaceWrapper) ListPaginatedFineTuningJobs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPaginatedFineTuningJobsParams

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPaginatedFineTuningJobs(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFineTuningJob operation middleware
func (siw *ServerInterfaceWrapper) CreateFineTuningJob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFineTuningJob(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetrieveFineTuningJob operation middleware
func (siw *ServerInterfaceWrapper) RetrieveFineTuningJob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithOptions("simple", "fine_tuning_job_id", r.PathValue("fine_tuning_job_id"), &fineTuningJobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fine_tuning_job_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveFineTuningJob(w, r, fineTuningJobId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CancelFineTuningJob operation middleware
func (siw *ServerInterfaceWrapper) CancelFineTuningJob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithOptions("simple", "fine_tuning_job_id", r.PathValue("fine_tuning_job_id"), &fineTuningJobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fine_tuning_job_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelFineTuningJob(w, r, fineTuningJobId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFineTuningEvents operation middleware
func (siw *ServerInterfaceWrapper) ListFineTuningEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithOptions("simple", "fine_tuning_job_id", r.PathValue("fine_tuning_job_id"), &fineTuningJobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fine_tuning_job_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFineTuningEventsParams

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFineTuningEvents(w, r, fineTuningJobId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateImageEdit operation middleware
func (siw *ServerInterfaceWrapper) CreateImageEdit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateImageEdit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateImage operation middleware
func (siw *ServerInterfaceWrapper) CreateImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateImage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateImageVariation operation middleware
func (siw *ServerInterfaceWrapper) CreateImageVariation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateImageVariation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListModels operation middleware
func (siw *ServerInterfaceWrapper) ListModels(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListModels(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteModel operation middleware
func (siw *ServerInterfaceWrapper) DeleteModel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "model" -------------
	var model string

	err = runtime.BindStyledParameterWithOptions("simple", "model", r.PathValue("model"), &model, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "model", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteModel(w, r, model)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetrieveModel operation middleware
func (siw *ServerInterfaceWrapper) RetrieveModel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "model" -------------
	var model string

	err = runtime.BindStyledParameterWithOptions("simple", "model", r.PathValue("model"), &model, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "model", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveModel(w, r, model)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateModeration operation middleware
func (siw *ServerInterfaceWrapper) CreateModeration(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateModeration(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateThread operation middleware
func (siw *ServerInterfaceWrapper) CreateThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateThread(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateThreadAndRun operation middleware
func (siw *ServerInterfaceWrapper) CreateThreadAndRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateThreadAndRun(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteThread operation middleware
func (siw *ServerInterfaceWrapper) DeleteThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetThread operation middleware
func (siw *ServerInterfaceWrapper) GetThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyThread operation middleware
func (siw *ServerInterfaceWrapper) ModifyThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMessages operation middleware
func (siw *ServerInterfaceWrapper) ListMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMessagesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMessages(w, r, threadId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMessage operation middleware
func (siw *ServerInterfaceWrapper) CreateMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMessage(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMessage operation middleware
func (siw *ServerInterfaceWrapper) GetMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessage(w, r, threadId, messageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyMessage operation middleware
func (siw *ServerInterfaceWrapper) ModifyMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyMessage(w, r, threadId, messageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMessageFiles operation middleware
func (siw *ServerInterfaceWrapper) ListMessageFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMessageFilesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMessageFiles(w, r, threadId, messageId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMessageFile operation middleware
func (siw *ServerInterfaceWrapper) GetMessageFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessageFile(w, r, threadId, messageId, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRuns operation middleware
func (siw *ServerInterfaceWrapper) ListRuns(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRunsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRuns(w, r, threadId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateRun operation middleware
func (siw *ServerInterfaceWrapper) CreateRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRun(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRun operation middleware
func (siw *ServerInterfaceWrapper) GetRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyRun operation middleware
func (siw *ServerInterfaceWrapper) ModifyRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CancelRun operation middleware
func (siw *ServerInterfaceWrapper) CancelRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRunSteps operation middleware
func (siw *ServerInterfaceWrapper) ListRunSteps(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRunStepsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRunSteps(w, r, threadId, runId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRunStep operation middleware
func (siw *ServerInterfaceWrapper) GetRunStep(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	// ------------- Path parameter "step_id" -------------
	var stepId string

	err = runtime.BindStyledParameterWithOptions("simple", "step_id", r.PathValue("step_id"), &stepId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "step_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunStep(w, r, threadId, runId, stepId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XListRunStepEvents operation middleware
func (siw *ServerInterfaceWrapper) XListRunStepEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	// ------------- Path parameter "step_id" -------------
	var stepId string

	err = runtime.BindStyledParameterWithOptions("simple", "step_id", r.PathValue("step_id"), &stepId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "step_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XListRunStepEventsParams

	// ------------- Optional query parameter "stream" -------------

	err = runtime.BindQueryParameter("form", true, false, "stream", r.URL.Query(), &params.Stream)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stream", Err: err})
		return
	}

	// ------------- Optional query parameter "index" -------------

	err = runtime.BindQueryParameter("form", true, false, "index", r.URL.Query(), &params.Index)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "index", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XListRunStepEvents(w, r, threadId, runId, stepId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SubmitToolOuputsToRun operation middleware
func (siw *ServerInterfaceWrapper) SubmitToolOuputsToRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubmitToolOuputsToRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XStreamRun operation middleware
func (siw *ServerInterfaceWrapper) XStreamRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XStreamRunParams

	// ------------- Optional query parameter "index" -------------

	err = runtime.BindQueryParameter("form", true, false, "index", r.URL.Query(), &params.Index)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "index", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XStreamRun(w, r, threadId, runId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XListThreads operation middleware
func (siw *ServerInterfaceWrapper) XListThreads(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XListThreadsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XListThreads(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XListTools operation middleware
func (siw *ServerInterfaceWrapper) XListTools(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XListToolsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XListTools(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XCreateTool operation middleware
func (siw *ServerInterfaceWrapper) XCreateTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XCreateTool(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XInspectTool operation middleware
func (siw *ServerInterfaceWrapper) XInspectTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XInspectTool(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XRunTool operation middleware
func (siw *ServerInterfaceWrapper) XRunTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XRunTool(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XDeleteTool operation middleware
func (siw *ServerInterfaceWrapper) XDeleteTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XDeleteTool(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XGetTool operation middleware
func (siw *ServerInterfaceWrapper) XGetTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XGetTool(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XModifyTool operation middleware
func (siw *ServerInterfaceWrapper) XModifyTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XModifyTool(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/assistants", wrapper.ListAssistants)
	m.HandleFunc("POST "+options.BaseURL+"/assistants", wrapper.CreateAssistant)
	m.HandleFunc("DELETE "+options.BaseURL+"/assistants/{assistant_id}", wrapper.DeleteAssistant)
	m.HandleFunc("GET "+options.BaseURL+"/assistants/{assistant_id}", wrapper.GetAssistant)
	m.HandleFunc("POST "+options.BaseURL+"/assistants/{assistant_id}", wrapper.ModifyAssistant)
	m.HandleFunc("GET "+options.BaseURL+"/assistants/{assistant_id}/files", wrapper.ListAssistantFiles)
	m.HandleFunc("POST "+options.BaseURL+"/assistants/{assistant_id}/files", wrapper.CreateAssistantFile)
	m.HandleFunc("DELETE "+options.BaseURL+"/assistants/{assistant_id}/files/{file_id}", wrapper.DeleteAssistantFile)
	m.HandleFunc("GET "+options.BaseURL+"/assistants/{assistant_id}/files/{file_id}", wrapper.GetAssistantFile)
	m.HandleFunc("POST "+options.BaseURL+"/audio/speech", wrapper.CreateSpeech)
	m.HandleFunc("POST "+options.BaseURL+"/audio/transcriptions", wrapper.CreateTranscription)
	m.HandleFunc("POST "+options.BaseURL+"/audio/translations", wrapper.CreateTranslation)
	m.HandleFunc("POST "+options.BaseURL+"/chat/completions", wrapper.CreateChatCompletion)
	m.HandleFunc("POST "+options.BaseURL+"/completions", wrapper.CreateCompletion)
	m.HandleFunc("POST "+options.BaseURL+"/embeddings", wrapper.CreateEmbedding)
	m.HandleFunc("GET "+options.BaseURL+"/files", wrapper.ListFiles)
	m.HandleFunc("POST "+options.BaseURL+"/files", wrapper.CreateFile)
	m.HandleFunc("DELETE "+options.BaseURL+"/files/{file_id}", wrapper.DeleteFile)
	m.HandleFunc("GET "+options.BaseURL+"/files/{file_id}", wrapper.RetrieveFile)
	m.HandleFunc("GET "+options.BaseURL+"/files/{file_id}/content", wrapper.DownloadFile)
	m.HandleFunc("GET "+options.BaseURL+"/fine_tuning/jobs", wrapper.ListPaginatedFineTuningJobs)
	m.HandleFunc("POST "+options.BaseURL+"/fine_tuning/jobs", wrapper.CreateFineTuningJob)
	m.HandleFunc("GET "+options.BaseURL+"/fine_tuning/jobs/{fine_tuning_job_id}", wrapper.RetrieveFineTuningJob)
	m.HandleFunc("POST "+options.BaseURL+"/fine_tuning/jobs/{fine_tuning_job_id}/cancel", wrapper.CancelFineTuningJob)
	m.HandleFunc("GET "+options.BaseURL+"/fine_tuning/jobs/{fine_tuning_job_id}/events", wrapper.ListFineTuningEvents)
	m.HandleFunc("POST "+options.BaseURL+"/images/edits", wrapper.CreateImageEdit)
	m.HandleFunc("POST "+options.BaseURL+"/images/generations", wrapper.CreateImage)
	m.HandleFunc("POST "+options.BaseURL+"/images/variations", wrapper.CreateImageVariation)
	m.HandleFunc("GET "+options.BaseURL+"/models", wrapper.ListModels)
	m.HandleFunc("DELETE "+options.BaseURL+"/models/{model}", wrapper.DeleteModel)
	m.HandleFunc("GET "+options.BaseURL+"/models/{model}", wrapper.RetrieveModel)
	m.HandleFunc("POST "+options.BaseURL+"/moderations", wrapper.CreateModeration)
	m.HandleFunc("POST "+options.BaseURL+"/threads", wrapper.CreateThread)
	m.HandleFunc("POST "+options.BaseURL+"/threads/runs", wrapper.CreateThreadAndRun)
	m.HandleFunc("DELETE "+options.BaseURL+"/threads/{thread_id}", wrapper.DeleteThread)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}", wrapper.GetThread)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}", wrapper.ModifyThread)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages", wrapper.ListMessages)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/messages", wrapper.CreateMessage)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}", wrapper.GetMessage)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}", wrapper.ModifyMessage)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}/files", wrapper.ListMessageFiles)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}/files/{file_id}", wrapper.GetMessageFile)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs", wrapper.ListRuns)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs", wrapper.CreateRun)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}", wrapper.GetRun)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}", wrapper.ModifyRun)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/cancel", wrapper.CancelRun)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/steps", wrapper.ListRunSteps)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/steps/{step_id}", wrapper.GetRunStep)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/steps/{step_id}/x-events", wrapper.XListRunStepEvents)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/submit_tool_outputs", wrapper.SubmitToolOuputsToRun)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/x-stream", wrapper.XStreamRun)
	m.HandleFunc("GET "+options.BaseURL+"/x-threads", wrapper.XListThreads)
	m.HandleFunc("GET "+options.BaseURL+"/x-tools", wrapper.XListTools)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools", wrapper.XCreateTool)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools/inspect", wrapper.XInspectTool)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools/run", wrapper.XRunTool)
	m.HandleFunc("DELETE "+options.BaseURL+"/x-tools/{id}", wrapper.XDeleteTool)
	m.HandleFunc("GET "+options.BaseURL+"/x-tools/{id}", wrapper.XGetTool)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools/{id}", wrapper.XModifyTool)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
