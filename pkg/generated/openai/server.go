// Package openai provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version (devel) DO NOT EDIT.
package openai

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of assistants.
	// (GET /assistants)
	ListAssistants(w http.ResponseWriter, r *http.Request, params ListAssistantsParams)
	// Create an assistant with a model and instructions.
	// (POST /assistants)
	CreateAssistant(w http.ResponseWriter, r *http.Request)
	// Delete an assistant.
	// (DELETE /assistants/{assistant_id})
	DeleteAssistant(w http.ResponseWriter, r *http.Request, assistantId string)
	// Retrieves an assistant.
	// (GET /assistants/{assistant_id})
	GetAssistant(w http.ResponseWriter, r *http.Request, assistantId string)
	// Modifies an assistant.
	// (POST /assistants/{assistant_id})
	ModifyAssistant(w http.ResponseWriter, r *http.Request, assistantId string)
	// Returns a list of assistant files.
	// (GET /assistants/{assistant_id}/files)
	ListAssistantFiles(w http.ResponseWriter, r *http.Request, assistantId string, params ListAssistantFilesParams)
	// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
	// (POST /assistants/{assistant_id}/files)
	CreateAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string)
	// Delete an assistant file.
	// (DELETE /assistants/{assistant_id}/files/{file_id})
	DeleteAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string, fileId string)
	// Retrieves an AssistantFile.
	// (GET /assistants/{assistant_id}/files/{file_id})
	GetAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string, fileId string)
	// Generates audio from the input text.
	// (POST /audio/speech)
	CreateSpeech(w http.ResponseWriter, r *http.Request)
	// Transcribes audio into the input language.
	// (POST /audio/transcriptions)
	CreateTranscription(w http.ResponseWriter, r *http.Request)
	// Translates audio into English.
	// (POST /audio/translations)
	CreateTranslation(w http.ResponseWriter, r *http.Request)
	// Creates a model response for the given chat conversation.
	// (POST /chat/completions)
	CreateChatCompletion(w http.ResponseWriter, r *http.Request)
	// Creates a completion for the provided prompt and parameters.
	// (POST /completions)
	CreateCompletion(w http.ResponseWriter, r *http.Request)
	// Creates an embedding vector representing the input text.
	// (POST /embeddings)
	CreateEmbedding(w http.ResponseWriter, r *http.Request)
	// Returns a list of files that belong to the user's organization.
	// (GET /files)
	ListFiles(w http.ResponseWriter, r *http.Request, params ListFilesParams)
	// Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.
	//
	// The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.
	//
	// Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
	// (POST /files)
	CreateFile(w http.ResponseWriter, r *http.Request)
	// Delete a file.
	// (DELETE /files/{file_id})
	DeleteFile(w http.ResponseWriter, r *http.Request, fileId string)
	// Returns information about a specific file.
	// (GET /files/{file_id})
	RetrieveFile(w http.ResponseWriter, r *http.Request, fileId string)
	// Returns the contents of the specified file.
	// (GET /files/{file_id}/content)
	DownloadFile(w http.ResponseWriter, r *http.Request, fileId string)
	// List your organization's fine-tuning jobs
	// (GET /fine_tuning/jobs)
	ListPaginatedFineTuningJobs(w http.ResponseWriter, r *http.Request, params ListPaginatedFineTuningJobsParams)
	// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
	//
	// Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
	//
	// [Learn more about fine-tuning](/docs/guides/fine-tuning)
	// (POST /fine_tuning/jobs)
	CreateFineTuningJob(w http.ResponseWriter, r *http.Request)
	// Get info about a fine-tuning job.
	//
	// [Learn more about fine-tuning](/docs/guides/fine-tuning)
	// (GET /fine_tuning/jobs/{fine_tuning_job_id})
	RetrieveFineTuningJob(w http.ResponseWriter, r *http.Request, fineTuningJobId string)
	// Immediately cancel a fine-tune job.
	// (POST /fine_tuning/jobs/{fine_tuning_job_id}/cancel)
	CancelFineTuningJob(w http.ResponseWriter, r *http.Request, fineTuningJobId string)
	// Get status updates for a fine-tuning job.
	// (GET /fine_tuning/jobs/{fine_tuning_job_id}/events)
	ListFineTuningEvents(w http.ResponseWriter, r *http.Request, fineTuningJobId string, params ListFineTuningEventsParams)
	// Creates an edited or extended image given an original image and a prompt.
	// (POST /images/edits)
	CreateImageEdit(w http.ResponseWriter, r *http.Request)
	// Creates an image given a prompt.
	// (POST /images/generations)
	CreateImage(w http.ResponseWriter, r *http.Request)
	// Creates a variation of a given image.
	// (POST /images/variations)
	CreateImageVariation(w http.ResponseWriter, r *http.Request)
	// Lists the currently available models, and provides basic information about each one such as the owner and availability.
	// (GET /models)
	ListModels(w http.ResponseWriter, r *http.Request)
	// Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
	// (DELETE /models/{model})
	DeleteModel(w http.ResponseWriter, r *http.Request, model string)
	// Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
	// (GET /models/{model})
	RetrieveModel(w http.ResponseWriter, r *http.Request, model string)
	// Classifies if text violates OpenAI's Content Policy
	// (POST /moderations)
	CreateModeration(w http.ResponseWriter, r *http.Request)
	// Create a thread.
	// (POST /threads)
	CreateThread(w http.ResponseWriter, r *http.Request)
	// Create a thread and run it in one request.
	// (POST /threads/runs)
	CreateThreadAndRun(w http.ResponseWriter, r *http.Request)
	// Delete a thread.
	// (DELETE /threads/{thread_id})
	DeleteThread(w http.ResponseWriter, r *http.Request, threadId string)
	// Retrieves a thread.
	// (GET /threads/{thread_id})
	GetThread(w http.ResponseWriter, r *http.Request, threadId string)
	// Modifies a thread.
	// (POST /threads/{thread_id})
	ModifyThread(w http.ResponseWriter, r *http.Request, threadId string)
	// Returns a list of messages for a given thread.
	// (GET /threads/{thread_id}/messages)
	ListMessages(w http.ResponseWriter, r *http.Request, threadId string, params ListMessagesParams)
	// Create a message.
	// (POST /threads/{thread_id}/messages)
	CreateMessage(w http.ResponseWriter, r *http.Request, threadId string)
	// Retrieve a message.
	// (GET /threads/{thread_id}/messages/{message_id})
	GetMessage(w http.ResponseWriter, r *http.Request, threadId string, messageId string)
	// Modifies a message.
	// (POST /threads/{thread_id}/messages/{message_id})
	ModifyMessage(w http.ResponseWriter, r *http.Request, threadId string, messageId string)
	// Returns a list of message files.
	// (GET /threads/{thread_id}/messages/{message_id}/files)
	ListMessageFiles(w http.ResponseWriter, r *http.Request, threadId string, messageId string, params ListMessageFilesParams)
	// Retrieves a message file.
	// (GET /threads/{thread_id}/messages/{message_id}/files/{file_id})
	GetMessageFile(w http.ResponseWriter, r *http.Request, threadId string, messageId string, fileId string)
	// Returns a list of runs belonging to a thread.
	// (GET /threads/{thread_id}/runs)
	ListRuns(w http.ResponseWriter, r *http.Request, threadId string, params ListRunsParams)
	// Create a run.
	// (POST /threads/{thread_id}/runs)
	CreateRun(w http.ResponseWriter, r *http.Request, threadId string)
	// Retrieves a run.
	// (GET /threads/{thread_id}/runs/{run_id})
	GetRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Modifies a run.
	// (POST /threads/{thread_id}/runs/{run_id})
	ModifyRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Cancels a run that is `in_progress`.
	// (POST /threads/{thread_id}/runs/{run_id}/cancel)
	CancelRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Returns a list of run steps belonging to a run.
	// (GET /threads/{thread_id}/runs/{run_id}/steps)
	ListRunSteps(w http.ResponseWriter, r *http.Request, threadId string, runId string, params ListRunStepsParams)
	// Retrieves a run step.
	// (GET /threads/{thread_id}/runs/{run_id}/steps/{step_id})
	GetRunStep(w http.ResponseWriter, r *http.Request, threadId string, runId string, stepId string)
	// When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
	// (POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs)
	SubmitToolOuputsToRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Returns a list of assistants.
// (GET /assistants)
func (_ Unimplemented) ListAssistants(w http.ResponseWriter, r *http.Request, params ListAssistantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create an assistant with a model and instructions.
// (POST /assistants)
func (_ Unimplemented) CreateAssistant(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an assistant.
// (DELETE /assistants/{assistant_id})
func (_ Unimplemented) DeleteAssistant(w http.ResponseWriter, r *http.Request, assistantId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieves an assistant.
// (GET /assistants/{assistant_id})
func (_ Unimplemented) GetAssistant(w http.ResponseWriter, r *http.Request, assistantId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Modifies an assistant.
// (POST /assistants/{assistant_id})
func (_ Unimplemented) ModifyAssistant(w http.ResponseWriter, r *http.Request, assistantId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Returns a list of assistant files.
// (GET /assistants/{assistant_id}/files)
func (_ Unimplemented) ListAssistantFiles(w http.ResponseWriter, r *http.Request, assistantId string, params ListAssistantFilesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
// (POST /assistants/{assistant_id}/files)
func (_ Unimplemented) CreateAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an assistant file.
// (DELETE /assistants/{assistant_id}/files/{file_id})
func (_ Unimplemented) DeleteAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string, fileId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieves an AssistantFile.
// (GET /assistants/{assistant_id}/files/{file_id})
func (_ Unimplemented) GetAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string, fileId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Generates audio from the input text.
// (POST /audio/speech)
func (_ Unimplemented) CreateSpeech(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Transcribes audio into the input language.
// (POST /audio/transcriptions)
func (_ Unimplemented) CreateTranscription(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Translates audio into English.
// (POST /audio/translations)
func (_ Unimplemented) CreateTranslation(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creates a model response for the given chat conversation.
// (POST /chat/completions)
func (_ Unimplemented) CreateChatCompletion(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creates a completion for the provided prompt and parameters.
// (POST /completions)
func (_ Unimplemented) CreateCompletion(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creates an embedding vector representing the input text.
// (POST /embeddings)
func (_ Unimplemented) CreateEmbedding(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Returns a list of files that belong to the user's organization.
// (GET /files)
func (_ Unimplemented) ListFiles(w http.ResponseWriter, r *http.Request, params ListFilesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.
//
// The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.
//
// Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
// (POST /files)
func (_ Unimplemented) CreateFile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a file.
// (DELETE /files/{file_id})
func (_ Unimplemented) DeleteFile(w http.ResponseWriter, r *http.Request, fileId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Returns information about a specific file.
// (GET /files/{file_id})
func (_ Unimplemented) RetrieveFile(w http.ResponseWriter, r *http.Request, fileId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Returns the contents of the specified file.
// (GET /files/{file_id}/content)
func (_ Unimplemented) DownloadFile(w http.ResponseWriter, r *http.Request, fileId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List your organization's fine-tuning jobs
// (GET /fine_tuning/jobs)
func (_ Unimplemented) ListPaginatedFineTuningJobs(w http.ResponseWriter, r *http.Request, params ListPaginatedFineTuningJobsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
//
// Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
//
// [Learn more about fine-tuning](/docs/guides/fine-tuning)
// (POST /fine_tuning/jobs)
func (_ Unimplemented) CreateFineTuningJob(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get info about a fine-tuning job.
//
// [Learn more about fine-tuning](/docs/guides/fine-tuning)
// (GET /fine_tuning/jobs/{fine_tuning_job_id})
func (_ Unimplemented) RetrieveFineTuningJob(w http.ResponseWriter, r *http.Request, fineTuningJobId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Immediately cancel a fine-tune job.
// (POST /fine_tuning/jobs/{fine_tuning_job_id}/cancel)
func (_ Unimplemented) CancelFineTuningJob(w http.ResponseWriter, r *http.Request, fineTuningJobId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get status updates for a fine-tuning job.
// (GET /fine_tuning/jobs/{fine_tuning_job_id}/events)
func (_ Unimplemented) ListFineTuningEvents(w http.ResponseWriter, r *http.Request, fineTuningJobId string, params ListFineTuningEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creates an edited or extended image given an original image and a prompt.
// (POST /images/edits)
func (_ Unimplemented) CreateImageEdit(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creates an image given a prompt.
// (POST /images/generations)
func (_ Unimplemented) CreateImage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creates a variation of a given image.
// (POST /images/variations)
func (_ Unimplemented) CreateImageVariation(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Lists the currently available models, and provides basic information about each one such as the owner and availability.
// (GET /models)
func (_ Unimplemented) ListModels(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
// (DELETE /models/{model})
func (_ Unimplemented) DeleteModel(w http.ResponseWriter, r *http.Request, model string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
// (GET /models/{model})
func (_ Unimplemented) RetrieveModel(w http.ResponseWriter, r *http.Request, model string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Classifies if text violates OpenAI's Content Policy
// (POST /moderations)
func (_ Unimplemented) CreateModeration(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a thread.
// (POST /threads)
func (_ Unimplemented) CreateThread(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a thread and run it in one request.
// (POST /threads/runs)
func (_ Unimplemented) CreateThreadAndRun(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a thread.
// (DELETE /threads/{thread_id})
func (_ Unimplemented) DeleteThread(w http.ResponseWriter, r *http.Request, threadId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieves a thread.
// (GET /threads/{thread_id})
func (_ Unimplemented) GetThread(w http.ResponseWriter, r *http.Request, threadId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Modifies a thread.
// (POST /threads/{thread_id})
func (_ Unimplemented) ModifyThread(w http.ResponseWriter, r *http.Request, threadId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Returns a list of messages for a given thread.
// (GET /threads/{thread_id}/messages)
func (_ Unimplemented) ListMessages(w http.ResponseWriter, r *http.Request, threadId string, params ListMessagesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a message.
// (POST /threads/{thread_id}/messages)
func (_ Unimplemented) CreateMessage(w http.ResponseWriter, r *http.Request, threadId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve a message.
// (GET /threads/{thread_id}/messages/{message_id})
func (_ Unimplemented) GetMessage(w http.ResponseWriter, r *http.Request, threadId string, messageId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Modifies a message.
// (POST /threads/{thread_id}/messages/{message_id})
func (_ Unimplemented) ModifyMessage(w http.ResponseWriter, r *http.Request, threadId string, messageId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Returns a list of message files.
// (GET /threads/{thread_id}/messages/{message_id}/files)
func (_ Unimplemented) ListMessageFiles(w http.ResponseWriter, r *http.Request, threadId string, messageId string, params ListMessageFilesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieves a message file.
// (GET /threads/{thread_id}/messages/{message_id}/files/{file_id})
func (_ Unimplemented) GetMessageFile(w http.ResponseWriter, r *http.Request, threadId string, messageId string, fileId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Returns a list of runs belonging to a thread.
// (GET /threads/{thread_id}/runs)
func (_ Unimplemented) ListRuns(w http.ResponseWriter, r *http.Request, threadId string, params ListRunsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a run.
// (POST /threads/{thread_id}/runs)
func (_ Unimplemented) CreateRun(w http.ResponseWriter, r *http.Request, threadId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieves a run.
// (GET /threads/{thread_id}/runs/{run_id})
func (_ Unimplemented) GetRun(w http.ResponseWriter, r *http.Request, threadId string, runId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Modifies a run.
// (POST /threads/{thread_id}/runs/{run_id})
func (_ Unimplemented) ModifyRun(w http.ResponseWriter, r *http.Request, threadId string, runId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Cancels a run that is `in_progress`.
// (POST /threads/{thread_id}/runs/{run_id}/cancel)
func (_ Unimplemented) CancelRun(w http.ResponseWriter, r *http.Request, threadId string, runId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Returns a list of run steps belonging to a run.
// (GET /threads/{thread_id}/runs/{run_id}/steps)
func (_ Unimplemented) ListRunSteps(w http.ResponseWriter, r *http.Request, threadId string, runId string, params ListRunStepsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieves a run step.
// (GET /threads/{thread_id}/runs/{run_id}/steps/{step_id})
func (_ Unimplemented) GetRunStep(w http.ResponseWriter, r *http.Request, threadId string, runId string, stepId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
// (POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs)
func (_ Unimplemented) SubmitToolOuputsToRun(w http.ResponseWriter, r *http.Request, threadId string, runId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListAssistants operation middleware
func (siw *ServerInterfaceWrapper) ListAssistants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAssistantsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAssistants(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateAssistant operation middleware
func (siw *ServerInterfaceWrapper) CreateAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAssistant(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteAssistant operation middleware
func (siw *ServerInterfaceWrapper) DeleteAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAssistant(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAssistant operation middleware
func (siw *ServerInterfaceWrapper) GetAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAssistant(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyAssistant operation middleware
func (siw *ServerInterfaceWrapper) ModifyAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyAssistant(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListAssistantFiles operation middleware
func (siw *ServerInterfaceWrapper) ListAssistantFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAssistantFilesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAssistantFiles(w, r, assistantId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateAssistantFile operation middleware
func (siw *ServerInterfaceWrapper) CreateAssistantFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAssistantFile(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteAssistantFile operation middleware
func (siw *ServerInterfaceWrapper) DeleteAssistantFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAssistantFile(w, r, assistantId, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAssistantFile operation middleware
func (siw *ServerInterfaceWrapper) GetAssistantFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAssistantFile(w, r, assistantId, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSpeech operation middleware
func (siw *ServerInterfaceWrapper) CreateSpeech(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSpeech(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTranscription operation middleware
func (siw *ServerInterfaceWrapper) CreateTranscription(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTranscription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTranslation operation middleware
func (siw *ServerInterfaceWrapper) CreateTranslation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTranslation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateChatCompletion operation middleware
func (siw *ServerInterfaceWrapper) CreateChatCompletion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateChatCompletion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCompletion operation middleware
func (siw *ServerInterfaceWrapper) CreateCompletion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCompletion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateEmbedding operation middleware
func (siw *ServerInterfaceWrapper) CreateEmbedding(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEmbedding(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFiles operation middleware
func (siw *ServerInterfaceWrapper) ListFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFilesParams

	// ------------- Optional query parameter "purpose" -------------

	err = runtime.BindQueryParameter("form", true, false, "purpose", r.URL.Query(), &params.Purpose)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "purpose", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFiles(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFile operation middleware
func (siw *ServerInterfaceWrapper) CreateFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFile operation middleware
func (siw *ServerInterfaceWrapper) DeleteFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFile(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetrieveFile operation middleware
func (siw *ServerInterfaceWrapper) RetrieveFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveFile(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DownloadFile operation middleware
func (siw *ServerInterfaceWrapper) DownloadFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DownloadFile(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPaginatedFineTuningJobs operation middleware
func (siw *ServerInterfaceWrapper) ListPaginatedFineTuningJobs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPaginatedFineTuningJobsParams

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPaginatedFineTuningJobs(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFineTuningJob operation middleware
func (siw *ServerInterfaceWrapper) CreateFineTuningJob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFineTuningJob(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetrieveFineTuningJob operation middleware
func (siw *ServerInterfaceWrapper) RetrieveFineTuningJob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithOptions("simple", "fine_tuning_job_id", r.PathValue("fine_tuning_job_id"), &fineTuningJobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fine_tuning_job_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveFineTuningJob(w, r, fineTuningJobId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CancelFineTuningJob operation middleware
func (siw *ServerInterfaceWrapper) CancelFineTuningJob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithOptions("simple", "fine_tuning_job_id", r.PathValue("fine_tuning_job_id"), &fineTuningJobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fine_tuning_job_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelFineTuningJob(w, r, fineTuningJobId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFineTuningEvents operation middleware
func (siw *ServerInterfaceWrapper) ListFineTuningEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithOptions("simple", "fine_tuning_job_id", r.PathValue("fine_tuning_job_id"), &fineTuningJobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fine_tuning_job_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFineTuningEventsParams

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFineTuningEvents(w, r, fineTuningJobId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateImageEdit operation middleware
func (siw *ServerInterfaceWrapper) CreateImageEdit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateImageEdit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateImage operation middleware
func (siw *ServerInterfaceWrapper) CreateImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateImage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateImageVariation operation middleware
func (siw *ServerInterfaceWrapper) CreateImageVariation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateImageVariation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListModels operation middleware
func (siw *ServerInterfaceWrapper) ListModels(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListModels(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteModel operation middleware
func (siw *ServerInterfaceWrapper) DeleteModel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "model" -------------
	var model string

	err = runtime.BindStyledParameterWithOptions("simple", "model", r.PathValue("model"), &model, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "model", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteModel(w, r, model)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetrieveModel operation middleware
func (siw *ServerInterfaceWrapper) RetrieveModel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "model" -------------
	var model string

	err = runtime.BindStyledParameterWithOptions("simple", "model", r.PathValue("model"), &model, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "model", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveModel(w, r, model)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateModeration operation middleware
func (siw *ServerInterfaceWrapper) CreateModeration(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateModeration(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateThread operation middleware
func (siw *ServerInterfaceWrapper) CreateThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateThread(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateThreadAndRun operation middleware
func (siw *ServerInterfaceWrapper) CreateThreadAndRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateThreadAndRun(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteThread operation middleware
func (siw *ServerInterfaceWrapper) DeleteThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetThread operation middleware
func (siw *ServerInterfaceWrapper) GetThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyThread operation middleware
func (siw *ServerInterfaceWrapper) ModifyThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMessages operation middleware
func (siw *ServerInterfaceWrapper) ListMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMessagesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMessages(w, r, threadId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMessage operation middleware
func (siw *ServerInterfaceWrapper) CreateMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMessage(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMessage operation middleware
func (siw *ServerInterfaceWrapper) GetMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessage(w, r, threadId, messageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyMessage operation middleware
func (siw *ServerInterfaceWrapper) ModifyMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyMessage(w, r, threadId, messageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMessageFiles operation middleware
func (siw *ServerInterfaceWrapper) ListMessageFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMessageFilesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMessageFiles(w, r, threadId, messageId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMessageFile operation middleware
func (siw *ServerInterfaceWrapper) GetMessageFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessageFile(w, r, threadId, messageId, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRuns operation middleware
func (siw *ServerInterfaceWrapper) ListRuns(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRunsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRuns(w, r, threadId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateRun operation middleware
func (siw *ServerInterfaceWrapper) CreateRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRun(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRun operation middleware
func (siw *ServerInterfaceWrapper) GetRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyRun operation middleware
func (siw *ServerInterfaceWrapper) ModifyRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CancelRun operation middleware
func (siw *ServerInterfaceWrapper) CancelRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRunSteps operation middleware
func (siw *ServerInterfaceWrapper) ListRunSteps(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRunStepsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRunSteps(w, r, threadId, runId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRunStep operation middleware
func (siw *ServerInterfaceWrapper) GetRunStep(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	// ------------- Path parameter "step_id" -------------
	var stepId string

	err = runtime.BindStyledParameterWithOptions("simple", "step_id", r.PathValue("step_id"), &stepId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "step_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunStep(w, r, threadId, runId, stepId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SubmitToolOuputsToRun operation middleware
func (siw *ServerInterfaceWrapper) SubmitToolOuputsToRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubmitToolOuputsToRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/assistants", wrapper.ListAssistants)
	m.HandleFunc("POST "+options.BaseURL+"/assistants", wrapper.CreateAssistant)
	m.HandleFunc("DELETE "+options.BaseURL+"/assistants/{assistant_id}", wrapper.DeleteAssistant)
	m.HandleFunc("GET "+options.BaseURL+"/assistants/{assistant_id}", wrapper.GetAssistant)
	m.HandleFunc("POST "+options.BaseURL+"/assistants/{assistant_id}", wrapper.ModifyAssistant)
	m.HandleFunc("GET "+options.BaseURL+"/assistants/{assistant_id}/files", wrapper.ListAssistantFiles)
	m.HandleFunc("POST "+options.BaseURL+"/assistants/{assistant_id}/files", wrapper.CreateAssistantFile)
	m.HandleFunc("DELETE "+options.BaseURL+"/assistants/{assistant_id}/files/{file_id}", wrapper.DeleteAssistantFile)
	m.HandleFunc("GET "+options.BaseURL+"/assistants/{assistant_id}/files/{file_id}", wrapper.GetAssistantFile)
	m.HandleFunc("POST "+options.BaseURL+"/audio/speech", wrapper.CreateSpeech)
	m.HandleFunc("POST "+options.BaseURL+"/audio/transcriptions", wrapper.CreateTranscription)
	m.HandleFunc("POST "+options.BaseURL+"/audio/translations", wrapper.CreateTranslation)
	m.HandleFunc("POST "+options.BaseURL+"/chat/completions", wrapper.CreateChatCompletion)
	m.HandleFunc("POST "+options.BaseURL+"/completions", wrapper.CreateCompletion)
	m.HandleFunc("POST "+options.BaseURL+"/embeddings", wrapper.CreateEmbedding)
	m.HandleFunc("GET "+options.BaseURL+"/files", wrapper.ListFiles)
	m.HandleFunc("POST "+options.BaseURL+"/files", wrapper.CreateFile)
	m.HandleFunc("DELETE "+options.BaseURL+"/files/{file_id}", wrapper.DeleteFile)
	m.HandleFunc("GET "+options.BaseURL+"/files/{file_id}", wrapper.RetrieveFile)
	m.HandleFunc("GET "+options.BaseURL+"/files/{file_id}/content", wrapper.DownloadFile)
	m.HandleFunc("GET "+options.BaseURL+"/fine_tuning/jobs", wrapper.ListPaginatedFineTuningJobs)
	m.HandleFunc("POST "+options.BaseURL+"/fine_tuning/jobs", wrapper.CreateFineTuningJob)
	m.HandleFunc("GET "+options.BaseURL+"/fine_tuning/jobs/{fine_tuning_job_id}", wrapper.RetrieveFineTuningJob)
	m.HandleFunc("POST "+options.BaseURL+"/fine_tuning/jobs/{fine_tuning_job_id}/cancel", wrapper.CancelFineTuningJob)
	m.HandleFunc("GET "+options.BaseURL+"/fine_tuning/jobs/{fine_tuning_job_id}/events", wrapper.ListFineTuningEvents)
	m.HandleFunc("POST "+options.BaseURL+"/images/edits", wrapper.CreateImageEdit)
	m.HandleFunc("POST "+options.BaseURL+"/images/generations", wrapper.CreateImage)
	m.HandleFunc("POST "+options.BaseURL+"/images/variations", wrapper.CreateImageVariation)
	m.HandleFunc("GET "+options.BaseURL+"/models", wrapper.ListModels)
	m.HandleFunc("DELETE "+options.BaseURL+"/models/{model}", wrapper.DeleteModel)
	m.HandleFunc("GET "+options.BaseURL+"/models/{model}", wrapper.RetrieveModel)
	m.HandleFunc("POST "+options.BaseURL+"/moderations", wrapper.CreateModeration)
	m.HandleFunc("POST "+options.BaseURL+"/threads", wrapper.CreateThread)
	m.HandleFunc("POST "+options.BaseURL+"/threads/runs", wrapper.CreateThreadAndRun)
	m.HandleFunc("DELETE "+options.BaseURL+"/threads/{thread_id}", wrapper.DeleteThread)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}", wrapper.GetThread)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}", wrapper.ModifyThread)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages", wrapper.ListMessages)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/messages", wrapper.CreateMessage)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}", wrapper.GetMessage)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}", wrapper.ModifyMessage)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}/files", wrapper.ListMessageFiles)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}/files/{file_id}", wrapper.GetMessageFile)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs", wrapper.ListRuns)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs", wrapper.CreateRun)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}", wrapper.GetRun)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}", wrapper.ModifyRun)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/cancel", wrapper.CancelRun)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/steps", wrapper.ListRunSteps)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/steps/{step_id}", wrapper.GetRunStep)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/submit_tool_outputs", wrapper.SubmitToolOuputsToRun)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
