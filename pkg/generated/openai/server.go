//go:build go1.22

// Package openai provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package openai

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of assistants.
	// (GET /assistants)
	ListAssistants(w http.ResponseWriter, r *http.Request, params ListAssistantsParams)
	// Create an assistant with a model and instructions.
	// (POST /assistants)
	CreateAssistant(w http.ResponseWriter, r *http.Request)
	// Delete an assistant.
	// (DELETE /assistants/{assistant_id})
	DeleteAssistant(w http.ResponseWriter, r *http.Request, assistantId string)
	// Retrieves an assistant.
	// (GET /assistants/{assistant_id})
	GetAssistant(w http.ResponseWriter, r *http.Request, assistantId string)
	// Modifies an assistant.
	// (POST /assistants/{assistant_id})
	ModifyAssistant(w http.ResponseWriter, r *http.Request, assistantId string)
	// Returns a list of assistant files.
	// (GET /assistants/{assistant_id}/files)
	ListAssistantFiles(w http.ResponseWriter, r *http.Request, assistantId string, params ListAssistantFilesParams)
	// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
	// (POST /assistants/{assistant_id}/files)
	CreateAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string)
	// Delete an assistant file.
	// (DELETE /assistants/{assistant_id}/files/{file_id})
	DeleteAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string, fileId string)
	// Retrieves an AssistantFile.
	// (GET /assistants/{assistant_id}/files/{file_id})
	GetAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string, fileId string)
	// Generates audio from the input text.
	// (POST /audio/speech)
	CreateSpeech(w http.ResponseWriter, r *http.Request)
	// Transcribes audio into the input language.
	// (POST /audio/transcriptions)
	CreateTranscription(w http.ResponseWriter, r *http.Request)
	// Translates audio into English.
	// (POST /audio/translations)
	CreateTranslation(w http.ResponseWriter, r *http.Request)
	// Creates a model response for the given chat conversation.
	// (POST /chat/completions)
	CreateChatCompletion(w http.ResponseWriter, r *http.Request)
	// Creates a completion for the provided prompt and parameters.
	// (POST /completions)
	CreateCompletion(w http.ResponseWriter, r *http.Request)
	// Creates an embedding vector representing the input text.
	// (POST /embeddings)
	CreateEmbedding(w http.ResponseWriter, r *http.Request)
	// Returns a list of files that belong to the user's organization.
	// (GET /files)
	ListFiles(w http.ResponseWriter, r *http.Request, params ListFilesParams)
	// Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.
	//
	// The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.
	//
	// Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
	// (POST /files)
	CreateFile(w http.ResponseWriter, r *http.Request)
	// Delete a file.
	// (DELETE /files/{file_id})
	DeleteFile(w http.ResponseWriter, r *http.Request, fileId string)
	// Returns information about a specific file.
	// (GET /files/{file_id})
	RetrieveFile(w http.ResponseWriter, r *http.Request, fileId string)
	// Returns the contents of the specified file.
	// (GET /files/{file_id}/content)
	DownloadFile(w http.ResponseWriter, r *http.Request, fileId string)
	// List your organization's fine-tuning jobs
	// (GET /fine_tuning/jobs)
	ListPaginatedFineTuningJobs(w http.ResponseWriter, r *http.Request, params ListPaginatedFineTuningJobsParams)
	// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
	//
	// Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
	//
	// [Learn more about fine-tuning](/docs/guides/fine-tuning)
	// (POST /fine_tuning/jobs)
	CreateFineTuningJob(w http.ResponseWriter, r *http.Request)
	// Get info about a fine-tuning job.
	//
	// [Learn more about fine-tuning](/docs/guides/fine-tuning)
	// (GET /fine_tuning/jobs/{fine_tuning_job_id})
	RetrieveFineTuningJob(w http.ResponseWriter, r *http.Request, fineTuningJobId string)
	// Immediately cancel a fine-tune job.
	// (POST /fine_tuning/jobs/{fine_tuning_job_id}/cancel)
	CancelFineTuningJob(w http.ResponseWriter, r *http.Request, fineTuningJobId string)
	// Get status updates for a fine-tuning job.
	// (GET /fine_tuning/jobs/{fine_tuning_job_id}/events)
	ListFineTuningEvents(w http.ResponseWriter, r *http.Request, fineTuningJobId string, params ListFineTuningEventsParams)
	// Creates an edited or extended image given an original image and a prompt.
	// (POST /images/edits)
	CreateImageEdit(w http.ResponseWriter, r *http.Request)
	// Creates an image given a prompt.
	// (POST /images/generations)
	CreateImage(w http.ResponseWriter, r *http.Request)
	// Creates a variation of a given image.
	// (POST /images/variations)
	CreateImageVariation(w http.ResponseWriter, r *http.Request)
	// Lists the currently available models, and provides basic information about each one such as the owner and availability.
	// (GET /models)
	ListModels(w http.ResponseWriter, r *http.Request)
	// Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
	// (DELETE /models/{model})
	DeleteModel(w http.ResponseWriter, r *http.Request, model string)
	// Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
	// (GET /models/{model})
	RetrieveModel(w http.ResponseWriter, r *http.Request, model string)
	// Classifies if text is potentially harmful.
	// (POST /moderations)
	CreateModeration(w http.ResponseWriter, r *http.Request)
	// Create a thread.
	// (POST /threads)
	CreateThread(w http.ResponseWriter, r *http.Request)
	// Create a thread and run it in one request.
	// (POST /threads/runs)
	CreateThreadAndRun(w http.ResponseWriter, r *http.Request)
	// Delete a thread.
	// (DELETE /threads/{thread_id})
	DeleteThread(w http.ResponseWriter, r *http.Request, threadId string)
	// Retrieves a thread.
	// (GET /threads/{thread_id})
	GetThread(w http.ResponseWriter, r *http.Request, threadId string)
	// Modifies a thread.
	// (POST /threads/{thread_id})
	ModifyThread(w http.ResponseWriter, r *http.Request, threadId string)
	// Returns a list of messages for a given thread.
	// (GET /threads/{thread_id}/messages)
	ListMessages(w http.ResponseWriter, r *http.Request, threadId string, params ListMessagesParams)
	// Create a message.
	// (POST /threads/{thread_id}/messages)
	CreateMessage(w http.ResponseWriter, r *http.Request, threadId string)
	// Retrieve a message.
	// (GET /threads/{thread_id}/messages/{message_id})
	GetMessage(w http.ResponseWriter, r *http.Request, threadId string, messageId string)
	// Modifies a message.
	// (POST /threads/{thread_id}/messages/{message_id})
	ModifyMessage(w http.ResponseWriter, r *http.Request, threadId string, messageId string)
	// Returns a list of message files.
	// (GET /threads/{thread_id}/messages/{message_id}/files)
	ListMessageFiles(w http.ResponseWriter, r *http.Request, threadId string, messageId string, params ListMessageFilesParams)
	// Retrieves a message file.
	// (GET /threads/{thread_id}/messages/{message_id}/files/{file_id})
	GetMessageFile(w http.ResponseWriter, r *http.Request, threadId string, messageId string, fileId string)
	// Returns a list of runs belonging to a thread.
	// (GET /threads/{thread_id}/runs)
	ListRuns(w http.ResponseWriter, r *http.Request, threadId string, params ListRunsParams)
	// Create a run.
	// (POST /threads/{thread_id}/runs)
	CreateRun(w http.ResponseWriter, r *http.Request, threadId string)
	// Retrieves a run.
	// (GET /threads/{thread_id}/runs/{run_id})
	GetRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Modifies a run.
	// (POST /threads/{thread_id}/runs/{run_id})
	ModifyRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Cancels a run that is `in_progress`.
	// (POST /threads/{thread_id}/runs/{run_id}/cancel)
	CancelRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Returns a list of run steps belonging to a run.
	// (GET /threads/{thread_id}/runs/{run_id}/steps)
	ListRunSteps(w http.ResponseWriter, r *http.Request, threadId string, runId string, params ListRunStepsParams)
	// Retrieves a run step.
	// (GET /threads/{thread_id}/runs/{run_id}/steps/{step_id})
	GetRunStep(w http.ResponseWriter, r *http.Request, threadId string, runId string, stepId string)
	// List run step events
	// (GET /threads/{thread_id}/runs/{run_id}/steps/{step_id}/x-events)
	XListRunStepEvents(w http.ResponseWriter, r *http.Request, threadId string, runId string, stepId string, params XListRunStepEventsParams)
	// When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
	// (POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs)
	SubmitToolOuputsToRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Stream run events when the run is in progress
	// (GET /threads/{thread_id}/runs/{run_id}/x-stream)
	XStreamRun(w http.ResponseWriter, r *http.Request, threadId string, runId string, params XStreamRunParams)
	// List threads
	// (GET /x-threads)
	XListThreads(w http.ResponseWriter, r *http.Request, params XListThreadsParams)
	// List tools
	// (GET /x-tools)
	XListTools(w http.ResponseWriter, r *http.Request, params XListToolsParams)
	// Creates a tool for use with gptscript engine.
	// (POST /x-tools)
	XCreateTool(w http.ResponseWriter, r *http.Request)
	// Inspect tool
	// (POST /x-tools/inspect)
	XInspectTool(w http.ResponseWriter, r *http.Request)
	// Run tool
	// (POST /x-tools/run)
	XRunTool(w http.ResponseWriter, r *http.Request)
	// Delete tool
	// (DELETE /x-tools/{id})
	XDeleteTool(w http.ResponseWriter, r *http.Request, id string)
	// Get tool
	// (GET /x-tools/{id})
	XGetTool(w http.ResponseWriter, r *http.Request, id string)
	// Modify tool
	// (POST /x-tools/{id})
	XModifyTool(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListAssistants operation middleware
func (siw *ServerInterfaceWrapper) ListAssistants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAssistantsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAssistants(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateAssistant operation middleware
func (siw *ServerInterfaceWrapper) CreateAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAssistant(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteAssistant operation middleware
func (siw *ServerInterfaceWrapper) DeleteAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAssistant(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAssistant operation middleware
func (siw *ServerInterfaceWrapper) GetAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAssistant(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyAssistant operation middleware
func (siw *ServerInterfaceWrapper) ModifyAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyAssistant(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListAssistantFiles operation middleware
func (siw *ServerInterfaceWrapper) ListAssistantFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAssistantFilesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAssistantFiles(w, r, assistantId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateAssistantFile operation middleware
func (siw *ServerInterfaceWrapper) CreateAssistantFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAssistantFile(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteAssistantFile operation middleware
func (siw *ServerInterfaceWrapper) DeleteAssistantFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAssistantFile(w, r, assistantId, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAssistantFile operation middleware
func (siw *ServerInterfaceWrapper) GetAssistantFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAssistantFile(w, r, assistantId, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSpeech operation middleware
func (siw *ServerInterfaceWrapper) CreateSpeech(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSpeech(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTranscription operation middleware
func (siw *ServerInterfaceWrapper) CreateTranscription(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTranscription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTranslation operation middleware
func (siw *ServerInterfaceWrapper) CreateTranslation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTranslation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateChatCompletion operation middleware
func (siw *ServerInterfaceWrapper) CreateChatCompletion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateChatCompletion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCompletion operation middleware
func (siw *ServerInterfaceWrapper) CreateCompletion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCompletion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateEmbedding operation middleware
func (siw *ServerInterfaceWrapper) CreateEmbedding(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEmbedding(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFiles operation middleware
func (siw *ServerInterfaceWrapper) ListFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFilesParams

	// ------------- Optional query parameter "purpose" -------------

	err = runtime.BindQueryParameter("form", true, false, "purpose", r.URL.Query(), &params.Purpose)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "purpose", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFiles(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFile operation middleware
func (siw *ServerInterfaceWrapper) CreateFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFile operation middleware
func (siw *ServerInterfaceWrapper) DeleteFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFile(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetrieveFile operation middleware
func (siw *ServerInterfaceWrapper) RetrieveFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveFile(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DownloadFile operation middleware
func (siw *ServerInterfaceWrapper) DownloadFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DownloadFile(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPaginatedFineTuningJobs operation middleware
func (siw *ServerInterfaceWrapper) ListPaginatedFineTuningJobs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPaginatedFineTuningJobsParams

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPaginatedFineTuningJobs(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFineTuningJob operation middleware
func (siw *ServerInterfaceWrapper) CreateFineTuningJob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFineTuningJob(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetrieveFineTuningJob operation middleware
func (siw *ServerInterfaceWrapper) RetrieveFineTuningJob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithOptions("simple", "fine_tuning_job_id", r.PathValue("fine_tuning_job_id"), &fineTuningJobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fine_tuning_job_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveFineTuningJob(w, r, fineTuningJobId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CancelFineTuningJob operation middleware
func (siw *ServerInterfaceWrapper) CancelFineTuningJob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithOptions("simple", "fine_tuning_job_id", r.PathValue("fine_tuning_job_id"), &fineTuningJobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fine_tuning_job_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelFineTuningJob(w, r, fineTuningJobId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFineTuningEvents operation middleware
func (siw *ServerInterfaceWrapper) ListFineTuningEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithOptions("simple", "fine_tuning_job_id", r.PathValue("fine_tuning_job_id"), &fineTuningJobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fine_tuning_job_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFineTuningEventsParams

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFineTuningEvents(w, r, fineTuningJobId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateImageEdit operation middleware
func (siw *ServerInterfaceWrapper) CreateImageEdit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateImageEdit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateImage operation middleware
func (siw *ServerInterfaceWrapper) CreateImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateImage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateImageVariation operation middleware
func (siw *ServerInterfaceWrapper) CreateImageVariation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateImageVariation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListModels operation middleware
func (siw *ServerInterfaceWrapper) ListModels(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListModels(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteModel operation middleware
func (siw *ServerInterfaceWrapper) DeleteModel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "model" -------------
	var model string

	err = runtime.BindStyledParameterWithOptions("simple", "model", r.PathValue("model"), &model, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "model", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteModel(w, r, model)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetrieveModel operation middleware
func (siw *ServerInterfaceWrapper) RetrieveModel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "model" -------------
	var model string

	err = runtime.BindStyledParameterWithOptions("simple", "model", r.PathValue("model"), &model, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "model", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveModel(w, r, model)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateModeration operation middleware
func (siw *ServerInterfaceWrapper) CreateModeration(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateModeration(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateThread operation middleware
func (siw *ServerInterfaceWrapper) CreateThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateThread(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateThreadAndRun operation middleware
func (siw *ServerInterfaceWrapper) CreateThreadAndRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateThreadAndRun(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteThread operation middleware
func (siw *ServerInterfaceWrapper) DeleteThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetThread operation middleware
func (siw *ServerInterfaceWrapper) GetThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyThread operation middleware
func (siw *ServerInterfaceWrapper) ModifyThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMessages operation middleware
func (siw *ServerInterfaceWrapper) ListMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMessagesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMessages(w, r, threadId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMessage operation middleware
func (siw *ServerInterfaceWrapper) CreateMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMessage(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMessage operation middleware
func (siw *ServerInterfaceWrapper) GetMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessage(w, r, threadId, messageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyMessage operation middleware
func (siw *ServerInterfaceWrapper) ModifyMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyMessage(w, r, threadId, messageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMessageFiles operation middleware
func (siw *ServerInterfaceWrapper) ListMessageFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMessageFilesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMessageFiles(w, r, threadId, messageId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMessageFile operation middleware
func (siw *ServerInterfaceWrapper) GetMessageFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessageFile(w, r, threadId, messageId, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRuns operation middleware
func (siw *ServerInterfaceWrapper) ListRuns(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRunsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRuns(w, r, threadId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateRun operation middleware
func (siw *ServerInterfaceWrapper) CreateRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRun(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRun operation middleware
func (siw *ServerInterfaceWrapper) GetRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyRun operation middleware
func (siw *ServerInterfaceWrapper) ModifyRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CancelRun operation middleware
func (siw *ServerInterfaceWrapper) CancelRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRunSteps operation middleware
func (siw *ServerInterfaceWrapper) ListRunSteps(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRunStepsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRunSteps(w, r, threadId, runId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRunStep operation middleware
func (siw *ServerInterfaceWrapper) GetRunStep(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	// ------------- Path parameter "step_id" -------------
	var stepId string

	err = runtime.BindStyledParameterWithOptions("simple", "step_id", r.PathValue("step_id"), &stepId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "step_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunStep(w, r, threadId, runId, stepId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XListRunStepEvents operation middleware
func (siw *ServerInterfaceWrapper) XListRunStepEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	// ------------- Path parameter "step_id" -------------
	var stepId string

	err = runtime.BindStyledParameterWithOptions("simple", "step_id", r.PathValue("step_id"), &stepId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "step_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XListRunStepEventsParams

	// ------------- Optional query parameter "stream" -------------

	err = runtime.BindQueryParameter("form", true, false, "stream", r.URL.Query(), &params.Stream)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stream", Err: err})
		return
	}

	// ------------- Optional query parameter "index" -------------

	err = runtime.BindQueryParameter("form", true, false, "index", r.URL.Query(), &params.Index)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "index", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XListRunStepEvents(w, r, threadId, runId, stepId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SubmitToolOuputsToRun operation middleware
func (siw *ServerInterfaceWrapper) SubmitToolOuputsToRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubmitToolOuputsToRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XStreamRun operation middleware
func (siw *ServerInterfaceWrapper) XStreamRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XStreamRunParams

	// ------------- Optional query parameter "index" -------------

	err = runtime.BindQueryParameter("form", true, false, "index", r.URL.Query(), &params.Index)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "index", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XStreamRun(w, r, threadId, runId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XListThreads operation middleware
func (siw *ServerInterfaceWrapper) XListThreads(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XListThreadsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XListThreads(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XListTools operation middleware
func (siw *ServerInterfaceWrapper) XListTools(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XListToolsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XListTools(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XCreateTool operation middleware
func (siw *ServerInterfaceWrapper) XCreateTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XCreateTool(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XInspectTool operation middleware
func (siw *ServerInterfaceWrapper) XInspectTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XInspectTool(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XRunTool operation middleware
func (siw *ServerInterfaceWrapper) XRunTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XRunTool(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XDeleteTool operation middleware
func (siw *ServerInterfaceWrapper) XDeleteTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XDeleteTool(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XGetTool operation middleware
func (siw *ServerInterfaceWrapper) XGetTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XGetTool(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XModifyTool operation middleware
func (siw *ServerInterfaceWrapper) XModifyTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XModifyTool(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/assistants", wrapper.ListAssistants)
	m.HandleFunc("POST "+options.BaseURL+"/assistants", wrapper.CreateAssistant)
	m.HandleFunc("DELETE "+options.BaseURL+"/assistants/{assistant_id}", wrapper.DeleteAssistant)
	m.HandleFunc("GET "+options.BaseURL+"/assistants/{assistant_id}", wrapper.GetAssistant)
	m.HandleFunc("POST "+options.BaseURL+"/assistants/{assistant_id}", wrapper.ModifyAssistant)
	m.HandleFunc("GET "+options.BaseURL+"/assistants/{assistant_id}/files", wrapper.ListAssistantFiles)
	m.HandleFunc("POST "+options.BaseURL+"/assistants/{assistant_id}/files", wrapper.CreateAssistantFile)
	m.HandleFunc("DELETE "+options.BaseURL+"/assistants/{assistant_id}/files/{file_id}", wrapper.DeleteAssistantFile)
	m.HandleFunc("GET "+options.BaseURL+"/assistants/{assistant_id}/files/{file_id}", wrapper.GetAssistantFile)
	m.HandleFunc("POST "+options.BaseURL+"/audio/speech", wrapper.CreateSpeech)
	m.HandleFunc("POST "+options.BaseURL+"/audio/transcriptions", wrapper.CreateTranscription)
	m.HandleFunc("POST "+options.BaseURL+"/audio/translations", wrapper.CreateTranslation)
	m.HandleFunc("POST "+options.BaseURL+"/chat/completions", wrapper.CreateChatCompletion)
	m.HandleFunc("POST "+options.BaseURL+"/completions", wrapper.CreateCompletion)
	m.HandleFunc("POST "+options.BaseURL+"/embeddings", wrapper.CreateEmbedding)
	m.HandleFunc("GET "+options.BaseURL+"/files", wrapper.ListFiles)
	m.HandleFunc("POST "+options.BaseURL+"/files", wrapper.CreateFile)
	m.HandleFunc("DELETE "+options.BaseURL+"/files/{file_id}", wrapper.DeleteFile)
	m.HandleFunc("GET "+options.BaseURL+"/files/{file_id}", wrapper.RetrieveFile)
	m.HandleFunc("GET "+options.BaseURL+"/files/{file_id}/content", wrapper.DownloadFile)
	m.HandleFunc("GET "+options.BaseURL+"/fine_tuning/jobs", wrapper.ListPaginatedFineTuningJobs)
	m.HandleFunc("POST "+options.BaseURL+"/fine_tuning/jobs", wrapper.CreateFineTuningJob)
	m.HandleFunc("GET "+options.BaseURL+"/fine_tuning/jobs/{fine_tuning_job_id}", wrapper.RetrieveFineTuningJob)
	m.HandleFunc("POST "+options.BaseURL+"/fine_tuning/jobs/{fine_tuning_job_id}/cancel", wrapper.CancelFineTuningJob)
	m.HandleFunc("GET "+options.BaseURL+"/fine_tuning/jobs/{fine_tuning_job_id}/events", wrapper.ListFineTuningEvents)
	m.HandleFunc("POST "+options.BaseURL+"/images/edits", wrapper.CreateImageEdit)
	m.HandleFunc("POST "+options.BaseURL+"/images/generations", wrapper.CreateImage)
	m.HandleFunc("POST "+options.BaseURL+"/images/variations", wrapper.CreateImageVariation)
	m.HandleFunc("GET "+options.BaseURL+"/models", wrapper.ListModels)
	m.HandleFunc("DELETE "+options.BaseURL+"/models/{model}", wrapper.DeleteModel)
	m.HandleFunc("GET "+options.BaseURL+"/models/{model}", wrapper.RetrieveModel)
	m.HandleFunc("POST "+options.BaseURL+"/moderations", wrapper.CreateModeration)
	m.HandleFunc("POST "+options.BaseURL+"/threads", wrapper.CreateThread)
	m.HandleFunc("POST "+options.BaseURL+"/threads/runs", wrapper.CreateThreadAndRun)
	m.HandleFunc("DELETE "+options.BaseURL+"/threads/{thread_id}", wrapper.DeleteThread)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}", wrapper.GetThread)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}", wrapper.ModifyThread)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages", wrapper.ListMessages)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/messages", wrapper.CreateMessage)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}", wrapper.GetMessage)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}", wrapper.ModifyMessage)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}/files", wrapper.ListMessageFiles)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}/files/{file_id}", wrapper.GetMessageFile)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs", wrapper.ListRuns)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs", wrapper.CreateRun)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}", wrapper.GetRun)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}", wrapper.ModifyRun)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/cancel", wrapper.CancelRun)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/steps", wrapper.ListRunSteps)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/steps/{step_id}", wrapper.GetRunStep)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/steps/{step_id}/x-events", wrapper.XListRunStepEvents)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/submit_tool_outputs", wrapper.SubmitToolOuputsToRun)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/x-stream", wrapper.XStreamRun)
	m.HandleFunc("GET "+options.BaseURL+"/x-threads", wrapper.XListThreads)
	m.HandleFunc("GET "+options.BaseURL+"/x-tools", wrapper.XListTools)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools", wrapper.XCreateTool)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools/inspect", wrapper.XInspectTool)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools/run", wrapper.XRunTool)
	m.HandleFunc("DELETE "+options.BaseURL+"/x-tools/{id}", wrapper.XDeleteTool)
	m.HandleFunc("GET "+options.BaseURL+"/x-tools/{id}", wrapper.XGetTool)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools/{id}", wrapper.XModifyTool)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"P0CdBAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
