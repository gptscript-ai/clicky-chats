//go:build go1.22

// Package openai provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package openai

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of assistants.
	// (GET /assistants)
	ListAssistants(w http.ResponseWriter, r *http.Request, params ListAssistantsParams)
	// Create an assistant with a model and instructions.
	// (POST /assistants)
	CreateAssistant(w http.ResponseWriter, r *http.Request)
	// Delete an assistant.
	// (DELETE /assistants/{assistant_id})
	DeleteAssistant(w http.ResponseWriter, r *http.Request, assistantId string)
	// Retrieves an assistant.
	// (GET /assistants/{assistant_id})
	GetAssistant(w http.ResponseWriter, r *http.Request, assistantId string)
	// Modifies an assistant.
	// (POST /assistants/{assistant_id})
	ModifyAssistant(w http.ResponseWriter, r *http.Request, assistantId string)
	// Returns a list of assistant files.
	// (GET /assistants/{assistant_id}/files)
	ListAssistantFiles(w http.ResponseWriter, r *http.Request, assistantId string, params ListAssistantFilesParams)
	// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
	// (POST /assistants/{assistant_id}/files)
	CreateAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string)
	// Delete an assistant file.
	// (DELETE /assistants/{assistant_id}/files/{file_id})
	DeleteAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string, fileId string)
	// Retrieves an AssistantFile.
	// (GET /assistants/{assistant_id}/files/{file_id})
	GetAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string, fileId string)
	// Generates audio from the input text.
	// (POST /audio/speech)
	CreateSpeech(w http.ResponseWriter, r *http.Request)
	// Transcribes audio into the input language.
	// (POST /audio/transcriptions)
	CreateTranscription(w http.ResponseWriter, r *http.Request)
	// Translates audio into English.
	// (POST /audio/translations)
	CreateTranslation(w http.ResponseWriter, r *http.Request)
	// Creates a model response for the given chat conversation.
	// (POST /chat/completions)
	CreateChatCompletion(w http.ResponseWriter, r *http.Request)
	// Creates a completion for the provided prompt and parameters.
	// (POST /completions)
	CreateCompletion(w http.ResponseWriter, r *http.Request)
	// Creates an embedding vector representing the input text.
	// (POST /embeddings)
	CreateEmbedding(w http.ResponseWriter, r *http.Request)
	// Returns a list of files that belong to the user's organization.
	// (GET /files)
	ListFiles(w http.ResponseWriter, r *http.Request, params ListFilesParams)
	// Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.
	//
	// The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.
	//
	// Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
	// (POST /files)
	CreateFile(w http.ResponseWriter, r *http.Request)
	// Delete a file.
	// (DELETE /files/{file_id})
	DeleteFile(w http.ResponseWriter, r *http.Request, fileId string)
	// Returns information about a specific file.
	// (GET /files/{file_id})
	RetrieveFile(w http.ResponseWriter, r *http.Request, fileId string)
	// Returns the contents of the specified file.
	// (GET /files/{file_id}/content)
	DownloadFile(w http.ResponseWriter, r *http.Request, fileId string)
	// List your organization's fine-tuning jobs
	// (GET /fine_tuning/jobs)
	ListPaginatedFineTuningJobs(w http.ResponseWriter, r *http.Request, params ListPaginatedFineTuningJobsParams)
	// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
	//
	// Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
	//
	// [Learn more about fine-tuning](/docs/guides/fine-tuning)
	// (POST /fine_tuning/jobs)
	CreateFineTuningJob(w http.ResponseWriter, r *http.Request)
	// Get info about a fine-tuning job.
	//
	// [Learn more about fine-tuning](/docs/guides/fine-tuning)
	// (GET /fine_tuning/jobs/{fine_tuning_job_id})
	RetrieveFineTuningJob(w http.ResponseWriter, r *http.Request, fineTuningJobId string)
	// Immediately cancel a fine-tune job.
	// (POST /fine_tuning/jobs/{fine_tuning_job_id}/cancel)
	CancelFineTuningJob(w http.ResponseWriter, r *http.Request, fineTuningJobId string)
	// Get status updates for a fine-tuning job.
	// (GET /fine_tuning/jobs/{fine_tuning_job_id}/events)
	ListFineTuningEvents(w http.ResponseWriter, r *http.Request, fineTuningJobId string, params ListFineTuningEventsParams)
	// Creates an edited or extended image given an original image and a prompt.
	// (POST /images/edits)
	CreateImageEdit(w http.ResponseWriter, r *http.Request)
	// Creates an image given a prompt.
	// (POST /images/generations)
	CreateImage(w http.ResponseWriter, r *http.Request)
	// Creates a variation of a given image.
	// (POST /images/variations)
	CreateImageVariation(w http.ResponseWriter, r *http.Request)
	// Lists the currently available models, and provides basic information about each one such as the owner and availability.
	// (GET /models)
	ListModels(w http.ResponseWriter, r *http.Request)
	// Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
	// (DELETE /models/{model})
	DeleteModel(w http.ResponseWriter, r *http.Request, model string)
	// Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
	// (GET /models/{model})
	RetrieveModel(w http.ResponseWriter, r *http.Request, model string)
	// Classifies if text is potentially harmful.
	// (POST /moderations)
	CreateModeration(w http.ResponseWriter, r *http.Request)
	// Create a thread.
	// (POST /threads)
	CreateThread(w http.ResponseWriter, r *http.Request)
	// Create a thread and run it in one request.
	// (POST /threads/runs)
	CreateThreadAndRun(w http.ResponseWriter, r *http.Request)
	// Delete a thread.
	// (DELETE /threads/{thread_id})
	DeleteThread(w http.ResponseWriter, r *http.Request, threadId string)
	// Retrieves a thread.
	// (GET /threads/{thread_id})
	GetThread(w http.ResponseWriter, r *http.Request, threadId string)
	// Modifies a thread.
	// (POST /threads/{thread_id})
	ModifyThread(w http.ResponseWriter, r *http.Request, threadId string)
	// Returns a list of messages for a given thread.
	// (GET /threads/{thread_id}/messages)
	ListMessages(w http.ResponseWriter, r *http.Request, threadId string, params ListMessagesParams)
	// Create a message.
	// (POST /threads/{thread_id}/messages)
	CreateMessage(w http.ResponseWriter, r *http.Request, threadId string)
	// Retrieve a message.
	// (GET /threads/{thread_id}/messages/{message_id})
	GetMessage(w http.ResponseWriter, r *http.Request, threadId string, messageId string)
	// Modifies a message.
	// (POST /threads/{thread_id}/messages/{message_id})
	ModifyMessage(w http.ResponseWriter, r *http.Request, threadId string, messageId string)
	// Returns a list of message files.
	// (GET /threads/{thread_id}/messages/{message_id}/files)
	ListMessageFiles(w http.ResponseWriter, r *http.Request, threadId string, messageId string, params ListMessageFilesParams)
	// Retrieves a message file.
	// (GET /threads/{thread_id}/messages/{message_id}/files/{file_id})
	GetMessageFile(w http.ResponseWriter, r *http.Request, threadId string, messageId string, fileId string)
	// Returns a list of runs belonging to a thread.
	// (GET /threads/{thread_id}/runs)
	ListRuns(w http.ResponseWriter, r *http.Request, threadId string, params ListRunsParams)
	// Create a run.
	// (POST /threads/{thread_id}/runs)
	CreateRun(w http.ResponseWriter, r *http.Request, threadId string)
	// Retrieves a run.
	// (GET /threads/{thread_id}/runs/{run_id})
	GetRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Modifies a run.
	// (POST /threads/{thread_id}/runs/{run_id})
	ModifyRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Cancels a run that is `in_progress`.
	// (POST /threads/{thread_id}/runs/{run_id}/cancel)
	CancelRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Returns a list of run steps belonging to a run.
	// (GET /threads/{thread_id}/runs/{run_id}/steps)
	ListRunSteps(w http.ResponseWriter, r *http.Request, threadId string, runId string, params ListRunStepsParams)
	// Retrieves a run step.
	// (GET /threads/{thread_id}/runs/{run_id}/steps/{step_id})
	GetRunStep(w http.ResponseWriter, r *http.Request, threadId string, runId string, stepId string)
	// List run step events
	// (GET /threads/{thread_id}/runs/{run_id}/steps/{step_id}/x-events)
	XListRunStepEvents(w http.ResponseWriter, r *http.Request, threadId string, runId string, stepId string, params XListRunStepEventsParams)
	// When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
	// (POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs)
	SubmitToolOuputsToRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// When a run has the `status: "requires_confirmation"` and `required_action.type` is `confirm`, this endpoint can be used to confirm or deny the tool call.
	// (POST /threads/{thread_id}/runs/{run_id}/x-confirm)
	XConfirmRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Stream run events when the run is in progress
	// (GET /threads/{thread_id}/runs/{run_id}/x-stream)
	XStreamRun(w http.ResponseWriter, r *http.Request, threadId string, runId string, params XStreamRunParams)
	// List threads
	// (GET /x-threads)
	XListThreads(w http.ResponseWriter, r *http.Request, params XListThreadsParams)
	// List tools
	// (GET /x-tools)
	XListTools(w http.ResponseWriter, r *http.Request, params XListToolsParams)
	// Creates a tool for use with gptscript engine.
	// (POST /x-tools)
	XCreateTool(w http.ResponseWriter, r *http.Request)
	// Inspect tool
	// (POST /x-tools/inspect)
	XInspectTool(w http.ResponseWriter, r *http.Request)
	// Run tool
	// (POST /x-tools/run)
	XRunTool(w http.ResponseWriter, r *http.Request)
	// Delete tool
	// (DELETE /x-tools/{id})
	XDeleteTool(w http.ResponseWriter, r *http.Request, id string)
	// Get tool
	// (GET /x-tools/{id})
	XGetTool(w http.ResponseWriter, r *http.Request, id string)
	// Modify tool
	// (POST /x-tools/{id})
	XModifyTool(w http.ResponseWriter, r *http.Request, id string)
	// Confirm tool run
	// (POST /x-tools/{tool_id}/confirm)
	XConfirmToolRun(w http.ResponseWriter, r *http.Request, toolId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListAssistants operation middleware
func (siw *ServerInterfaceWrapper) ListAssistants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAssistantsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAssistants(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateAssistant operation middleware
func (siw *ServerInterfaceWrapper) CreateAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAssistant(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteAssistant operation middleware
func (siw *ServerInterfaceWrapper) DeleteAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAssistant(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAssistant operation middleware
func (siw *ServerInterfaceWrapper) GetAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAssistant(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyAssistant operation middleware
func (siw *ServerInterfaceWrapper) ModifyAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyAssistant(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListAssistantFiles operation middleware
func (siw *ServerInterfaceWrapper) ListAssistantFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAssistantFilesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAssistantFiles(w, r, assistantId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateAssistantFile operation middleware
func (siw *ServerInterfaceWrapper) CreateAssistantFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAssistantFile(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteAssistantFile operation middleware
func (siw *ServerInterfaceWrapper) DeleteAssistantFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAssistantFile(w, r, assistantId, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAssistantFile operation middleware
func (siw *ServerInterfaceWrapper) GetAssistantFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAssistantFile(w, r, assistantId, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSpeech operation middleware
func (siw *ServerInterfaceWrapper) CreateSpeech(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSpeech(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTranscription operation middleware
func (siw *ServerInterfaceWrapper) CreateTranscription(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTranscription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTranslation operation middleware
func (siw *ServerInterfaceWrapper) CreateTranslation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTranslation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateChatCompletion operation middleware
func (siw *ServerInterfaceWrapper) CreateChatCompletion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateChatCompletion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCompletion operation middleware
func (siw *ServerInterfaceWrapper) CreateCompletion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCompletion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateEmbedding operation middleware
func (siw *ServerInterfaceWrapper) CreateEmbedding(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEmbedding(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFiles operation middleware
func (siw *ServerInterfaceWrapper) ListFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFilesParams

	// ------------- Optional query parameter "purpose" -------------

	err = runtime.BindQueryParameter("form", true, false, "purpose", r.URL.Query(), &params.Purpose)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "purpose", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFiles(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFile operation middleware
func (siw *ServerInterfaceWrapper) CreateFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFile operation middleware
func (siw *ServerInterfaceWrapper) DeleteFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFile(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetrieveFile operation middleware
func (siw *ServerInterfaceWrapper) RetrieveFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveFile(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DownloadFile operation middleware
func (siw *ServerInterfaceWrapper) DownloadFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DownloadFile(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPaginatedFineTuningJobs operation middleware
func (siw *ServerInterfaceWrapper) ListPaginatedFineTuningJobs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPaginatedFineTuningJobsParams

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPaginatedFineTuningJobs(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFineTuningJob operation middleware
func (siw *ServerInterfaceWrapper) CreateFineTuningJob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFineTuningJob(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetrieveFineTuningJob operation middleware
func (siw *ServerInterfaceWrapper) RetrieveFineTuningJob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithOptions("simple", "fine_tuning_job_id", r.PathValue("fine_tuning_job_id"), &fineTuningJobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fine_tuning_job_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveFineTuningJob(w, r, fineTuningJobId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CancelFineTuningJob operation middleware
func (siw *ServerInterfaceWrapper) CancelFineTuningJob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithOptions("simple", "fine_tuning_job_id", r.PathValue("fine_tuning_job_id"), &fineTuningJobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fine_tuning_job_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelFineTuningJob(w, r, fineTuningJobId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFineTuningEvents operation middleware
func (siw *ServerInterfaceWrapper) ListFineTuningEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithOptions("simple", "fine_tuning_job_id", r.PathValue("fine_tuning_job_id"), &fineTuningJobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fine_tuning_job_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFineTuningEventsParams

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFineTuningEvents(w, r, fineTuningJobId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateImageEdit operation middleware
func (siw *ServerInterfaceWrapper) CreateImageEdit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateImageEdit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateImage operation middleware
func (siw *ServerInterfaceWrapper) CreateImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateImage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateImageVariation operation middleware
func (siw *ServerInterfaceWrapper) CreateImageVariation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateImageVariation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListModels operation middleware
func (siw *ServerInterfaceWrapper) ListModels(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListModels(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteModel operation middleware
func (siw *ServerInterfaceWrapper) DeleteModel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "model" -------------
	var model string

	err = runtime.BindStyledParameterWithOptions("simple", "model", r.PathValue("model"), &model, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "model", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteModel(w, r, model)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetrieveModel operation middleware
func (siw *ServerInterfaceWrapper) RetrieveModel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "model" -------------
	var model string

	err = runtime.BindStyledParameterWithOptions("simple", "model", r.PathValue("model"), &model, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "model", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveModel(w, r, model)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateModeration operation middleware
func (siw *ServerInterfaceWrapper) CreateModeration(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateModeration(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateThread operation middleware
func (siw *ServerInterfaceWrapper) CreateThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateThread(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateThreadAndRun operation middleware
func (siw *ServerInterfaceWrapper) CreateThreadAndRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateThreadAndRun(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteThread operation middleware
func (siw *ServerInterfaceWrapper) DeleteThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetThread operation middleware
func (siw *ServerInterfaceWrapper) GetThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyThread operation middleware
func (siw *ServerInterfaceWrapper) ModifyThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMessages operation middleware
func (siw *ServerInterfaceWrapper) ListMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMessagesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMessages(w, r, threadId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMessage operation middleware
func (siw *ServerInterfaceWrapper) CreateMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMessage(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMessage operation middleware
func (siw *ServerInterfaceWrapper) GetMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessage(w, r, threadId, messageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyMessage operation middleware
func (siw *ServerInterfaceWrapper) ModifyMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyMessage(w, r, threadId, messageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMessageFiles operation middleware
func (siw *ServerInterfaceWrapper) ListMessageFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMessageFilesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMessageFiles(w, r, threadId, messageId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMessageFile operation middleware
func (siw *ServerInterfaceWrapper) GetMessageFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessageFile(w, r, threadId, messageId, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRuns operation middleware
func (siw *ServerInterfaceWrapper) ListRuns(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRunsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRuns(w, r, threadId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateRun operation middleware
func (siw *ServerInterfaceWrapper) CreateRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRun(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRun operation middleware
func (siw *ServerInterfaceWrapper) GetRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyRun operation middleware
func (siw *ServerInterfaceWrapper) ModifyRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CancelRun operation middleware
func (siw *ServerInterfaceWrapper) CancelRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRunSteps operation middleware
func (siw *ServerInterfaceWrapper) ListRunSteps(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRunStepsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRunSteps(w, r, threadId, runId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRunStep operation middleware
func (siw *ServerInterfaceWrapper) GetRunStep(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	// ------------- Path parameter "step_id" -------------
	var stepId string

	err = runtime.BindStyledParameterWithOptions("simple", "step_id", r.PathValue("step_id"), &stepId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "step_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunStep(w, r, threadId, runId, stepId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XListRunStepEvents operation middleware
func (siw *ServerInterfaceWrapper) XListRunStepEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	// ------------- Path parameter "step_id" -------------
	var stepId string

	err = runtime.BindStyledParameterWithOptions("simple", "step_id", r.PathValue("step_id"), &stepId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "step_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XListRunStepEventsParams

	// ------------- Optional query parameter "stream" -------------

	err = runtime.BindQueryParameter("form", true, false, "stream", r.URL.Query(), &params.Stream)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stream", Err: err})
		return
	}

	// ------------- Optional query parameter "index" -------------

	err = runtime.BindQueryParameter("form", true, false, "index", r.URL.Query(), &params.Index)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "index", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XListRunStepEvents(w, r, threadId, runId, stepId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SubmitToolOuputsToRun operation middleware
func (siw *ServerInterfaceWrapper) SubmitToolOuputsToRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubmitToolOuputsToRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XConfirmRun operation middleware
func (siw *ServerInterfaceWrapper) XConfirmRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XConfirmRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XStreamRun operation middleware
func (siw *ServerInterfaceWrapper) XStreamRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XStreamRunParams

	// ------------- Optional query parameter "index" -------------

	err = runtime.BindQueryParameter("form", true, false, "index", r.URL.Query(), &params.Index)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "index", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XStreamRun(w, r, threadId, runId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XListThreads operation middleware
func (siw *ServerInterfaceWrapper) XListThreads(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XListThreadsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XListThreads(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XListTools operation middleware
func (siw *ServerInterfaceWrapper) XListTools(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XListToolsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XListTools(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XCreateTool operation middleware
func (siw *ServerInterfaceWrapper) XCreateTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XCreateTool(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XInspectTool operation middleware
func (siw *ServerInterfaceWrapper) XInspectTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XInspectTool(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XRunTool operation middleware
func (siw *ServerInterfaceWrapper) XRunTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XRunTool(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XDeleteTool operation middleware
func (siw *ServerInterfaceWrapper) XDeleteTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XDeleteTool(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XGetTool operation middleware
func (siw *ServerInterfaceWrapper) XGetTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XGetTool(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XModifyTool operation middleware
func (siw *ServerInterfaceWrapper) XModifyTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XModifyTool(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XConfirmToolRun operation middleware
func (siw *ServerInterfaceWrapper) XConfirmToolRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tool_id" -------------
	var toolId string

	err = runtime.BindStyledParameterWithOptions("simple", "tool_id", r.PathValue("tool_id"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tool_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XConfirmToolRun(w, r, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/assistants", wrapper.ListAssistants)
	m.HandleFunc("POST "+options.BaseURL+"/assistants", wrapper.CreateAssistant)
	m.HandleFunc("DELETE "+options.BaseURL+"/assistants/{assistant_id}", wrapper.DeleteAssistant)
	m.HandleFunc("GET "+options.BaseURL+"/assistants/{assistant_id}", wrapper.GetAssistant)
	m.HandleFunc("POST "+options.BaseURL+"/assistants/{assistant_id}", wrapper.ModifyAssistant)
	m.HandleFunc("GET "+options.BaseURL+"/assistants/{assistant_id}/files", wrapper.ListAssistantFiles)
	m.HandleFunc("POST "+options.BaseURL+"/assistants/{assistant_id}/files", wrapper.CreateAssistantFile)
	m.HandleFunc("DELETE "+options.BaseURL+"/assistants/{assistant_id}/files/{file_id}", wrapper.DeleteAssistantFile)
	m.HandleFunc("GET "+options.BaseURL+"/assistants/{assistant_id}/files/{file_id}", wrapper.GetAssistantFile)
	m.HandleFunc("POST "+options.BaseURL+"/audio/speech", wrapper.CreateSpeech)
	m.HandleFunc("POST "+options.BaseURL+"/audio/transcriptions", wrapper.CreateTranscription)
	m.HandleFunc("POST "+options.BaseURL+"/audio/translations", wrapper.CreateTranslation)
	m.HandleFunc("POST "+options.BaseURL+"/chat/completions", wrapper.CreateChatCompletion)
	m.HandleFunc("POST "+options.BaseURL+"/completions", wrapper.CreateCompletion)
	m.HandleFunc("POST "+options.BaseURL+"/embeddings", wrapper.CreateEmbedding)
	m.HandleFunc("GET "+options.BaseURL+"/files", wrapper.ListFiles)
	m.HandleFunc("POST "+options.BaseURL+"/files", wrapper.CreateFile)
	m.HandleFunc("DELETE "+options.BaseURL+"/files/{file_id}", wrapper.DeleteFile)
	m.HandleFunc("GET "+options.BaseURL+"/files/{file_id}", wrapper.RetrieveFile)
	m.HandleFunc("GET "+options.BaseURL+"/files/{file_id}/content", wrapper.DownloadFile)
	m.HandleFunc("GET "+options.BaseURL+"/fine_tuning/jobs", wrapper.ListPaginatedFineTuningJobs)
	m.HandleFunc("POST "+options.BaseURL+"/fine_tuning/jobs", wrapper.CreateFineTuningJob)
	m.HandleFunc("GET "+options.BaseURL+"/fine_tuning/jobs/{fine_tuning_job_id}", wrapper.RetrieveFineTuningJob)
	m.HandleFunc("POST "+options.BaseURL+"/fine_tuning/jobs/{fine_tuning_job_id}/cancel", wrapper.CancelFineTuningJob)
	m.HandleFunc("GET "+options.BaseURL+"/fine_tuning/jobs/{fine_tuning_job_id}/events", wrapper.ListFineTuningEvents)
	m.HandleFunc("POST "+options.BaseURL+"/images/edits", wrapper.CreateImageEdit)
	m.HandleFunc("POST "+options.BaseURL+"/images/generations", wrapper.CreateImage)
	m.HandleFunc("POST "+options.BaseURL+"/images/variations", wrapper.CreateImageVariation)
	m.HandleFunc("GET "+options.BaseURL+"/models", wrapper.ListModels)
	m.HandleFunc("DELETE "+options.BaseURL+"/models/{model}", wrapper.DeleteModel)
	m.HandleFunc("GET "+options.BaseURL+"/models/{model}", wrapper.RetrieveModel)
	m.HandleFunc("POST "+options.BaseURL+"/moderations", wrapper.CreateModeration)
	m.HandleFunc("POST "+options.BaseURL+"/threads", wrapper.CreateThread)
	m.HandleFunc("POST "+options.BaseURL+"/threads/runs", wrapper.CreateThreadAndRun)
	m.HandleFunc("DELETE "+options.BaseURL+"/threads/{thread_id}", wrapper.DeleteThread)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}", wrapper.GetThread)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}", wrapper.ModifyThread)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages", wrapper.ListMessages)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/messages", wrapper.CreateMessage)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}", wrapper.GetMessage)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}", wrapper.ModifyMessage)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}/files", wrapper.ListMessageFiles)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}/files/{file_id}", wrapper.GetMessageFile)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs", wrapper.ListRuns)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs", wrapper.CreateRun)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}", wrapper.GetRun)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}", wrapper.ModifyRun)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/cancel", wrapper.CancelRun)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/steps", wrapper.ListRunSteps)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/steps/{step_id}", wrapper.GetRunStep)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/steps/{step_id}/x-events", wrapper.XListRunStepEvents)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/submit_tool_outputs", wrapper.SubmitToolOuputsToRun)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/x-confirm", wrapper.XConfirmRun)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/x-stream", wrapper.XStreamRun)
	m.HandleFunc("GET "+options.BaseURL+"/x-threads", wrapper.XListThreads)
	m.HandleFunc("GET "+options.BaseURL+"/x-tools", wrapper.XListTools)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools", wrapper.XCreateTool)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools/inspect", wrapper.XInspectTool)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools/run", wrapper.XRunTool)
	m.HandleFunc("DELETE "+options.BaseURL+"/x-tools/{id}", wrapper.XDeleteTool)
	m.HandleFunc("GET "+options.BaseURL+"/x-tools/{id}", wrapper.XGetTool)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools/{id}", wrapper.XModifyTool)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools/{tool_id}/confirm", wrapper.XConfirmToolRun)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
