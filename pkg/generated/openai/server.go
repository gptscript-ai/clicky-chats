//go:build go1.22

// Package openai provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package openai

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of assistants.
	// (GET /assistants)
	ListAssistants(w http.ResponseWriter, r *http.Request, params ListAssistantsParams)
	// Create an assistant with a model and instructions.
	// (POST /assistants)
	CreateAssistant(w http.ResponseWriter, r *http.Request)
	// Delete an assistant.
	// (DELETE /assistants/{assistant_id})
	DeleteAssistant(w http.ResponseWriter, r *http.Request, assistantId string)
	// Retrieves an assistant.
	// (GET /assistants/{assistant_id})
	GetAssistant(w http.ResponseWriter, r *http.Request, assistantId string)
	// Modifies an assistant.
	// (POST /assistants/{assistant_id})
	ModifyAssistant(w http.ResponseWriter, r *http.Request, assistantId string)
	// Returns a list of assistant files.
	// (GET /assistants/{assistant_id}/files)
	ListAssistantFiles(w http.ResponseWriter, r *http.Request, assistantId string, params ListAssistantFilesParams)
	// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
	// (POST /assistants/{assistant_id}/files)
	CreateAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string)
	// Delete an assistant file.
	// (DELETE /assistants/{assistant_id}/files/{file_id})
	DeleteAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string, fileId string)
	// Retrieves an AssistantFile.
	// (GET /assistants/{assistant_id}/files/{file_id})
	GetAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string, fileId string)
	// Generates audio from the input text.
	// (POST /audio/speech)
	CreateSpeech(w http.ResponseWriter, r *http.Request)
	// Transcribes audio into the input language.
	// (POST /audio/transcriptions)
	CreateTranscription(w http.ResponseWriter, r *http.Request)
	// Translates audio into English.
	// (POST /audio/translations)
	CreateTranslation(w http.ResponseWriter, r *http.Request)
	// Creates a model response for the given chat conversation.
	// (POST /chat/completions)
	CreateChatCompletion(w http.ResponseWriter, r *http.Request)
	// Creates a completion for the provided prompt and parameters.
	// (POST /completions)
	CreateCompletion(w http.ResponseWriter, r *http.Request)
	// Creates an embedding vector representing the input text.
	// (POST /embeddings)
	CreateEmbedding(w http.ResponseWriter, r *http.Request)
	// Returns a list of files that belong to the user's organization.
	// (GET /files)
	ListFiles(w http.ResponseWriter, r *http.Request, params ListFilesParams)
	// Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.
	//
	// The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.
	//
	// Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
	// (POST /files)
	CreateFile(w http.ResponseWriter, r *http.Request)
	// Delete a file.
	// (DELETE /files/{file_id})
	DeleteFile(w http.ResponseWriter, r *http.Request, fileId string)
	// Returns information about a specific file.
	// (GET /files/{file_id})
	RetrieveFile(w http.ResponseWriter, r *http.Request, fileId string)
	// Returns the contents of the specified file.
	// (GET /files/{file_id}/content)
	DownloadFile(w http.ResponseWriter, r *http.Request, fileId string)
	// List your organization's fine-tuning jobs
	// (GET /fine_tuning/jobs)
	ListPaginatedFineTuningJobs(w http.ResponseWriter, r *http.Request, params ListPaginatedFineTuningJobsParams)
	// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
	//
	// Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
	//
	// [Learn more about fine-tuning](/docs/guides/fine-tuning)
	// (POST /fine_tuning/jobs)
	CreateFineTuningJob(w http.ResponseWriter, r *http.Request)
	// Get info about a fine-tuning job.
	//
	// [Learn more about fine-tuning](/docs/guides/fine-tuning)
	// (GET /fine_tuning/jobs/{fine_tuning_job_id})
	RetrieveFineTuningJob(w http.ResponseWriter, r *http.Request, fineTuningJobId string)
	// Immediately cancel a fine-tune job.
	// (POST /fine_tuning/jobs/{fine_tuning_job_id}/cancel)
	CancelFineTuningJob(w http.ResponseWriter, r *http.Request, fineTuningJobId string)
	// Get status updates for a fine-tuning job.
	// (GET /fine_tuning/jobs/{fine_tuning_job_id}/events)
	ListFineTuningEvents(w http.ResponseWriter, r *http.Request, fineTuningJobId string, params ListFineTuningEventsParams)
	// Creates an edited or extended image given an original image and a prompt.
	// (POST /images/edits)
	CreateImageEdit(w http.ResponseWriter, r *http.Request)
	// Creates an image given a prompt.
	// (POST /images/generations)
	CreateImage(w http.ResponseWriter, r *http.Request)
	// Creates a variation of a given image.
	// (POST /images/variations)
	CreateImageVariation(w http.ResponseWriter, r *http.Request)
	// Lists the currently available models, and provides basic information about each one such as the owner and availability.
	// (GET /models)
	ListModels(w http.ResponseWriter, r *http.Request)
	// Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
	// (DELETE /models/{model})
	DeleteModel(w http.ResponseWriter, r *http.Request, model string)
	// Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
	// (GET /models/{model})
	RetrieveModel(w http.ResponseWriter, r *http.Request, model string)
	// Classifies if text is potentially harmful.
	// (POST /moderations)
	CreateModeration(w http.ResponseWriter, r *http.Request)
	// Create a thread.
	// (POST /threads)
	CreateThread(w http.ResponseWriter, r *http.Request)
	// Create a thread and run it in one request.
	// (POST /threads/runs)
	CreateThreadAndRun(w http.ResponseWriter, r *http.Request)
	// Delete a thread.
	// (DELETE /threads/{thread_id})
	DeleteThread(w http.ResponseWriter, r *http.Request, threadId string)
	// Retrieves a thread.
	// (GET /threads/{thread_id})
	GetThread(w http.ResponseWriter, r *http.Request, threadId string)
	// Modifies a thread.
	// (POST /threads/{thread_id})
	ModifyThread(w http.ResponseWriter, r *http.Request, threadId string)
	// Returns a list of messages for a given thread.
	// (GET /threads/{thread_id}/messages)
	ListMessages(w http.ResponseWriter, r *http.Request, threadId string, params ListMessagesParams)
	// Create a message.
	// (POST /threads/{thread_id}/messages)
	CreateMessage(w http.ResponseWriter, r *http.Request, threadId string)
	// Retrieve a message.
	// (GET /threads/{thread_id}/messages/{message_id})
	GetMessage(w http.ResponseWriter, r *http.Request, threadId string, messageId string)
	// Modifies a message.
	// (POST /threads/{thread_id}/messages/{message_id})
	ModifyMessage(w http.ResponseWriter, r *http.Request, threadId string, messageId string)
	// Returns a list of message files.
	// (GET /threads/{thread_id}/messages/{message_id}/files)
	ListMessageFiles(w http.ResponseWriter, r *http.Request, threadId string, messageId string, params ListMessageFilesParams)
	// Retrieves a message file.
	// (GET /threads/{thread_id}/messages/{message_id}/files/{file_id})
	GetMessageFile(w http.ResponseWriter, r *http.Request, threadId string, messageId string, fileId string)
	// Returns a list of runs belonging to a thread.
	// (GET /threads/{thread_id}/runs)
	ListRuns(w http.ResponseWriter, r *http.Request, threadId string, params ListRunsParams)
	// Create a run.
	// (POST /threads/{thread_id}/runs)
	CreateRun(w http.ResponseWriter, r *http.Request, threadId string)
	// Retrieves a run.
	// (GET /threads/{thread_id}/runs/{run_id})
	GetRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Modifies a run.
	// (POST /threads/{thread_id}/runs/{run_id})
	ModifyRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Cancels a run that is `in_progress`.
	// (POST /threads/{thread_id}/runs/{run_id}/cancel)
	CancelRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Returns a list of run steps belonging to a run.
	// (GET /threads/{thread_id}/runs/{run_id}/steps)
	ListRunSteps(w http.ResponseWriter, r *http.Request, threadId string, runId string, params ListRunStepsParams)
	// Retrieves a run step.
	// (GET /threads/{thread_id}/runs/{run_id}/steps/{step_id})
	GetRunStep(w http.ResponseWriter, r *http.Request, threadId string, runId string, stepId string)
	// List run step events
	// (GET /threads/{thread_id}/runs/{run_id}/steps/{step_id}/x-events)
	XListRunStepEvents(w http.ResponseWriter, r *http.Request, threadId string, runId string, stepId string, params XListRunStepEventsParams)
	// When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
	// (POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs)
	SubmitToolOuputsToRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// When a run has the `status: "requires_confirmation"` and `required_action.type` is `confirm`, this endpoint can be used to confirm or deny the tool call.
	// (POST /threads/{thread_id}/runs/{run_id}/x-confirm)
	XConfirmRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Stream run events when the run is in progress
	// (GET /threads/{thread_id}/runs/{run_id}/x-stream)
	XStreamRun(w http.ResponseWriter, r *http.Request, threadId string, runId string, params XStreamRunParams)
	// List threads
	// (GET /x-threads)
	XListThreads(w http.ResponseWriter, r *http.Request, params XListThreadsParams)
	// List tools
	// (GET /x-tools)
	XListTools(w http.ResponseWriter, r *http.Request, params XListToolsParams)
	// Creates a tool for use with gptscript engine.
	// (POST /x-tools)
	XCreateTool(w http.ResponseWriter, r *http.Request)
	// Inspect tool
	// (POST /x-tools/inspect)
	XInspectTool(w http.ResponseWriter, r *http.Request)
	// Run tool
	// (POST /x-tools/run)
	XRunTool(w http.ResponseWriter, r *http.Request)
	// Delete tool
	// (DELETE /x-tools/{id})
	XDeleteTool(w http.ResponseWriter, r *http.Request, id string)
	// Get tool
	// (GET /x-tools/{id})
	XGetTool(w http.ResponseWriter, r *http.Request, id string)
	// Modify tool
	// (POST /x-tools/{id})
	XModifyTool(w http.ResponseWriter, r *http.Request, id string)
	// Confirm tool run
	// (POST /x-tools/{tool_id}/confirm)
	XConfirmToolRun(w http.ResponseWriter, r *http.Request, toolId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListAssistants operation middleware
func (siw *ServerInterfaceWrapper) ListAssistants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAssistantsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAssistants(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateAssistant operation middleware
func (siw *ServerInterfaceWrapper) CreateAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAssistant(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteAssistant operation middleware
func (siw *ServerInterfaceWrapper) DeleteAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAssistant(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAssistant operation middleware
func (siw *ServerInterfaceWrapper) GetAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAssistant(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyAssistant operation middleware
func (siw *ServerInterfaceWrapper) ModifyAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyAssistant(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListAssistantFiles operation middleware
func (siw *ServerInterfaceWrapper) ListAssistantFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAssistantFilesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAssistantFiles(w, r, assistantId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateAssistantFile operation middleware
func (siw *ServerInterfaceWrapper) CreateAssistantFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAssistantFile(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteAssistantFile operation middleware
func (siw *ServerInterfaceWrapper) DeleteAssistantFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAssistantFile(w, r, assistantId, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAssistantFile operation middleware
func (siw *ServerInterfaceWrapper) GetAssistantFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAssistantFile(w, r, assistantId, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSpeech operation middleware
func (siw *ServerInterfaceWrapper) CreateSpeech(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSpeech(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTranscription operation middleware
func (siw *ServerInterfaceWrapper) CreateTranscription(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTranscription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTranslation operation middleware
func (siw *ServerInterfaceWrapper) CreateTranslation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTranslation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateChatCompletion operation middleware
func (siw *ServerInterfaceWrapper) CreateChatCompletion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateChatCompletion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCompletion operation middleware
func (siw *ServerInterfaceWrapper) CreateCompletion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCompletion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateEmbedding operation middleware
func (siw *ServerInterfaceWrapper) CreateEmbedding(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEmbedding(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFiles operation middleware
func (siw *ServerInterfaceWrapper) ListFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFilesParams

	// ------------- Optional query parameter "purpose" -------------

	err = runtime.BindQueryParameter("form", true, false, "purpose", r.URL.Query(), &params.Purpose)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "purpose", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFiles(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFile operation middleware
func (siw *ServerInterfaceWrapper) CreateFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFile operation middleware
func (siw *ServerInterfaceWrapper) DeleteFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFile(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetrieveFile operation middleware
func (siw *ServerInterfaceWrapper) RetrieveFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveFile(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DownloadFile operation middleware
func (siw *ServerInterfaceWrapper) DownloadFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DownloadFile(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPaginatedFineTuningJobs operation middleware
func (siw *ServerInterfaceWrapper) ListPaginatedFineTuningJobs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPaginatedFineTuningJobsParams

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPaginatedFineTuningJobs(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFineTuningJob operation middleware
func (siw *ServerInterfaceWrapper) CreateFineTuningJob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFineTuningJob(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetrieveFineTuningJob operation middleware
func (siw *ServerInterfaceWrapper) RetrieveFineTuningJob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithOptions("simple", "fine_tuning_job_id", r.PathValue("fine_tuning_job_id"), &fineTuningJobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fine_tuning_job_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveFineTuningJob(w, r, fineTuningJobId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CancelFineTuningJob operation middleware
func (siw *ServerInterfaceWrapper) CancelFineTuningJob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithOptions("simple", "fine_tuning_job_id", r.PathValue("fine_tuning_job_id"), &fineTuningJobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fine_tuning_job_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelFineTuningJob(w, r, fineTuningJobId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFineTuningEvents operation middleware
func (siw *ServerInterfaceWrapper) ListFineTuningEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithOptions("simple", "fine_tuning_job_id", r.PathValue("fine_tuning_job_id"), &fineTuningJobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fine_tuning_job_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFineTuningEventsParams

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFineTuningEvents(w, r, fineTuningJobId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateImageEdit operation middleware
func (siw *ServerInterfaceWrapper) CreateImageEdit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateImageEdit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateImage operation middleware
func (siw *ServerInterfaceWrapper) CreateImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateImage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateImageVariation operation middleware
func (siw *ServerInterfaceWrapper) CreateImageVariation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateImageVariation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListModels operation middleware
func (siw *ServerInterfaceWrapper) ListModels(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListModels(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteModel operation middleware
func (siw *ServerInterfaceWrapper) DeleteModel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "model" -------------
	var model string

	err = runtime.BindStyledParameterWithOptions("simple", "model", r.PathValue("model"), &model, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "model", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteModel(w, r, model)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetrieveModel operation middleware
func (siw *ServerInterfaceWrapper) RetrieveModel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "model" -------------
	var model string

	err = runtime.BindStyledParameterWithOptions("simple", "model", r.PathValue("model"), &model, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "model", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveModel(w, r, model)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateModeration operation middleware
func (siw *ServerInterfaceWrapper) CreateModeration(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateModeration(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateThread operation middleware
func (siw *ServerInterfaceWrapper) CreateThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateThread(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateThreadAndRun operation middleware
func (siw *ServerInterfaceWrapper) CreateThreadAndRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateThreadAndRun(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteThread operation middleware
func (siw *ServerInterfaceWrapper) DeleteThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetThread operation middleware
func (siw *ServerInterfaceWrapper) GetThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyThread operation middleware
func (siw *ServerInterfaceWrapper) ModifyThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMessages operation middleware
func (siw *ServerInterfaceWrapper) ListMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMessagesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMessages(w, r, threadId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMessage operation middleware
func (siw *ServerInterfaceWrapper) CreateMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMessage(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMessage operation middleware
func (siw *ServerInterfaceWrapper) GetMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessage(w, r, threadId, messageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyMessage operation middleware
func (siw *ServerInterfaceWrapper) ModifyMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyMessage(w, r, threadId, messageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMessageFiles operation middleware
func (siw *ServerInterfaceWrapper) ListMessageFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMessageFilesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMessageFiles(w, r, threadId, messageId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMessageFile operation middleware
func (siw *ServerInterfaceWrapper) GetMessageFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessageFile(w, r, threadId, messageId, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRuns operation middleware
func (siw *ServerInterfaceWrapper) ListRuns(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRunsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRuns(w, r, threadId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateRun operation middleware
func (siw *ServerInterfaceWrapper) CreateRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRun(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRun operation middleware
func (siw *ServerInterfaceWrapper) GetRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyRun operation middleware
func (siw *ServerInterfaceWrapper) ModifyRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CancelRun operation middleware
func (siw *ServerInterfaceWrapper) CancelRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRunSteps operation middleware
func (siw *ServerInterfaceWrapper) ListRunSteps(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRunStepsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRunSteps(w, r, threadId, runId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRunStep operation middleware
func (siw *ServerInterfaceWrapper) GetRunStep(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	// ------------- Path parameter "step_id" -------------
	var stepId string

	err = runtime.BindStyledParameterWithOptions("simple", "step_id", r.PathValue("step_id"), &stepId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "step_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunStep(w, r, threadId, runId, stepId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XListRunStepEvents operation middleware
func (siw *ServerInterfaceWrapper) XListRunStepEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	// ------------- Path parameter "step_id" -------------
	var stepId string

	err = runtime.BindStyledParameterWithOptions("simple", "step_id", r.PathValue("step_id"), &stepId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "step_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XListRunStepEventsParams

	// ------------- Optional query parameter "stream" -------------

	err = runtime.BindQueryParameter("form", true, false, "stream", r.URL.Query(), &params.Stream)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stream", Err: err})
		return
	}

	// ------------- Optional query parameter "index" -------------

	err = runtime.BindQueryParameter("form", true, false, "index", r.URL.Query(), &params.Index)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "index", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XListRunStepEvents(w, r, threadId, runId, stepId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SubmitToolOuputsToRun operation middleware
func (siw *ServerInterfaceWrapper) SubmitToolOuputsToRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubmitToolOuputsToRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XConfirmRun operation middleware
func (siw *ServerInterfaceWrapper) XConfirmRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XConfirmRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XStreamRun operation middleware
func (siw *ServerInterfaceWrapper) XStreamRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XStreamRunParams

	// ------------- Optional query parameter "index" -------------

	err = runtime.BindQueryParameter("form", true, false, "index", r.URL.Query(), &params.Index)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "index", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XStreamRun(w, r, threadId, runId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XListThreads operation middleware
func (siw *ServerInterfaceWrapper) XListThreads(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XListThreadsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XListThreads(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XListTools operation middleware
func (siw *ServerInterfaceWrapper) XListTools(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XListToolsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XListTools(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XCreateTool operation middleware
func (siw *ServerInterfaceWrapper) XCreateTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XCreateTool(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XInspectTool operation middleware
func (siw *ServerInterfaceWrapper) XInspectTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XInspectTool(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XRunTool operation middleware
func (siw *ServerInterfaceWrapper) XRunTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XRunTool(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XDeleteTool operation middleware
func (siw *ServerInterfaceWrapper) XDeleteTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XDeleteTool(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XGetTool operation middleware
func (siw *ServerInterfaceWrapper) XGetTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XGetTool(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XModifyTool operation middleware
func (siw *ServerInterfaceWrapper) XModifyTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XModifyTool(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XConfirmToolRun operation middleware
func (siw *ServerInterfaceWrapper) XConfirmToolRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tool_id" -------------
	var toolId string

	err = runtime.BindStyledParameterWithOptions("simple", "tool_id", r.PathValue("tool_id"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tool_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XConfirmToolRun(w, r, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/assistants", wrapper.ListAssistants)
	m.HandleFunc("POST "+options.BaseURL+"/assistants", wrapper.CreateAssistant)
	m.HandleFunc("DELETE "+options.BaseURL+"/assistants/{assistant_id}", wrapper.DeleteAssistant)
	m.HandleFunc("GET "+options.BaseURL+"/assistants/{assistant_id}", wrapper.GetAssistant)
	m.HandleFunc("POST "+options.BaseURL+"/assistants/{assistant_id}", wrapper.ModifyAssistant)
	m.HandleFunc("GET "+options.BaseURL+"/assistants/{assistant_id}/files", wrapper.ListAssistantFiles)
	m.HandleFunc("POST "+options.BaseURL+"/assistants/{assistant_id}/files", wrapper.CreateAssistantFile)
	m.HandleFunc("DELETE "+options.BaseURL+"/assistants/{assistant_id}/files/{file_id}", wrapper.DeleteAssistantFile)
	m.HandleFunc("GET "+options.BaseURL+"/assistants/{assistant_id}/files/{file_id}", wrapper.GetAssistantFile)
	m.HandleFunc("POST "+options.BaseURL+"/audio/speech", wrapper.CreateSpeech)
	m.HandleFunc("POST "+options.BaseURL+"/audio/transcriptions", wrapper.CreateTranscription)
	m.HandleFunc("POST "+options.BaseURL+"/audio/translations", wrapper.CreateTranslation)
	m.HandleFunc("POST "+options.BaseURL+"/chat/completions", wrapper.CreateChatCompletion)
	m.HandleFunc("POST "+options.BaseURL+"/completions", wrapper.CreateCompletion)
	m.HandleFunc("POST "+options.BaseURL+"/embeddings", wrapper.CreateEmbedding)
	m.HandleFunc("GET "+options.BaseURL+"/files", wrapper.ListFiles)
	m.HandleFunc("POST "+options.BaseURL+"/files", wrapper.CreateFile)
	m.HandleFunc("DELETE "+options.BaseURL+"/files/{file_id}", wrapper.DeleteFile)
	m.HandleFunc("GET "+options.BaseURL+"/files/{file_id}", wrapper.RetrieveFile)
	m.HandleFunc("GET "+options.BaseURL+"/files/{file_id}/content", wrapper.DownloadFile)
	m.HandleFunc("GET "+options.BaseURL+"/fine_tuning/jobs", wrapper.ListPaginatedFineTuningJobs)
	m.HandleFunc("POST "+options.BaseURL+"/fine_tuning/jobs", wrapper.CreateFineTuningJob)
	m.HandleFunc("GET "+options.BaseURL+"/fine_tuning/jobs/{fine_tuning_job_id}", wrapper.RetrieveFineTuningJob)
	m.HandleFunc("POST "+options.BaseURL+"/fine_tuning/jobs/{fine_tuning_job_id}/cancel", wrapper.CancelFineTuningJob)
	m.HandleFunc("GET "+options.BaseURL+"/fine_tuning/jobs/{fine_tuning_job_id}/events", wrapper.ListFineTuningEvents)
	m.HandleFunc("POST "+options.BaseURL+"/images/edits", wrapper.CreateImageEdit)
	m.HandleFunc("POST "+options.BaseURL+"/images/generations", wrapper.CreateImage)
	m.HandleFunc("POST "+options.BaseURL+"/images/variations", wrapper.CreateImageVariation)
	m.HandleFunc("GET "+options.BaseURL+"/models", wrapper.ListModels)
	m.HandleFunc("DELETE "+options.BaseURL+"/models/{model}", wrapper.DeleteModel)
	m.HandleFunc("GET "+options.BaseURL+"/models/{model}", wrapper.RetrieveModel)
	m.HandleFunc("POST "+options.BaseURL+"/moderations", wrapper.CreateModeration)
	m.HandleFunc("POST "+options.BaseURL+"/threads", wrapper.CreateThread)
	m.HandleFunc("POST "+options.BaseURL+"/threads/runs", wrapper.CreateThreadAndRun)
	m.HandleFunc("DELETE "+options.BaseURL+"/threads/{thread_id}", wrapper.DeleteThread)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}", wrapper.GetThread)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}", wrapper.ModifyThread)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages", wrapper.ListMessages)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/messages", wrapper.CreateMessage)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}", wrapper.GetMessage)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}", wrapper.ModifyMessage)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}/files", wrapper.ListMessageFiles)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}/files/{file_id}", wrapper.GetMessageFile)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs", wrapper.ListRuns)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs", wrapper.CreateRun)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}", wrapper.GetRun)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}", wrapper.ModifyRun)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/cancel", wrapper.CancelRun)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/steps", wrapper.ListRunSteps)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/steps/{step_id}", wrapper.GetRunStep)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/steps/{step_id}/x-events", wrapper.XListRunStepEvents)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/submit_tool_outputs", wrapper.SubmitToolOuputsToRun)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/x-confirm", wrapper.XConfirmRun)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/x-stream", wrapper.XStreamRun)
	m.HandleFunc("GET "+options.BaseURL+"/x-threads", wrapper.XListThreads)
	m.HandleFunc("GET "+options.BaseURL+"/x-tools", wrapper.XListTools)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools", wrapper.XCreateTool)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools/inspect", wrapper.XInspectTool)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools/run", wrapper.XRunTool)
	m.HandleFunc("DELETE "+options.BaseURL+"/x-tools/{id}", wrapper.XDeleteTool)
	m.HandleFunc("GET "+options.BaseURL+"/x-tools/{id}", wrapper.XGetTool)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools/{id}", wrapper.XModifyTool)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools/{tool_id}/confirm", wrapper.XConfirmToolRun)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"GA6qBAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
