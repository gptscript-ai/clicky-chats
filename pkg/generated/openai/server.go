//go:build go1.22

// Package openai provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package openai

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of assistants.
	// (GET /assistants)
	ListAssistants(w http.ResponseWriter, r *http.Request, params ListAssistantsParams)
	// Create an assistant with a model and instructions.
	// (POST /assistants)
	CreateAssistant(w http.ResponseWriter, r *http.Request)
	// Delete an assistant.
	// (DELETE /assistants/{assistant_id})
	DeleteAssistant(w http.ResponseWriter, r *http.Request, assistantId string)
	// Retrieves an assistant.
	// (GET /assistants/{assistant_id})
	GetAssistant(w http.ResponseWriter, r *http.Request, assistantId string)
	// Modifies an assistant.
	// (POST /assistants/{assistant_id})
	ModifyAssistant(w http.ResponseWriter, r *http.Request, assistantId string)
	// Returns a list of assistant files.
	// (GET /assistants/{assistant_id}/files)
	ListAssistantFiles(w http.ResponseWriter, r *http.Request, assistantId string, params ListAssistantFilesParams)
	// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
	// (POST /assistants/{assistant_id}/files)
	CreateAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string)
	// Delete an assistant file.
	// (DELETE /assistants/{assistant_id}/files/{file_id})
	DeleteAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string, fileId string)
	// Retrieves an AssistantFile.
	// (GET /assistants/{assistant_id}/files/{file_id})
	GetAssistantFile(w http.ResponseWriter, r *http.Request, assistantId string, fileId string)
	// Generates audio from the input text.
	// (POST /audio/speech)
	CreateSpeech(w http.ResponseWriter, r *http.Request)
	// Transcribes audio into the input language.
	// (POST /audio/transcriptions)
	CreateTranscription(w http.ResponseWriter, r *http.Request)
	// Translates audio into English.
	// (POST /audio/translations)
	CreateTranslation(w http.ResponseWriter, r *http.Request)
	// Creates a model response for the given chat conversation.
	// (POST /chat/completions)
	CreateChatCompletion(w http.ResponseWriter, r *http.Request)
	// Creates a completion for the provided prompt and parameters.
	// (POST /completions)
	CreateCompletion(w http.ResponseWriter, r *http.Request)
	// Creates an embedding vector representing the input text.
	// (POST /embeddings)
	CreateEmbedding(w http.ResponseWriter, r *http.Request)
	// Returns a list of files that belong to the user's organization.
	// (GET /files)
	ListFiles(w http.ResponseWriter, r *http.Request, params ListFilesParams)
	// Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.
	//
	// The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.
	//
	// Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
	// (POST /files)
	CreateFile(w http.ResponseWriter, r *http.Request)
	// Delete a file.
	// (DELETE /files/{file_id})
	DeleteFile(w http.ResponseWriter, r *http.Request, fileId string)
	// Returns information about a specific file.
	// (GET /files/{file_id})
	RetrieveFile(w http.ResponseWriter, r *http.Request, fileId string)
	// Returns the contents of the specified file.
	// (GET /files/{file_id}/content)
	DownloadFile(w http.ResponseWriter, r *http.Request, fileId string)
	// List your organization's fine-tuning jobs
	// (GET /fine_tuning/jobs)
	ListPaginatedFineTuningJobs(w http.ResponseWriter, r *http.Request, params ListPaginatedFineTuningJobsParams)
	// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
	//
	// Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
	//
	// [Learn more about fine-tuning](/docs/guides/fine-tuning)
	// (POST /fine_tuning/jobs)
	CreateFineTuningJob(w http.ResponseWriter, r *http.Request)
	// Get info about a fine-tuning job.
	//
	// [Learn more about fine-tuning](/docs/guides/fine-tuning)
	// (GET /fine_tuning/jobs/{fine_tuning_job_id})
	RetrieveFineTuningJob(w http.ResponseWriter, r *http.Request, fineTuningJobId string)
	// Immediately cancel a fine-tune job.
	// (POST /fine_tuning/jobs/{fine_tuning_job_id}/cancel)
	CancelFineTuningJob(w http.ResponseWriter, r *http.Request, fineTuningJobId string)
	// Get status updates for a fine-tuning job.
	// (GET /fine_tuning/jobs/{fine_tuning_job_id}/events)
	ListFineTuningEvents(w http.ResponseWriter, r *http.Request, fineTuningJobId string, params ListFineTuningEventsParams)
	// Creates an edited or extended image given an original image and a prompt.
	// (POST /images/edits)
	CreateImageEdit(w http.ResponseWriter, r *http.Request)
	// Creates an image given a prompt.
	// (POST /images/generations)
	CreateImage(w http.ResponseWriter, r *http.Request)
	// Creates a variation of a given image.
	// (POST /images/variations)
	CreateImageVariation(w http.ResponseWriter, r *http.Request)
	// Lists the currently available models, and provides basic information about each one such as the owner and availability.
	// (GET /models)
	ListModels(w http.ResponseWriter, r *http.Request)
	// Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
	// (DELETE /models/{model})
	DeleteModel(w http.ResponseWriter, r *http.Request, model string)
	// Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
	// (GET /models/{model})
	RetrieveModel(w http.ResponseWriter, r *http.Request, model string)
	// Classifies if text is potentially harmful.
	// (POST /moderations)
	CreateModeration(w http.ResponseWriter, r *http.Request)
	// Create a thread.
	// (POST /threads)
	CreateThread(w http.ResponseWriter, r *http.Request)
	// Create a thread and run it in one request.
	// (POST /threads/runs)
	CreateThreadAndRun(w http.ResponseWriter, r *http.Request)
	// Delete a thread.
	// (DELETE /threads/{thread_id})
	DeleteThread(w http.ResponseWriter, r *http.Request, threadId string)
	// Retrieves a thread.
	// (GET /threads/{thread_id})
	GetThread(w http.ResponseWriter, r *http.Request, threadId string)
	// Modifies a thread.
	// (POST /threads/{thread_id})
	ModifyThread(w http.ResponseWriter, r *http.Request, threadId string)
	// Returns a list of messages for a given thread.
	// (GET /threads/{thread_id}/messages)
	ListMessages(w http.ResponseWriter, r *http.Request, threadId string, params ListMessagesParams)
	// Create a message.
	// (POST /threads/{thread_id}/messages)
	CreateMessage(w http.ResponseWriter, r *http.Request, threadId string)
	// Retrieve a message.
	// (GET /threads/{thread_id}/messages/{message_id})
	GetMessage(w http.ResponseWriter, r *http.Request, threadId string, messageId string)
	// Modifies a message.
	// (POST /threads/{thread_id}/messages/{message_id})
	ModifyMessage(w http.ResponseWriter, r *http.Request, threadId string, messageId string)
	// Returns a list of message files.
	// (GET /threads/{thread_id}/messages/{message_id}/files)
	ListMessageFiles(w http.ResponseWriter, r *http.Request, threadId string, messageId string, params ListMessageFilesParams)
	// Retrieves a message file.
	// (GET /threads/{thread_id}/messages/{message_id}/files/{file_id})
	GetMessageFile(w http.ResponseWriter, r *http.Request, threadId string, messageId string, fileId string)
	// Returns a list of runs belonging to a thread.
	// (GET /threads/{thread_id}/runs)
	ListRuns(w http.ResponseWriter, r *http.Request, threadId string, params ListRunsParams)
	// Create a run.
	// (POST /threads/{thread_id}/runs)
	CreateRun(w http.ResponseWriter, r *http.Request, threadId string)
	// Retrieves a run.
	// (GET /threads/{thread_id}/runs/{run_id})
	GetRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Modifies a run.
	// (POST /threads/{thread_id}/runs/{run_id})
	ModifyRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Cancels a run that is `in_progress`.
	// (POST /threads/{thread_id}/runs/{run_id}/cancel)
	CancelRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Returns a list of run steps belonging to a run.
	// (GET /threads/{thread_id}/runs/{run_id}/steps)
	ListRunSteps(w http.ResponseWriter, r *http.Request, threadId string, runId string, params ListRunStepsParams)
	// Retrieves a run step.
	// (GET /threads/{thread_id}/runs/{run_id}/steps/{step_id})
	GetRunStep(w http.ResponseWriter, r *http.Request, threadId string, runId string, stepId string)
	// List run step events
	// (GET /threads/{thread_id}/runs/{run_id}/steps/{step_id}/x-events)
	XListRunStepEvents(w http.ResponseWriter, r *http.Request, threadId string, runId string, stepId string, params XListRunStepEventsParams)
	// When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
	// (POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs)
	SubmitToolOuputsToRun(w http.ResponseWriter, r *http.Request, threadId string, runId string)
	// Stream run events when the run is in progress
	// (GET /threads/{thread_id}/runs/{run_id}/x-stream)
	XStreamRun(w http.ResponseWriter, r *http.Request, threadId string, runId string, params XStreamRunParams)
	// List threads
	// (GET /x-threads)
	XListThreads(w http.ResponseWriter, r *http.Request, params XListThreadsParams)
	// List tools
	// (GET /x-tools)
	XListTools(w http.ResponseWriter, r *http.Request, params XListToolsParams)
	// Creates a tool for use with gptscript engine.
	// (POST /x-tools)
	XCreateTool(w http.ResponseWriter, r *http.Request)
	// Inspect tool
	// (POST /x-tools/inspect)
	XInspectTool(w http.ResponseWriter, r *http.Request)
	// Run tool
	// (POST /x-tools/run)
	XRunTool(w http.ResponseWriter, r *http.Request)
	// Delete tool
	// (DELETE /x-tools/{id})
	XDeleteTool(w http.ResponseWriter, r *http.Request, id string)
	// Get tool
	// (GET /x-tools/{id})
	XGetTool(w http.ResponseWriter, r *http.Request, id string)
	// Modify tool
	// (POST /x-tools/{id})
	XModifyTool(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListAssistants operation middleware
func (siw *ServerInterfaceWrapper) ListAssistants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAssistantsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAssistants(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateAssistant operation middleware
func (siw *ServerInterfaceWrapper) CreateAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAssistant(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteAssistant operation middleware
func (siw *ServerInterfaceWrapper) DeleteAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAssistant(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAssistant operation middleware
func (siw *ServerInterfaceWrapper) GetAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAssistant(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyAssistant operation middleware
func (siw *ServerInterfaceWrapper) ModifyAssistant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyAssistant(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListAssistantFiles operation middleware
func (siw *ServerInterfaceWrapper) ListAssistantFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAssistantFilesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAssistantFiles(w, r, assistantId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateAssistantFile operation middleware
func (siw *ServerInterfaceWrapper) CreateAssistantFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAssistantFile(w, r, assistantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteAssistantFile operation middleware
func (siw *ServerInterfaceWrapper) DeleteAssistantFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAssistantFile(w, r, assistantId, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAssistantFile operation middleware
func (siw *ServerInterfaceWrapper) GetAssistantFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assistant_id" -------------
	var assistantId string

	err = runtime.BindStyledParameterWithOptions("simple", "assistant_id", r.PathValue("assistant_id"), &assistantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assistant_id", Err: err})
		return
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAssistantFile(w, r, assistantId, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSpeech operation middleware
func (siw *ServerInterfaceWrapper) CreateSpeech(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSpeech(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTranscription operation middleware
func (siw *ServerInterfaceWrapper) CreateTranscription(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTranscription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTranslation operation middleware
func (siw *ServerInterfaceWrapper) CreateTranslation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTranslation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateChatCompletion operation middleware
func (siw *ServerInterfaceWrapper) CreateChatCompletion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateChatCompletion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCompletion operation middleware
func (siw *ServerInterfaceWrapper) CreateCompletion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCompletion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateEmbedding operation middleware
func (siw *ServerInterfaceWrapper) CreateEmbedding(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEmbedding(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFiles operation middleware
func (siw *ServerInterfaceWrapper) ListFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFilesParams

	// ------------- Optional query parameter "purpose" -------------

	err = runtime.BindQueryParameter("form", true, false, "purpose", r.URL.Query(), &params.Purpose)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "purpose", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFiles(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFile operation middleware
func (siw *ServerInterfaceWrapper) CreateFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFile operation middleware
func (siw *ServerInterfaceWrapper) DeleteFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFile(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetrieveFile operation middleware
func (siw *ServerInterfaceWrapper) RetrieveFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveFile(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DownloadFile operation middleware
func (siw *ServerInterfaceWrapper) DownloadFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DownloadFile(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPaginatedFineTuningJobs operation middleware
func (siw *ServerInterfaceWrapper) ListPaginatedFineTuningJobs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPaginatedFineTuningJobsParams

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPaginatedFineTuningJobs(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFineTuningJob operation middleware
func (siw *ServerInterfaceWrapper) CreateFineTuningJob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFineTuningJob(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetrieveFineTuningJob operation middleware
func (siw *ServerInterfaceWrapper) RetrieveFineTuningJob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithOptions("simple", "fine_tuning_job_id", r.PathValue("fine_tuning_job_id"), &fineTuningJobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fine_tuning_job_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveFineTuningJob(w, r, fineTuningJobId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CancelFineTuningJob operation middleware
func (siw *ServerInterfaceWrapper) CancelFineTuningJob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithOptions("simple", "fine_tuning_job_id", r.PathValue("fine_tuning_job_id"), &fineTuningJobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fine_tuning_job_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelFineTuningJob(w, r, fineTuningJobId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFineTuningEvents operation middleware
func (siw *ServerInterfaceWrapper) ListFineTuningEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithOptions("simple", "fine_tuning_job_id", r.PathValue("fine_tuning_job_id"), &fineTuningJobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fine_tuning_job_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFineTuningEventsParams

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFineTuningEvents(w, r, fineTuningJobId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateImageEdit operation middleware
func (siw *ServerInterfaceWrapper) CreateImageEdit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateImageEdit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateImage operation middleware
func (siw *ServerInterfaceWrapper) CreateImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateImage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateImageVariation operation middleware
func (siw *ServerInterfaceWrapper) CreateImageVariation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateImageVariation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListModels operation middleware
func (siw *ServerInterfaceWrapper) ListModels(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListModels(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteModel operation middleware
func (siw *ServerInterfaceWrapper) DeleteModel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "model" -------------
	var model string

	err = runtime.BindStyledParameterWithOptions("simple", "model", r.PathValue("model"), &model, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "model", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteModel(w, r, model)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetrieveModel operation middleware
func (siw *ServerInterfaceWrapper) RetrieveModel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "model" -------------
	var model string

	err = runtime.BindStyledParameterWithOptions("simple", "model", r.PathValue("model"), &model, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "model", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveModel(w, r, model)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateModeration operation middleware
func (siw *ServerInterfaceWrapper) CreateModeration(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateModeration(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateThread operation middleware
func (siw *ServerInterfaceWrapper) CreateThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateThread(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateThreadAndRun operation middleware
func (siw *ServerInterfaceWrapper) CreateThreadAndRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateThreadAndRun(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteThread operation middleware
func (siw *ServerInterfaceWrapper) DeleteThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetThread operation middleware
func (siw *ServerInterfaceWrapper) GetThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyThread operation middleware
func (siw *ServerInterfaceWrapper) ModifyThread(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMessages operation middleware
func (siw *ServerInterfaceWrapper) ListMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMessagesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMessages(w, r, threadId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMessage operation middleware
func (siw *ServerInterfaceWrapper) CreateMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMessage(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMessage operation middleware
func (siw *ServerInterfaceWrapper) GetMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessage(w, r, threadId, messageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyMessage operation middleware
func (siw *ServerInterfaceWrapper) ModifyMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyMessage(w, r, threadId, messageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMessageFiles operation middleware
func (siw *ServerInterfaceWrapper) ListMessageFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMessageFilesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMessageFiles(w, r, threadId, messageId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMessageFile operation middleware
func (siw *ServerInterfaceWrapper) GetMessageFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", r.PathValue("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", r.PathValue("file_id"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessageFile(w, r, threadId, messageId, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRuns operation middleware
func (siw *ServerInterfaceWrapper) ListRuns(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRunsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRuns(w, r, threadId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateRun operation middleware
func (siw *ServerInterfaceWrapper) CreateRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRun(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRun operation middleware
func (siw *ServerInterfaceWrapper) GetRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyRun operation middleware
func (siw *ServerInterfaceWrapper) ModifyRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CancelRun operation middleware
func (siw *ServerInterfaceWrapper) CancelRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRunSteps operation middleware
func (siw *ServerInterfaceWrapper) ListRunSteps(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRunStepsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRunSteps(w, r, threadId, runId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRunStep operation middleware
func (siw *ServerInterfaceWrapper) GetRunStep(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	// ------------- Path parameter "step_id" -------------
	var stepId string

	err = runtime.BindStyledParameterWithOptions("simple", "step_id", r.PathValue("step_id"), &stepId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "step_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunStep(w, r, threadId, runId, stepId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XListRunStepEvents operation middleware
func (siw *ServerInterfaceWrapper) XListRunStepEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	// ------------- Path parameter "step_id" -------------
	var stepId string

	err = runtime.BindStyledParameterWithOptions("simple", "step_id", r.PathValue("step_id"), &stepId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "step_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XListRunStepEventsParams

	// ------------- Optional query parameter "stream" -------------

	err = runtime.BindQueryParameter("form", true, false, "stream", r.URL.Query(), &params.Stream)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stream", Err: err})
		return
	}

	// ------------- Optional query parameter "index" -------------

	err = runtime.BindQueryParameter("form", true, false, "index", r.URL.Query(), &params.Index)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "index", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XListRunStepEvents(w, r, threadId, runId, stepId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SubmitToolOuputsToRun operation middleware
func (siw *ServerInterfaceWrapper) SubmitToolOuputsToRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubmitToolOuputsToRun(w, r, threadId, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XStreamRun operation middleware
func (siw *ServerInterfaceWrapper) XStreamRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", r.PathValue("thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XStreamRunParams

	// ------------- Optional query parameter "index" -------------

	err = runtime.BindQueryParameter("form", true, false, "index", r.URL.Query(), &params.Index)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "index", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XStreamRun(w, r, threadId, runId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XListThreads operation middleware
func (siw *ServerInterfaceWrapper) XListThreads(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XListThreadsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XListThreads(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XListTools operation middleware
func (siw *ServerInterfaceWrapper) XListTools(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params XListToolsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XListTools(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XCreateTool operation middleware
func (siw *ServerInterfaceWrapper) XCreateTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XCreateTool(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XInspectTool operation middleware
func (siw *ServerInterfaceWrapper) XInspectTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XInspectTool(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XRunTool operation middleware
func (siw *ServerInterfaceWrapper) XRunTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XRunTool(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XDeleteTool operation middleware
func (siw *ServerInterfaceWrapper) XDeleteTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XDeleteTool(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XGetTool operation middleware
func (siw *ServerInterfaceWrapper) XGetTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XGetTool(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// XModifyTool operation middleware
func (siw *ServerInterfaceWrapper) XModifyTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.XModifyTool(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/assistants", wrapper.ListAssistants)
	m.HandleFunc("POST "+options.BaseURL+"/assistants", wrapper.CreateAssistant)
	m.HandleFunc("DELETE "+options.BaseURL+"/assistants/{assistant_id}", wrapper.DeleteAssistant)
	m.HandleFunc("GET "+options.BaseURL+"/assistants/{assistant_id}", wrapper.GetAssistant)
	m.HandleFunc("POST "+options.BaseURL+"/assistants/{assistant_id}", wrapper.ModifyAssistant)
	m.HandleFunc("GET "+options.BaseURL+"/assistants/{assistant_id}/files", wrapper.ListAssistantFiles)
	m.HandleFunc("POST "+options.BaseURL+"/assistants/{assistant_id}/files", wrapper.CreateAssistantFile)
	m.HandleFunc("DELETE "+options.BaseURL+"/assistants/{assistant_id}/files/{file_id}", wrapper.DeleteAssistantFile)
	m.HandleFunc("GET "+options.BaseURL+"/assistants/{assistant_id}/files/{file_id}", wrapper.GetAssistantFile)
	m.HandleFunc("POST "+options.BaseURL+"/audio/speech", wrapper.CreateSpeech)
	m.HandleFunc("POST "+options.BaseURL+"/audio/transcriptions", wrapper.CreateTranscription)
	m.HandleFunc("POST "+options.BaseURL+"/audio/translations", wrapper.CreateTranslation)
	m.HandleFunc("POST "+options.BaseURL+"/chat/completions", wrapper.CreateChatCompletion)
	m.HandleFunc("POST "+options.BaseURL+"/completions", wrapper.CreateCompletion)
	m.HandleFunc("POST "+options.BaseURL+"/embeddings", wrapper.CreateEmbedding)
	m.HandleFunc("GET "+options.BaseURL+"/files", wrapper.ListFiles)
	m.HandleFunc("POST "+options.BaseURL+"/files", wrapper.CreateFile)
	m.HandleFunc("DELETE "+options.BaseURL+"/files/{file_id}", wrapper.DeleteFile)
	m.HandleFunc("GET "+options.BaseURL+"/files/{file_id}", wrapper.RetrieveFile)
	m.HandleFunc("GET "+options.BaseURL+"/files/{file_id}/content", wrapper.DownloadFile)
	m.HandleFunc("GET "+options.BaseURL+"/fine_tuning/jobs", wrapper.ListPaginatedFineTuningJobs)
	m.HandleFunc("POST "+options.BaseURL+"/fine_tuning/jobs", wrapper.CreateFineTuningJob)
	m.HandleFunc("GET "+options.BaseURL+"/fine_tuning/jobs/{fine_tuning_job_id}", wrapper.RetrieveFineTuningJob)
	m.HandleFunc("POST "+options.BaseURL+"/fine_tuning/jobs/{fine_tuning_job_id}/cancel", wrapper.CancelFineTuningJob)
	m.HandleFunc("GET "+options.BaseURL+"/fine_tuning/jobs/{fine_tuning_job_id}/events", wrapper.ListFineTuningEvents)
	m.HandleFunc("POST "+options.BaseURL+"/images/edits", wrapper.CreateImageEdit)
	m.HandleFunc("POST "+options.BaseURL+"/images/generations", wrapper.CreateImage)
	m.HandleFunc("POST "+options.BaseURL+"/images/variations", wrapper.CreateImageVariation)
	m.HandleFunc("GET "+options.BaseURL+"/models", wrapper.ListModels)
	m.HandleFunc("DELETE "+options.BaseURL+"/models/{model}", wrapper.DeleteModel)
	m.HandleFunc("GET "+options.BaseURL+"/models/{model}", wrapper.RetrieveModel)
	m.HandleFunc("POST "+options.BaseURL+"/moderations", wrapper.CreateModeration)
	m.HandleFunc("POST "+options.BaseURL+"/threads", wrapper.CreateThread)
	m.HandleFunc("POST "+options.BaseURL+"/threads/runs", wrapper.CreateThreadAndRun)
	m.HandleFunc("DELETE "+options.BaseURL+"/threads/{thread_id}", wrapper.DeleteThread)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}", wrapper.GetThread)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}", wrapper.ModifyThread)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages", wrapper.ListMessages)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/messages", wrapper.CreateMessage)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}", wrapper.GetMessage)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}", wrapper.ModifyMessage)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}/files", wrapper.ListMessageFiles)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/messages/{message_id}/files/{file_id}", wrapper.GetMessageFile)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs", wrapper.ListRuns)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs", wrapper.CreateRun)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}", wrapper.GetRun)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}", wrapper.ModifyRun)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/cancel", wrapper.CancelRun)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/steps", wrapper.ListRunSteps)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/steps/{step_id}", wrapper.GetRunStep)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/steps/{step_id}/x-events", wrapper.XListRunStepEvents)
	m.HandleFunc("POST "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/submit_tool_outputs", wrapper.SubmitToolOuputsToRun)
	m.HandleFunc("GET "+options.BaseURL+"/threads/{thread_id}/runs/{run_id}/x-stream", wrapper.XStreamRun)
	m.HandleFunc("GET "+options.BaseURL+"/x-threads", wrapper.XListThreads)
	m.HandleFunc("GET "+options.BaseURL+"/x-tools", wrapper.XListTools)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools", wrapper.XCreateTool)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools/inspect", wrapper.XInspectTool)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools/run", wrapper.XRunTool)
	m.HandleFunc("DELETE "+options.BaseURL+"/x-tools/{id}", wrapper.XDeleteTool)
	m.HandleFunc("GET "+options.BaseURL+"/x-tools/{id}", wrapper.XGetTool)
	m.HandleFunc("POST "+options.BaseURL+"/x-tools/{id}", wrapper.XModifyTool)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"F/bRr+TB4+Xj4/8PAAD//2H3YbSTnAQA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
