// Package openai provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package openai

import (
	"encoding/json"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for AssistantFileObjectObject.
const (
	AssistantFileObjectObjectAssistantFile AssistantFileObjectObject = "assistant.file"
)

// Defines values for AssistantObjectObject.
const (
	AssistantObjectObjectAssistant AssistantObjectObject = "assistant"
)

// Defines values for AssistantToolsCodeType.
const (
	AssistantToolsCodeTypeCodeInterpreter AssistantToolsCodeType = "code_interpreter"
)

// Defines values for AssistantToolsFunctionType.
const (
	AssistantToolsFunctionTypeFunction AssistantToolsFunctionType = "function"
)

// Defines values for AssistantToolsRetrievalType.
const (
	AssistantToolsRetrievalTypeRetrieval AssistantToolsRetrievalType = "retrieval"
)

// Defines values for ChatCompletionMessageToolCallType.
const (
	ChatCompletionMessageToolCallTypeFunction ChatCompletionMessageToolCallType = "function"
)

// Defines values for ChatCompletionMessageToolCallChunkType.
const (
	ChatCompletionMessageToolCallChunkTypeFunction ChatCompletionMessageToolCallChunkType = "function"
)

// Defines values for ChatCompletionNamedToolChoiceType.
const (
	ChatCompletionNamedToolChoiceTypeFunction ChatCompletionNamedToolChoiceType = "function"
)

// Defines values for ChatCompletionRequestAssistantMessageRole.
const (
	ChatCompletionRequestAssistantMessageRoleAssistant ChatCompletionRequestAssistantMessageRole = "assistant"
)

// Defines values for ChatCompletionRequestFunctionMessageRole.
const (
	ChatCompletionRequestFunctionMessageRoleFunction ChatCompletionRequestFunctionMessageRole = "function"
)

// Defines values for ChatCompletionRequestMessageContentPartImageImageUrlDetail.
const (
	ChatCompletionRequestMessageContentPartImageImageUrlDetailAuto ChatCompletionRequestMessageContentPartImageImageUrlDetail = "auto"
	ChatCompletionRequestMessageContentPartImageImageUrlDetailHigh ChatCompletionRequestMessageContentPartImageImageUrlDetail = "high"
	ChatCompletionRequestMessageContentPartImageImageUrlDetailLow  ChatCompletionRequestMessageContentPartImageImageUrlDetail = "low"
)

// Defines values for ChatCompletionRequestMessageContentPartImageType.
const (
	ChatCompletionRequestMessageContentPartImageTypeImageUrl ChatCompletionRequestMessageContentPartImageType = "image_url"
)

// Defines values for ChatCompletionRequestMessageContentPartTextType.
const (
	ChatCompletionRequestMessageContentPartTextTypeText ChatCompletionRequestMessageContentPartTextType = "text"
)

// Defines values for ChatCompletionRequestSystemMessageRole.
const (
	ChatCompletionRequestSystemMessageRoleSystem ChatCompletionRequestSystemMessageRole = "system"
)

// Defines values for ChatCompletionRequestToolMessageRole.
const (
	ChatCompletionRequestToolMessageRoleTool ChatCompletionRequestToolMessageRole = "tool"
)

// Defines values for ChatCompletionRequestUserMessageRole.
const (
	ChatCompletionRequestUserMessageRoleUser ChatCompletionRequestUserMessageRole = "user"
)

// Defines values for ChatCompletionResponseMessageRole.
const (
	ChatCompletionResponseMessageRoleAssistant ChatCompletionResponseMessageRole = "assistant"
)

// Defines values for ChatCompletionRole.
const (
	ChatCompletionRoleAssistant ChatCompletionRole = "assistant"
	ChatCompletionRoleFunction  ChatCompletionRole = "function"
	ChatCompletionRoleSystem    ChatCompletionRole = "system"
	ChatCompletionRoleTool      ChatCompletionRole = "tool"
	ChatCompletionRoleUser      ChatCompletionRole = "user"
)

// Defines values for ChatCompletionStreamResponseDeltaRole.
const (
	ChatCompletionStreamResponseDeltaRoleAssistant ChatCompletionStreamResponseDeltaRole = "assistant"
	ChatCompletionStreamResponseDeltaRoleSystem    ChatCompletionStreamResponseDeltaRole = "system"
	ChatCompletionStreamResponseDeltaRoleTool      ChatCompletionStreamResponseDeltaRole = "tool"
	ChatCompletionStreamResponseDeltaRoleUser      ChatCompletionStreamResponseDeltaRole = "user"
)

// Defines values for ChatCompletionToolType.
const (
	ChatCompletionToolTypeFunction ChatCompletionToolType = "function"
)

// Defines values for ChatCompletionToolChoiceOption0.
const (
	ChatCompletionToolChoiceOption0Auto ChatCompletionToolChoiceOption0 = "auto"
	ChatCompletionToolChoiceOption0None ChatCompletionToolChoiceOption0 = "none"
)

// Defines values for CreateChatCompletionFunctionResponseChoicesFinishReason.
const (
	CreateChatCompletionFunctionResponseChoicesFinishReasonContentFilter CreateChatCompletionFunctionResponseChoicesFinishReason = "content_filter"
	CreateChatCompletionFunctionResponseChoicesFinishReasonFunctionCall  CreateChatCompletionFunctionResponseChoicesFinishReason = "function_call"
	CreateChatCompletionFunctionResponseChoicesFinishReasonLength        CreateChatCompletionFunctionResponseChoicesFinishReason = "length"
	CreateChatCompletionFunctionResponseChoicesFinishReasonStop          CreateChatCompletionFunctionResponseChoicesFinishReason = "stop"
)

// Defines values for CreateChatCompletionFunctionResponseObject.
const (
	CreateChatCompletionFunctionResponseObjectChatCompletion CreateChatCompletionFunctionResponseObject = "chat.completion"
)

// Defines values for CreateChatCompletionRequestFunctionCall0.
const (
	CreateChatCompletionRequestFunctionCall0Auto CreateChatCompletionRequestFunctionCall0 = "auto"
	CreateChatCompletionRequestFunctionCall0None CreateChatCompletionRequestFunctionCall0 = "none"
)

// Defines values for CreateChatCompletionRequestModel1.
const (
	CreateChatCompletionRequestModel1Gpt35Turbo        CreateChatCompletionRequestModel1 = "gpt-3.5-turbo"
	CreateChatCompletionRequestModel1Gpt35Turbo0125    CreateChatCompletionRequestModel1 = "gpt-3.5-turbo-0125"
	CreateChatCompletionRequestModel1Gpt35Turbo0301    CreateChatCompletionRequestModel1 = "gpt-3.5-turbo-0301"
	CreateChatCompletionRequestModel1Gpt35Turbo0613    CreateChatCompletionRequestModel1 = "gpt-3.5-turbo-0613"
	CreateChatCompletionRequestModel1Gpt35Turbo1106    CreateChatCompletionRequestModel1 = "gpt-3.5-turbo-1106"
	CreateChatCompletionRequestModel1Gpt35Turbo16k     CreateChatCompletionRequestModel1 = "gpt-3.5-turbo-16k"
	CreateChatCompletionRequestModel1Gpt35Turbo16k0613 CreateChatCompletionRequestModel1 = "gpt-3.5-turbo-16k-0613"
	CreateChatCompletionRequestModel1Gpt4              CreateChatCompletionRequestModel1 = "gpt-4"
	CreateChatCompletionRequestModel1Gpt40125Preview   CreateChatCompletionRequestModel1 = "gpt-4-0125-preview"
	CreateChatCompletionRequestModel1Gpt40314          CreateChatCompletionRequestModel1 = "gpt-4-0314"
	CreateChatCompletionRequestModel1Gpt40613          CreateChatCompletionRequestModel1 = "gpt-4-0613"
	CreateChatCompletionRequestModel1Gpt41106Preview   CreateChatCompletionRequestModel1 = "gpt-4-1106-preview"
	CreateChatCompletionRequestModel1Gpt432k           CreateChatCompletionRequestModel1 = "gpt-4-32k"
	CreateChatCompletionRequestModel1Gpt432k0314       CreateChatCompletionRequestModel1 = "gpt-4-32k-0314"
	CreateChatCompletionRequestModel1Gpt432k0613       CreateChatCompletionRequestModel1 = "gpt-4-32k-0613"
	CreateChatCompletionRequestModel1Gpt4TurboPreview  CreateChatCompletionRequestModel1 = "gpt-4-turbo-preview"
	CreateChatCompletionRequestModel1Gpt4VisionPreview CreateChatCompletionRequestModel1 = "gpt-4-vision-preview"
)

// Defines values for CreateChatCompletionRequestResponseFormatType.
const (
	CreateChatCompletionRequestResponseFormatTypeJsonObject CreateChatCompletionRequestResponseFormatType = "json_object"
	CreateChatCompletionRequestResponseFormatTypeText       CreateChatCompletionRequestResponseFormatType = "text"
)

// Defines values for CreateChatCompletionResponseChoicesFinishReason.
const (
	CreateChatCompletionResponseChoicesFinishReasonContentFilter CreateChatCompletionResponseChoicesFinishReason = "content_filter"
	CreateChatCompletionResponseChoicesFinishReasonFunctionCall  CreateChatCompletionResponseChoicesFinishReason = "function_call"
	CreateChatCompletionResponseChoicesFinishReasonLength        CreateChatCompletionResponseChoicesFinishReason = "length"
	CreateChatCompletionResponseChoicesFinishReasonStop          CreateChatCompletionResponseChoicesFinishReason = "stop"
	CreateChatCompletionResponseChoicesFinishReasonToolCalls     CreateChatCompletionResponseChoicesFinishReason = "tool_calls"
)

// Defines values for CreateChatCompletionResponseObject.
const (
	CreateChatCompletionResponseObjectChatCompletion CreateChatCompletionResponseObject = "chat.completion"
)

// Defines values for CreateChatCompletionStreamResponseChoicesFinishReason.
const (
	CreateChatCompletionStreamResponseChoicesFinishReasonContentFilter CreateChatCompletionStreamResponseChoicesFinishReason = "content_filter"
	CreateChatCompletionStreamResponseChoicesFinishReasonFunctionCall  CreateChatCompletionStreamResponseChoicesFinishReason = "function_call"
	CreateChatCompletionStreamResponseChoicesFinishReasonLength        CreateChatCompletionStreamResponseChoicesFinishReason = "length"
	CreateChatCompletionStreamResponseChoicesFinishReasonStop          CreateChatCompletionStreamResponseChoicesFinishReason = "stop"
	CreateChatCompletionStreamResponseChoicesFinishReasonToolCalls     CreateChatCompletionStreamResponseChoicesFinishReason = "tool_calls"
)

// Defines values for CreateChatCompletionStreamResponseObject.
const (
	CreateChatCompletionStreamResponseObjectChatCompletionChunk CreateChatCompletionStreamResponseObject = "chat.completion.chunk"
)

// Defines values for CreateCompletionRequestModel1.
const (
	CreateCompletionRequestModel1Babbage002         CreateCompletionRequestModel1 = "babbage-002"
	CreateCompletionRequestModel1Davinci002         CreateCompletionRequestModel1 = "davinci-002"
	CreateCompletionRequestModel1Gpt35TurboInstruct CreateCompletionRequestModel1 = "gpt-3.5-turbo-instruct"
)

// Defines values for CreateCompletionResponseChoicesFinishReason.
const (
	CreateCompletionResponseChoicesFinishReasonContentFilter CreateCompletionResponseChoicesFinishReason = "content_filter"
	CreateCompletionResponseChoicesFinishReasonLength        CreateCompletionResponseChoicesFinishReason = "length"
	CreateCompletionResponseChoicesFinishReasonStop          CreateCompletionResponseChoicesFinishReason = "stop"
)

// Defines values for CreateCompletionResponseObject.
const (
	CreateCompletionResponseObjectTextCompletion CreateCompletionResponseObject = "text_completion"
)

// Defines values for CreateEmbeddingRequestEncodingFormat.
const (
	CreateEmbeddingRequestEncodingFormatBase64 CreateEmbeddingRequestEncodingFormat = "base64"
	CreateEmbeddingRequestEncodingFormatFloat  CreateEmbeddingRequestEncodingFormat = "float"
)

// Defines values for CreateEmbeddingRequestModel1.
const (
	CreateEmbeddingRequestModel1TextEmbedding3Large CreateEmbeddingRequestModel1 = "text-embedding-3-large"
	CreateEmbeddingRequestModel1TextEmbedding3Small CreateEmbeddingRequestModel1 = "text-embedding-3-small"
	CreateEmbeddingRequestModel1TextEmbeddingAda002 CreateEmbeddingRequestModel1 = "text-embedding-ada-002"
)

// Defines values for CreateEmbeddingResponseObject.
const (
	CreateEmbeddingResponseObjectList CreateEmbeddingResponseObject = "list"
)

// Defines values for CreateFileRequestPurpose.
const (
	CreateFileRequestPurposeAssistants CreateFileRequestPurpose = "assistants"
	CreateFileRequestPurposeFineTune   CreateFileRequestPurpose = "fine-tune"
)

// Defines values for CreateFineTuningJobRequestHyperparametersBatchSize0.
const (
	CreateFineTuningJobRequestHyperparametersBatchSize0Auto CreateFineTuningJobRequestHyperparametersBatchSize0 = "auto"
)

// Defines values for CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0.
const (
	CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0Auto CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 = "auto"
)

// Defines values for CreateFineTuningJobRequestHyperparametersNEpochs0.
const (
	CreateFineTuningJobRequestHyperparametersNEpochs0Auto CreateFineTuningJobRequestHyperparametersNEpochs0 = "auto"
)

// Defines values for CreateFineTuningJobRequestModel1.
const (
	CreateFineTuningJobRequestModel1Babbage002 CreateFineTuningJobRequestModel1 = "babbage-002"
	CreateFineTuningJobRequestModel1Davinci002 CreateFineTuningJobRequestModel1 = "davinci-002"
	CreateFineTuningJobRequestModel1Gpt35Turbo CreateFineTuningJobRequestModel1 = "gpt-3.5-turbo"
)

// Defines values for CreateImageEditRequestModel1.
const (
	CreateImageEditRequestModel1DallE2 CreateImageEditRequestModel1 = "dall-e-2"
)

// Defines values for CreateImageEditRequestResponseFormat.
const (
	CreateImageEditRequestResponseFormatB64Json CreateImageEditRequestResponseFormat = "b64_json"
	CreateImageEditRequestResponseFormatUrl     CreateImageEditRequestResponseFormat = "url"
)

// Defines values for CreateImageEditRequestSize.
const (
	CreateImageEditRequestSizeN1024x1024 CreateImageEditRequestSize = "1024x1024"
	CreateImageEditRequestSizeN256x256   CreateImageEditRequestSize = "256x256"
	CreateImageEditRequestSizeN512x512   CreateImageEditRequestSize = "512x512"
)

// Defines values for CreateImageRequestModel1.
const (
	CreateImageRequestModel1DallE2 CreateImageRequestModel1 = "dall-e-2"
	CreateImageRequestModel1DallE3 CreateImageRequestModel1 = "dall-e-3"
)

// Defines values for CreateImageRequestQuality.
const (
	CreateImageRequestQualityHd       CreateImageRequestQuality = "hd"
	CreateImageRequestQualityStandard CreateImageRequestQuality = "standard"
)

// Defines values for CreateImageRequestResponseFormat.
const (
	CreateImageRequestResponseFormatB64Json CreateImageRequestResponseFormat = "b64_json"
	CreateImageRequestResponseFormatUrl     CreateImageRequestResponseFormat = "url"
)

// Defines values for CreateImageRequestSize.
const (
	CreateImageRequestSizeN1024x1024 CreateImageRequestSize = "1024x1024"
	CreateImageRequestSizeN1024x1792 CreateImageRequestSize = "1024x1792"
	CreateImageRequestSizeN1792x1024 CreateImageRequestSize = "1792x1024"
	CreateImageRequestSizeN256x256   CreateImageRequestSize = "256x256"
	CreateImageRequestSizeN512x512   CreateImageRequestSize = "512x512"
)

// Defines values for CreateImageRequestStyle.
const (
	CreateImageRequestStyleNatural CreateImageRequestStyle = "natural"
	CreateImageRequestStyleVivid   CreateImageRequestStyle = "vivid"
)

// Defines values for CreateImageVariationRequestModel1.
const (
	CreateImageVariationRequestModel1DallE2 CreateImageVariationRequestModel1 = "dall-e-2"
)

// Defines values for CreateImageVariationRequestResponseFormat.
const (
	CreateImageVariationRequestResponseFormatB64Json CreateImageVariationRequestResponseFormat = "b64_json"
	CreateImageVariationRequestResponseFormatUrl     CreateImageVariationRequestResponseFormat = "url"
)

// Defines values for CreateImageVariationRequestSize.
const (
	CreateImageVariationRequestSizeN1024x1024 CreateImageVariationRequestSize = "1024x1024"
	CreateImageVariationRequestSizeN256x256   CreateImageVariationRequestSize = "256x256"
	CreateImageVariationRequestSizeN512x512   CreateImageVariationRequestSize = "512x512"
)

// Defines values for CreateMessageRequestRole.
const (
	CreateMessageRequestRoleUser CreateMessageRequestRole = "user"
)

// Defines values for CreateModerationRequestModel1.
const (
	CreateModerationRequestModel1TextModerationLatest CreateModerationRequestModel1 = "text-moderation-latest"
	CreateModerationRequestModel1TextModerationStable CreateModerationRequestModel1 = "text-moderation-stable"
)

// Defines values for CreateSpeechRequestModel1.
const (
	CreateSpeechRequestModel1Tts1   CreateSpeechRequestModel1 = "tts-1"
	CreateSpeechRequestModel1Tts1Hd CreateSpeechRequestModel1 = "tts-1-hd"
)

// Defines values for CreateSpeechRequestResponseFormat.
const (
	CreateSpeechRequestResponseFormatAac  CreateSpeechRequestResponseFormat = "aac"
	CreateSpeechRequestResponseFormatFlac CreateSpeechRequestResponseFormat = "flac"
	CreateSpeechRequestResponseFormatMp3  CreateSpeechRequestResponseFormat = "mp3"
	CreateSpeechRequestResponseFormatOpus CreateSpeechRequestResponseFormat = "opus"
	CreateSpeechRequestResponseFormatPcm  CreateSpeechRequestResponseFormat = "pcm"
	CreateSpeechRequestResponseFormatWav  CreateSpeechRequestResponseFormat = "wav"
)

// Defines values for CreateSpeechRequestVoice.
const (
	CreateSpeechRequestVoiceAlloy   CreateSpeechRequestVoice = "alloy"
	CreateSpeechRequestVoiceEcho    CreateSpeechRequestVoice = "echo"
	CreateSpeechRequestVoiceFable   CreateSpeechRequestVoice = "fable"
	CreateSpeechRequestVoiceNova    CreateSpeechRequestVoice = "nova"
	CreateSpeechRequestVoiceOnyx    CreateSpeechRequestVoice = "onyx"
	CreateSpeechRequestVoiceShimmer CreateSpeechRequestVoice = "shimmer"
)

// Defines values for CreateTranscriptionRequestModel1.
const (
	CreateTranscriptionRequestModel1Whisper1 CreateTranscriptionRequestModel1 = "whisper-1"
)

// Defines values for CreateTranscriptionRequestResponseFormat.
const (
	CreateTranscriptionRequestResponseFormatJson        CreateTranscriptionRequestResponseFormat = "json"
	CreateTranscriptionRequestResponseFormatSrt         CreateTranscriptionRequestResponseFormat = "srt"
	CreateTranscriptionRequestResponseFormatText        CreateTranscriptionRequestResponseFormat = "text"
	CreateTranscriptionRequestResponseFormatVerboseJson CreateTranscriptionRequestResponseFormat = "verbose_json"
	CreateTranscriptionRequestResponseFormatVtt         CreateTranscriptionRequestResponseFormat = "vtt"
)

// Defines values for CreateTranscriptionRequestTimestampGranularities.
const (
	CreateTranscriptionRequestTimestampGranularitiesSegment CreateTranscriptionRequestTimestampGranularities = "segment"
	CreateTranscriptionRequestTimestampGranularitiesWord    CreateTranscriptionRequestTimestampGranularities = "word"
)

// Defines values for CreateTranslationRequestModel1.
const (
	CreateTranslationRequestModel1Whisper1 CreateTranslationRequestModel1 = "whisper-1"
)

// Defines values for DeleteAssistantFileResponseObject.
const (
	DeleteAssistantFileResponseObjectAssistantFileDeleted DeleteAssistantFileResponseObject = "assistant.file.deleted"
)

// Defines values for DeleteAssistantResponseObject.
const (
	DeleteAssistantResponseObjectAssistantDeleted DeleteAssistantResponseObject = "assistant.deleted"
)

// Defines values for DeleteFileResponseObject.
const (
	DeleteFileResponseObjectFile DeleteFileResponseObject = "file"
)

// Defines values for DeleteMessageResponseObject.
const (
	DeleteMessageResponseObjectThreadMessageDeleted DeleteMessageResponseObject = "thread.message.deleted"
)

// Defines values for DeleteThreadResponseObject.
const (
	DeleteThreadResponseObjectThreadDeleted DeleteThreadResponseObject = "thread.deleted"
)

// Defines values for DoneEventData.
const (
	DoneEventDataDONE DoneEventData = "[DONE]"
)

// Defines values for DoneEventEvent.
const (
	DoneEventEventDone DoneEventEvent = "done"
)

// Defines values for EmbeddingObject.
const (
	EmbeddingObjectEmbedding EmbeddingObject = "embedding"
)

// Defines values for ErrorEventEvent.
const (
	ErrorEventEventError ErrorEventEvent = "error"
)

// Defines values for ExtendedAssistantFileObjectObject.
const (
	ExtendedAssistantFileObjectObjectAssistantFile ExtendedAssistantFileObjectObject = "assistant.file"
)

// Defines values for ExtendedAssistantObjectObject.
const (
	ExtendedAssistantObjectObjectAssistant ExtendedAssistantObjectObject = "assistant"
)

// Defines values for ExtendedAssistantToolsCodeType.
const (
	ExtendedAssistantToolsCodeTypeCodeInterpreter ExtendedAssistantToolsCodeType = "code_interpreter"
)

// Defines values for ExtendedAssistantToolsFunctionType.
const (
	ExtendedAssistantToolsFunctionTypeFunction ExtendedAssistantToolsFunctionType = "function"
)

// Defines values for ExtendedAssistantToolsRetrievalType.
const (
	ExtendedAssistantToolsRetrievalTypeRetrieval ExtendedAssistantToolsRetrievalType = "retrieval"
)

// Defines values for ExtendedChatCompletionMessageToolCallType.
const (
	ExtendedChatCompletionMessageToolCallTypeFunction ExtendedChatCompletionMessageToolCallType = "function"
)

// Defines values for ExtendedChatCompletionMessageToolCallChunkType.
const (
	ExtendedChatCompletionMessageToolCallChunkTypeFunction ExtendedChatCompletionMessageToolCallChunkType = "function"
)

// Defines values for ExtendedChatCompletionNamedToolChoiceType.
const (
	ExtendedChatCompletionNamedToolChoiceTypeFunction ExtendedChatCompletionNamedToolChoiceType = "function"
)

// Defines values for ExtendedChatCompletionRequestAssistantMessageRole.
const (
	ExtendedChatCompletionRequestAssistantMessageRoleAssistant ExtendedChatCompletionRequestAssistantMessageRole = "assistant"
)

// Defines values for ExtendedChatCompletionRequestFunctionMessageRole.
const (
	ExtendedChatCompletionRequestFunctionMessageRoleFunction ExtendedChatCompletionRequestFunctionMessageRole = "function"
)

// Defines values for ExtendedChatCompletionRequestMessageContentPartImageImageUrlDetail.
const (
	ExtendedChatCompletionRequestMessageContentPartImageImageUrlDetailAuto ExtendedChatCompletionRequestMessageContentPartImageImageUrlDetail = "auto"
	ExtendedChatCompletionRequestMessageContentPartImageImageUrlDetailHigh ExtendedChatCompletionRequestMessageContentPartImageImageUrlDetail = "high"
	ExtendedChatCompletionRequestMessageContentPartImageImageUrlDetailLow  ExtendedChatCompletionRequestMessageContentPartImageImageUrlDetail = "low"
)

// Defines values for ExtendedChatCompletionRequestMessageContentPartImageType.
const (
	ExtendedChatCompletionRequestMessageContentPartImageTypeImageUrl ExtendedChatCompletionRequestMessageContentPartImageType = "image_url"
)

// Defines values for ExtendedChatCompletionRequestMessageContentPartTextType.
const (
	ExtendedChatCompletionRequestMessageContentPartTextTypeText ExtendedChatCompletionRequestMessageContentPartTextType = "text"
)

// Defines values for ExtendedChatCompletionRequestSystemMessageRole.
const (
	ExtendedChatCompletionRequestSystemMessageRoleSystem ExtendedChatCompletionRequestSystemMessageRole = "system"
)

// Defines values for ExtendedChatCompletionRequestToolMessageRole.
const (
	ExtendedChatCompletionRequestToolMessageRoleTool ExtendedChatCompletionRequestToolMessageRole = "tool"
)

// Defines values for ExtendedChatCompletionRequestUserMessageRole.
const (
	ExtendedChatCompletionRequestUserMessageRoleUser ExtendedChatCompletionRequestUserMessageRole = "user"
)

// Defines values for ExtendedChatCompletionResponseMessageRole.
const (
	ExtendedChatCompletionResponseMessageRoleAssistant ExtendedChatCompletionResponseMessageRole = "assistant"
)

// Defines values for ExtendedChatCompletionRole.
const (
	ExtendedChatCompletionRoleAssistant ExtendedChatCompletionRole = "assistant"
	ExtendedChatCompletionRoleFunction  ExtendedChatCompletionRole = "function"
	ExtendedChatCompletionRoleSystem    ExtendedChatCompletionRole = "system"
	ExtendedChatCompletionRoleTool      ExtendedChatCompletionRole = "tool"
	ExtendedChatCompletionRoleUser      ExtendedChatCompletionRole = "user"
)

// Defines values for ExtendedChatCompletionStreamResponseDeltaRole.
const (
	ExtendedChatCompletionStreamResponseDeltaRoleAssistant ExtendedChatCompletionStreamResponseDeltaRole = "assistant"
	ExtendedChatCompletionStreamResponseDeltaRoleSystem    ExtendedChatCompletionStreamResponseDeltaRole = "system"
	ExtendedChatCompletionStreamResponseDeltaRoleTool      ExtendedChatCompletionStreamResponseDeltaRole = "tool"
	ExtendedChatCompletionStreamResponseDeltaRoleUser      ExtendedChatCompletionStreamResponseDeltaRole = "user"
)

// Defines values for ExtendedChatCompletionToolType.
const (
	ExtendedChatCompletionToolTypeFunction ExtendedChatCompletionToolType = "function"
)

// Defines values for ExtendedChatCompletionToolChoiceOption0.
const (
	ExtendedChatCompletionToolChoiceOption0Auto ExtendedChatCompletionToolChoiceOption0 = "auto"
	ExtendedChatCompletionToolChoiceOption0None ExtendedChatCompletionToolChoiceOption0 = "none"
)

// Defines values for ExtendedCreateChatCompletionFunctionResponseChoicesFinishReason.
const (
	ExtendedCreateChatCompletionFunctionResponseChoicesFinishReasonContentFilter ExtendedCreateChatCompletionFunctionResponseChoicesFinishReason = "content_filter"
	ExtendedCreateChatCompletionFunctionResponseChoicesFinishReasonFunctionCall  ExtendedCreateChatCompletionFunctionResponseChoicesFinishReason = "function_call"
	ExtendedCreateChatCompletionFunctionResponseChoicesFinishReasonLength        ExtendedCreateChatCompletionFunctionResponseChoicesFinishReason = "length"
	ExtendedCreateChatCompletionFunctionResponseChoicesFinishReasonStop          ExtendedCreateChatCompletionFunctionResponseChoicesFinishReason = "stop"
)

// Defines values for ExtendedCreateChatCompletionFunctionResponseObject.
const (
	ExtendedCreateChatCompletionFunctionResponseObjectChatCompletion ExtendedCreateChatCompletionFunctionResponseObject = "chat.completion"
)

// Defines values for ExtendedCreateChatCompletionRequestFunctionCall0.
const (
	ExtendedCreateChatCompletionRequestFunctionCall0Auto ExtendedCreateChatCompletionRequestFunctionCall0 = "auto"
	ExtendedCreateChatCompletionRequestFunctionCall0None ExtendedCreateChatCompletionRequestFunctionCall0 = "none"
)

// Defines values for ExtendedCreateChatCompletionRequestModel1.
const (
	ExtendedCreateChatCompletionRequestModel1Gpt35Turbo        ExtendedCreateChatCompletionRequestModel1 = "gpt-3.5-turbo"
	ExtendedCreateChatCompletionRequestModel1Gpt35Turbo0125    ExtendedCreateChatCompletionRequestModel1 = "gpt-3.5-turbo-0125"
	ExtendedCreateChatCompletionRequestModel1Gpt35Turbo0301    ExtendedCreateChatCompletionRequestModel1 = "gpt-3.5-turbo-0301"
	ExtendedCreateChatCompletionRequestModel1Gpt35Turbo0613    ExtendedCreateChatCompletionRequestModel1 = "gpt-3.5-turbo-0613"
	ExtendedCreateChatCompletionRequestModel1Gpt35Turbo1106    ExtendedCreateChatCompletionRequestModel1 = "gpt-3.5-turbo-1106"
	ExtendedCreateChatCompletionRequestModel1Gpt35Turbo16k     ExtendedCreateChatCompletionRequestModel1 = "gpt-3.5-turbo-16k"
	ExtendedCreateChatCompletionRequestModel1Gpt35Turbo16k0613 ExtendedCreateChatCompletionRequestModel1 = "gpt-3.5-turbo-16k-0613"
	ExtendedCreateChatCompletionRequestModel1Gpt4              ExtendedCreateChatCompletionRequestModel1 = "gpt-4"
	ExtendedCreateChatCompletionRequestModel1Gpt40125Preview   ExtendedCreateChatCompletionRequestModel1 = "gpt-4-0125-preview"
	ExtendedCreateChatCompletionRequestModel1Gpt40314          ExtendedCreateChatCompletionRequestModel1 = "gpt-4-0314"
	ExtendedCreateChatCompletionRequestModel1Gpt40613          ExtendedCreateChatCompletionRequestModel1 = "gpt-4-0613"
	ExtendedCreateChatCompletionRequestModel1Gpt41106Preview   ExtendedCreateChatCompletionRequestModel1 = "gpt-4-1106-preview"
	ExtendedCreateChatCompletionRequestModel1Gpt432k           ExtendedCreateChatCompletionRequestModel1 = "gpt-4-32k"
	ExtendedCreateChatCompletionRequestModel1Gpt432k0314       ExtendedCreateChatCompletionRequestModel1 = "gpt-4-32k-0314"
	ExtendedCreateChatCompletionRequestModel1Gpt432k0613       ExtendedCreateChatCompletionRequestModel1 = "gpt-4-32k-0613"
	ExtendedCreateChatCompletionRequestModel1Gpt4TurboPreview  ExtendedCreateChatCompletionRequestModel1 = "gpt-4-turbo-preview"
	ExtendedCreateChatCompletionRequestModel1Gpt4VisionPreview ExtendedCreateChatCompletionRequestModel1 = "gpt-4-vision-preview"
)

// Defines values for ExtendedCreateChatCompletionRequestResponseFormatType.
const (
	ExtendedCreateChatCompletionRequestResponseFormatTypeJsonObject ExtendedCreateChatCompletionRequestResponseFormatType = "json_object"
	ExtendedCreateChatCompletionRequestResponseFormatTypeText       ExtendedCreateChatCompletionRequestResponseFormatType = "text"
)

// Defines values for ExtendedCreateChatCompletionResponseChoicesFinishReason.
const (
	ExtendedCreateChatCompletionResponseChoicesFinishReasonContentFilter ExtendedCreateChatCompletionResponseChoicesFinishReason = "content_filter"
	ExtendedCreateChatCompletionResponseChoicesFinishReasonFunctionCall  ExtendedCreateChatCompletionResponseChoicesFinishReason = "function_call"
	ExtendedCreateChatCompletionResponseChoicesFinishReasonLength        ExtendedCreateChatCompletionResponseChoicesFinishReason = "length"
	ExtendedCreateChatCompletionResponseChoicesFinishReasonStop          ExtendedCreateChatCompletionResponseChoicesFinishReason = "stop"
	ExtendedCreateChatCompletionResponseChoicesFinishReasonToolCalls     ExtendedCreateChatCompletionResponseChoicesFinishReason = "tool_calls"
)

// Defines values for ExtendedCreateChatCompletionResponseObject.
const (
	ExtendedCreateChatCompletionResponseObjectChatCompletion ExtendedCreateChatCompletionResponseObject = "chat.completion"
)

// Defines values for ExtendedCreateChatCompletionStreamResponseChoicesFinishReason.
const (
	ExtendedCreateChatCompletionStreamResponseChoicesFinishReasonContentFilter ExtendedCreateChatCompletionStreamResponseChoicesFinishReason = "content_filter"
	ExtendedCreateChatCompletionStreamResponseChoicesFinishReasonFunctionCall  ExtendedCreateChatCompletionStreamResponseChoicesFinishReason = "function_call"
	ExtendedCreateChatCompletionStreamResponseChoicesFinishReasonLength        ExtendedCreateChatCompletionStreamResponseChoicesFinishReason = "length"
	ExtendedCreateChatCompletionStreamResponseChoicesFinishReasonStop          ExtendedCreateChatCompletionStreamResponseChoicesFinishReason = "stop"
	ExtendedCreateChatCompletionStreamResponseChoicesFinishReasonToolCalls     ExtendedCreateChatCompletionStreamResponseChoicesFinishReason = "tool_calls"
)

// Defines values for ExtendedCreateChatCompletionStreamResponseObject.
const (
	ExtendedCreateChatCompletionStreamResponseObjectChatCompletionChunk ExtendedCreateChatCompletionStreamResponseObject = "chat.completion.chunk"
)

// Defines values for ExtendedCreateCompletionRequestModel1.
const (
	ExtendedCreateCompletionRequestModel1Babbage002         ExtendedCreateCompletionRequestModel1 = "babbage-002"
	ExtendedCreateCompletionRequestModel1Davinci002         ExtendedCreateCompletionRequestModel1 = "davinci-002"
	ExtendedCreateCompletionRequestModel1Gpt35TurboInstruct ExtendedCreateCompletionRequestModel1 = "gpt-3.5-turbo-instruct"
)

// Defines values for ExtendedCreateCompletionResponseChoicesFinishReason.
const (
	ExtendedCreateCompletionResponseChoicesFinishReasonContentFilter ExtendedCreateCompletionResponseChoicesFinishReason = "content_filter"
	ExtendedCreateCompletionResponseChoicesFinishReasonLength        ExtendedCreateCompletionResponseChoicesFinishReason = "length"
	ExtendedCreateCompletionResponseChoicesFinishReasonStop          ExtendedCreateCompletionResponseChoicesFinishReason = "stop"
)

// Defines values for ExtendedCreateCompletionResponseObject.
const (
	ExtendedCreateCompletionResponseObjectTextCompletion ExtendedCreateCompletionResponseObject = "text_completion"
)

// Defines values for ExtendedCreateEmbeddingRequestEncodingFormat.
const (
	ExtendedCreateEmbeddingRequestEncodingFormatBase64 ExtendedCreateEmbeddingRequestEncodingFormat = "base64"
	ExtendedCreateEmbeddingRequestEncodingFormatFloat  ExtendedCreateEmbeddingRequestEncodingFormat = "float"
)

// Defines values for ExtendedCreateEmbeddingRequestModel1.
const (
	ExtendedCreateEmbeddingRequestModel1TextEmbedding3Large ExtendedCreateEmbeddingRequestModel1 = "text-embedding-3-large"
	ExtendedCreateEmbeddingRequestModel1TextEmbedding3Small ExtendedCreateEmbeddingRequestModel1 = "text-embedding-3-small"
	ExtendedCreateEmbeddingRequestModel1TextEmbeddingAda002 ExtendedCreateEmbeddingRequestModel1 = "text-embedding-ada-002"
)

// Defines values for ExtendedCreateEmbeddingResponseObject.
const (
	ExtendedCreateEmbeddingResponseObjectList ExtendedCreateEmbeddingResponseObject = "list"
)

// Defines values for ExtendedCreateFileRequestPurpose.
const (
	ExtendedCreateFileRequestPurposeAssistants ExtendedCreateFileRequestPurpose = "assistants"
	ExtendedCreateFileRequestPurposeFineTune   ExtendedCreateFileRequestPurpose = "fine-tune"
)

// Defines values for ExtendedCreateFineTuningJobRequestHyperparametersBatchSize0.
const (
	ExtendedCreateFineTuningJobRequestHyperparametersBatchSize0Auto ExtendedCreateFineTuningJobRequestHyperparametersBatchSize0 = "auto"
)

// Defines values for ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0.
const (
	ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0Auto ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 = "auto"
)

// Defines values for ExtendedCreateFineTuningJobRequestHyperparametersNEpochs0.
const (
	ExtendedCreateFineTuningJobRequestHyperparametersNEpochs0Auto ExtendedCreateFineTuningJobRequestHyperparametersNEpochs0 = "auto"
)

// Defines values for ExtendedCreateFineTuningJobRequestModel1.
const (
	ExtendedCreateFineTuningJobRequestModel1Babbage002 ExtendedCreateFineTuningJobRequestModel1 = "babbage-002"
	ExtendedCreateFineTuningJobRequestModel1Davinci002 ExtendedCreateFineTuningJobRequestModel1 = "davinci-002"
	ExtendedCreateFineTuningJobRequestModel1Gpt35Turbo ExtendedCreateFineTuningJobRequestModel1 = "gpt-3.5-turbo"
)

// Defines values for ExtendedCreateImageEditRequestModel1.
const (
	ExtendedCreateImageEditRequestModel1DallE2 ExtendedCreateImageEditRequestModel1 = "dall-e-2"
)

// Defines values for ExtendedCreateImageEditRequestResponseFormat.
const (
	ExtendedCreateImageEditRequestResponseFormatB64Json ExtendedCreateImageEditRequestResponseFormat = "b64_json"
	ExtendedCreateImageEditRequestResponseFormatUrl     ExtendedCreateImageEditRequestResponseFormat = "url"
)

// Defines values for ExtendedCreateImageEditRequestSize.
const (
	ExtendedCreateImageEditRequestSizeN1024x1024 ExtendedCreateImageEditRequestSize = "1024x1024"
	ExtendedCreateImageEditRequestSizeN256x256   ExtendedCreateImageEditRequestSize = "256x256"
	ExtendedCreateImageEditRequestSizeN512x512   ExtendedCreateImageEditRequestSize = "512x512"
)

// Defines values for ExtendedCreateImageRequestModel1.
const (
	ExtendedCreateImageRequestModel1DallE2 ExtendedCreateImageRequestModel1 = "dall-e-2"
	ExtendedCreateImageRequestModel1DallE3 ExtendedCreateImageRequestModel1 = "dall-e-3"
)

// Defines values for ExtendedCreateImageRequestQuality.
const (
	ExtendedCreateImageRequestQualityHd       ExtendedCreateImageRequestQuality = "hd"
	ExtendedCreateImageRequestQualityStandard ExtendedCreateImageRequestQuality = "standard"
)

// Defines values for ExtendedCreateImageRequestResponseFormat.
const (
	ExtendedCreateImageRequestResponseFormatB64Json ExtendedCreateImageRequestResponseFormat = "b64_json"
	ExtendedCreateImageRequestResponseFormatUrl     ExtendedCreateImageRequestResponseFormat = "url"
)

// Defines values for ExtendedCreateImageRequestSize.
const (
	ExtendedCreateImageRequestSizeN1024x1024 ExtendedCreateImageRequestSize = "1024x1024"
	ExtendedCreateImageRequestSizeN1024x1792 ExtendedCreateImageRequestSize = "1024x1792"
	ExtendedCreateImageRequestSizeN1792x1024 ExtendedCreateImageRequestSize = "1792x1024"
	ExtendedCreateImageRequestSizeN256x256   ExtendedCreateImageRequestSize = "256x256"
	ExtendedCreateImageRequestSizeN512x512   ExtendedCreateImageRequestSize = "512x512"
)

// Defines values for ExtendedCreateImageRequestStyle.
const (
	ExtendedCreateImageRequestStyleNatural ExtendedCreateImageRequestStyle = "natural"
	ExtendedCreateImageRequestStyleVivid   ExtendedCreateImageRequestStyle = "vivid"
)

// Defines values for ExtendedCreateImageVariationRequestModel1.
const (
	ExtendedCreateImageVariationRequestModel1DallE2 ExtendedCreateImageVariationRequestModel1 = "dall-e-2"
)

// Defines values for ExtendedCreateImageVariationRequestResponseFormat.
const (
	ExtendedCreateImageVariationRequestResponseFormatB64Json ExtendedCreateImageVariationRequestResponseFormat = "b64_json"
	ExtendedCreateImageVariationRequestResponseFormatUrl     ExtendedCreateImageVariationRequestResponseFormat = "url"
)

// Defines values for ExtendedCreateImageVariationRequestSize.
const (
	ExtendedCreateImageVariationRequestSizeN1024x1024 ExtendedCreateImageVariationRequestSize = "1024x1024"
	ExtendedCreateImageVariationRequestSizeN256x256   ExtendedCreateImageVariationRequestSize = "256x256"
	ExtendedCreateImageVariationRequestSizeN512x512   ExtendedCreateImageVariationRequestSize = "512x512"
)

// Defines values for ExtendedCreateMessageRequestRole.
const (
	ExtendedCreateMessageRequestRoleUser ExtendedCreateMessageRequestRole = "user"
)

// Defines values for ExtendedCreateModerationRequestModel1.
const (
	ExtendedCreateModerationRequestModel1TextModerationLatest ExtendedCreateModerationRequestModel1 = "text-moderation-latest"
	ExtendedCreateModerationRequestModel1TextModerationStable ExtendedCreateModerationRequestModel1 = "text-moderation-stable"
)

// Defines values for ExtendedCreateSpeechRequestModel1.
const (
	ExtendedCreateSpeechRequestModel1Tts1   ExtendedCreateSpeechRequestModel1 = "tts-1"
	ExtendedCreateSpeechRequestModel1Tts1Hd ExtendedCreateSpeechRequestModel1 = "tts-1-hd"
)

// Defines values for ExtendedCreateSpeechRequestResponseFormat.
const (
	ExtendedCreateSpeechRequestResponseFormatAac  ExtendedCreateSpeechRequestResponseFormat = "aac"
	ExtendedCreateSpeechRequestResponseFormatFlac ExtendedCreateSpeechRequestResponseFormat = "flac"
	ExtendedCreateSpeechRequestResponseFormatMp3  ExtendedCreateSpeechRequestResponseFormat = "mp3"
	ExtendedCreateSpeechRequestResponseFormatOpus ExtendedCreateSpeechRequestResponseFormat = "opus"
	ExtendedCreateSpeechRequestResponseFormatPcm  ExtendedCreateSpeechRequestResponseFormat = "pcm"
	ExtendedCreateSpeechRequestResponseFormatWav  ExtendedCreateSpeechRequestResponseFormat = "wav"
)

// Defines values for ExtendedCreateSpeechRequestVoice.
const (
	ExtendedCreateSpeechRequestVoiceAlloy   ExtendedCreateSpeechRequestVoice = "alloy"
	ExtendedCreateSpeechRequestVoiceEcho    ExtendedCreateSpeechRequestVoice = "echo"
	ExtendedCreateSpeechRequestVoiceFable   ExtendedCreateSpeechRequestVoice = "fable"
	ExtendedCreateSpeechRequestVoiceNova    ExtendedCreateSpeechRequestVoice = "nova"
	ExtendedCreateSpeechRequestVoiceOnyx    ExtendedCreateSpeechRequestVoice = "onyx"
	ExtendedCreateSpeechRequestVoiceShimmer ExtendedCreateSpeechRequestVoice = "shimmer"
)

// Defines values for ExtendedCreateTranscriptionRequestModel1.
const (
	ExtendedCreateTranscriptionRequestModel1Whisper1 ExtendedCreateTranscriptionRequestModel1 = "whisper-1"
)

// Defines values for ExtendedCreateTranscriptionRequestResponseFormat.
const (
	ExtendedCreateTranscriptionRequestResponseFormatJson        ExtendedCreateTranscriptionRequestResponseFormat = "json"
	ExtendedCreateTranscriptionRequestResponseFormatSrt         ExtendedCreateTranscriptionRequestResponseFormat = "srt"
	ExtendedCreateTranscriptionRequestResponseFormatText        ExtendedCreateTranscriptionRequestResponseFormat = "text"
	ExtendedCreateTranscriptionRequestResponseFormatVerboseJson ExtendedCreateTranscriptionRequestResponseFormat = "verbose_json"
	ExtendedCreateTranscriptionRequestResponseFormatVtt         ExtendedCreateTranscriptionRequestResponseFormat = "vtt"
)

// Defines values for ExtendedCreateTranscriptionRequestTimestampGranularities.
const (
	ExtendedCreateTranscriptionRequestTimestampGranularitiesSegment ExtendedCreateTranscriptionRequestTimestampGranularities = "segment"
	ExtendedCreateTranscriptionRequestTimestampGranularitiesWord    ExtendedCreateTranscriptionRequestTimestampGranularities = "word"
)

// Defines values for ExtendedCreateTranslationRequestModel1.
const (
	ExtendedCreateTranslationRequestModel1Whisper1 ExtendedCreateTranslationRequestModel1 = "whisper-1"
)

// Defines values for ExtendedDeleteAssistantFileResponseObject.
const (
	ExtendedDeleteAssistantFileResponseObjectAssistantFileDeleted ExtendedDeleteAssistantFileResponseObject = "assistant.file.deleted"
)

// Defines values for ExtendedDeleteAssistantResponseObject.
const (
	ExtendedDeleteAssistantResponseObjectAssistantDeleted ExtendedDeleteAssistantResponseObject = "assistant.deleted"
)

// Defines values for ExtendedDeleteFileResponseObject.
const (
	ExtendedDeleteFileResponseObjectFile ExtendedDeleteFileResponseObject = "file"
)

// Defines values for ExtendedDeleteMessageResponseObject.
const (
	ExtendedDeleteMessageResponseObjectThreadMessageDeleted ExtendedDeleteMessageResponseObject = "thread.message.deleted"
)

// Defines values for ExtendedDeleteThreadResponseObject.
const (
	ExtendedDeleteThreadResponseObjectThreadDeleted ExtendedDeleteThreadResponseObject = "thread.deleted"
)

// Defines values for ExtendedDoneEventData.
const (
	ExtendedDoneEventDataDONE ExtendedDoneEventData = "[DONE]"
)

// Defines values for ExtendedDoneEventEvent.
const (
	ExtendedDoneEventEventDone ExtendedDoneEventEvent = "done"
)

// Defines values for ExtendedEmbeddingObject.
const (
	ExtendedEmbeddingObjectEmbedding ExtendedEmbeddingObject = "embedding"
)

// Defines values for ExtendedErrorEventEvent.
const (
	ExtendedErrorEventEventError ExtendedErrorEventEvent = "error"
)

// Defines values for ExtendedFineTuningJobHyperparametersNEpochs0.
const (
	ExtendedFineTuningJobHyperparametersNEpochs0Auto ExtendedFineTuningJobHyperparametersNEpochs0 = "auto"
)

// Defines values for ExtendedFineTuningJobObject.
const (
	ExtendedFineTuningJobObjectFineTuningJob ExtendedFineTuningJobObject = "fine_tuning.job"
)

// Defines values for ExtendedFineTuningJobStatus.
const (
	ExtendedFineTuningJobStatusCancelled       ExtendedFineTuningJobStatus = "cancelled"
	ExtendedFineTuningJobStatusFailed          ExtendedFineTuningJobStatus = "failed"
	ExtendedFineTuningJobStatusQueued          ExtendedFineTuningJobStatus = "queued"
	ExtendedFineTuningJobStatusRunning         ExtendedFineTuningJobStatus = "running"
	ExtendedFineTuningJobStatusSucceeded       ExtendedFineTuningJobStatus = "succeeded"
	ExtendedFineTuningJobStatusValidatingFiles ExtendedFineTuningJobStatus = "validating_files"
)

// Defines values for ExtendedFineTuningJobEventLevel.
const (
	ExtendedFineTuningJobEventLevelError ExtendedFineTuningJobEventLevel = "error"
	ExtendedFineTuningJobEventLevelInfo  ExtendedFineTuningJobEventLevel = "info"
	ExtendedFineTuningJobEventLevelWarn  ExtendedFineTuningJobEventLevel = "warn"
)

// Defines values for ExtendedFineTuningJobEventObject.
const (
	ExtendedFineTuningJobEventObjectFineTuningJobEvent ExtendedFineTuningJobEventObject = "fine_tuning.job.event"
)

// Defines values for ExtendedListFilesResponseObject.
const (
	ExtendedListFilesResponseObjectList ExtendedListFilesResponseObject = "list"
)

// Defines values for ExtendedListFineTuningJobEventsResponseObject.
const (
	ExtendedListFineTuningJobEventsResponseObjectList ExtendedListFineTuningJobEventsResponseObject = "list"
)

// Defines values for ExtendedListModelsResponseObject.
const (
	ExtendedListModelsResponseObjectList ExtendedListModelsResponseObject = "list"
)

// Defines values for ExtendedListPaginatedFineTuningJobsResponseObject.
const (
	ExtendedListPaginatedFineTuningJobsResponseObjectList ExtendedListPaginatedFineTuningJobsResponseObject = "list"
)

// Defines values for ExtendedMessageContentImageFileObjectType.
const (
	ExtendedMessageContentImageFileObjectTypeImageFile ExtendedMessageContentImageFileObjectType = "image_file"
)

// Defines values for ExtendedMessageContentTextAnnotationsFileCitationObjectType.
const (
	ExtendedMessageContentTextAnnotationsFileCitationObjectTypeFileCitation ExtendedMessageContentTextAnnotationsFileCitationObjectType = "file_citation"
)

// Defines values for ExtendedMessageContentTextAnnotationsFilePathObjectType.
const (
	ExtendedMessageContentTextAnnotationsFilePathObjectTypeFilePath ExtendedMessageContentTextAnnotationsFilePathObjectType = "file_path"
)

// Defines values for ExtendedMessageContentTextObjectType.
const (
	ExtendedMessageContentTextObjectTypeText ExtendedMessageContentTextObjectType = "text"
)

// Defines values for ExtendedMessageDeltaContentImageFileObjectType.
const (
	ExtendedMessageDeltaContentImageFileObjectTypeImageFile ExtendedMessageDeltaContentImageFileObjectType = "image_file"
)

// Defines values for ExtendedMessageDeltaContentTextAnnotationsFileCitationObjectType.
const (
	ExtendedMessageDeltaContentTextAnnotationsFileCitationObjectTypeFileCitation ExtendedMessageDeltaContentTextAnnotationsFileCitationObjectType = "file_citation"
)

// Defines values for ExtendedMessageDeltaContentTextAnnotationsFilePathObjectType.
const (
	ExtendedMessageDeltaContentTextAnnotationsFilePathObjectTypeFilePath ExtendedMessageDeltaContentTextAnnotationsFilePathObjectType = "file_path"
)

// Defines values for ExtendedMessageDeltaContentTextObjectType.
const (
	ExtendedMessageDeltaContentTextObjectTypeText ExtendedMessageDeltaContentTextObjectType = "text"
)

// Defines values for ExtendedMessageDeltaObjectDeltaRole.
const (
	ExtendedMessageDeltaObjectDeltaRoleAssistant ExtendedMessageDeltaObjectDeltaRole = "assistant"
	ExtendedMessageDeltaObjectDeltaRoleUser      ExtendedMessageDeltaObjectDeltaRole = "user"
)

// Defines values for ExtendedMessageDeltaObjectObject.
const (
	ExtendedMessageDeltaObjectObjectThreadMessageDelta ExtendedMessageDeltaObjectObject = "thread.message.delta"
)

// Defines values for ExtendedMessageFileObjectObject.
const (
	ExtendedMessageFileObjectObjectThreadMessageFile ExtendedMessageFileObjectObject = "thread.message.file"
)

// Defines values for ExtendedMessageObjectObject.
const (
	ExtendedMessageObjectObjectThreadMessage ExtendedMessageObjectObject = "thread.message"
)

// Defines values for ExtendedMessageObjectRole.
const (
	ExtendedMessageObjectRoleAssistant ExtendedMessageObjectRole = "assistant"
	ExtendedMessageObjectRoleUser      ExtendedMessageObjectRole = "user"
)

// Defines values for ExtendedMessageObjectStatus.
const (
	ExtendedMessageObjectStatusCompleted  ExtendedMessageObjectStatus = "completed"
	ExtendedMessageObjectStatusInProgress ExtendedMessageObjectStatus = "in_progress"
	ExtendedMessageObjectStatusIncomplete ExtendedMessageObjectStatus = "incomplete"
)

// Defines values for ExtendedMessageStreamEvent0Event.
const (
	ExtendedMessageStreamEvent0EventThreadMessageCreated ExtendedMessageStreamEvent0Event = "thread.message.created"
)

// Defines values for ExtendedMessageStreamEvent1Event.
const (
	ExtendedMessageStreamEvent1EventThreadMessageInProgress ExtendedMessageStreamEvent1Event = "thread.message.in_progress"
)

// Defines values for ExtendedMessageStreamEvent2Event.
const (
	ExtendedMessageStreamEvent2EventThreadMessageDelta ExtendedMessageStreamEvent2Event = "thread.message.delta"
)

// Defines values for ExtendedMessageStreamEvent3Event.
const (
	ExtendedMessageStreamEvent3EventThreadMessageCompleted ExtendedMessageStreamEvent3Event = "thread.message.completed"
)

// Defines values for ExtendedMessageStreamEvent4Event.
const (
	ExtendedMessageStreamEvent4EventThreadMessageIncomplete ExtendedMessageStreamEvent4Event = "thread.message.incomplete"
)

// Defines values for ExtendedModelObject.
const (
	ExtendedModelObjectModel ExtendedModelObject = "model"
)

// Defines values for ExtendedOpenAIFileObject.
const (
	ExtendedOpenAIFileObjectFile ExtendedOpenAIFileObject = "file"
)

// Defines values for ExtendedOpenAIFilePurpose.
const (
	ExtendedOpenAIFilePurposeAssistants       ExtendedOpenAIFilePurpose = "assistants"
	ExtendedOpenAIFilePurposeAssistantsOutput ExtendedOpenAIFilePurpose = "assistants_output"
	ExtendedOpenAIFilePurposeFineTune         ExtendedOpenAIFilePurpose = "fine-tune"
	ExtendedOpenAIFilePurposeFineTuneResults  ExtendedOpenAIFilePurpose = "fine-tune-results"
)

// Defines values for ExtendedOpenAIFileStatus.
const (
	ExtendedOpenAIFileStatusError     ExtendedOpenAIFileStatus = "error"
	ExtendedOpenAIFileStatusProcessed ExtendedOpenAIFileStatus = "processed"
	ExtendedOpenAIFileStatusUploaded  ExtendedOpenAIFileStatus = "uploaded"
)

// Defines values for ExtendedRunObjectLastErrorCode.
const (
	ExtendedRunObjectLastErrorCodeInvalidPrompt     ExtendedRunObjectLastErrorCode = "invalid_prompt"
	ExtendedRunObjectLastErrorCodeRateLimitExceeded ExtendedRunObjectLastErrorCode = "rate_limit_exceeded"
	ExtendedRunObjectLastErrorCodeServerError       ExtendedRunObjectLastErrorCode = "server_error"
)

// Defines values for ExtendedRunObjectObject.
const (
	ExtendedRunObjectObjectThreadRun ExtendedRunObjectObject = "thread.run"
)

// Defines values for ExtendedRunObjectRequiredActionType.
const (
	ExtendedRunObjectRequiredActionTypeSubmitToolOutputs ExtendedRunObjectRequiredActionType = "submit_tool_outputs"
)

// Defines values for ExtendedRunObjectStatus.
const (
	ExtendedRunObjectStatusCancelled      ExtendedRunObjectStatus = "cancelled"
	ExtendedRunObjectStatusCancelling     ExtendedRunObjectStatus = "cancelling"
	ExtendedRunObjectStatusCompleted      ExtendedRunObjectStatus = "completed"
	ExtendedRunObjectStatusExpired        ExtendedRunObjectStatus = "expired"
	ExtendedRunObjectStatusFailed         ExtendedRunObjectStatus = "failed"
	ExtendedRunObjectStatusInProgress     ExtendedRunObjectStatus = "in_progress"
	ExtendedRunObjectStatusQueued         ExtendedRunObjectStatus = "queued"
	ExtendedRunObjectStatusRequiresAction ExtendedRunObjectStatus = "requires_action"
)

// Defines values for ExtendedRunStepDeltaObjectObject.
const (
	ExtendedRunStepDeltaObjectObjectThreadRunStepDelta ExtendedRunStepDeltaObjectObject = "thread.run.step.delta"
)

// Defines values for ExtendedRunStepDeltaStepDetailsMessageCreationObjectType.
const (
	ExtendedRunStepDeltaStepDetailsMessageCreationObjectTypeMessageCreation ExtendedRunStepDeltaStepDetailsMessageCreationObjectType = "message_creation"
)

// Defines values for ExtendedRunStepDeltaStepDetailsToolCallsCodeObjectType.
const (
	ExtendedRunStepDeltaStepDetailsToolCallsCodeObjectTypeCodeInterpreter ExtendedRunStepDeltaStepDetailsToolCallsCodeObjectType = "code_interpreter"
)

// Defines values for ExtendedRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType.
const (
	ExtendedRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectTypeImage ExtendedRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType = "image"
)

// Defines values for ExtendedRunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType.
const (
	ExtendedRunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectTypeLogs ExtendedRunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType = "logs"
)

// Defines values for ExtendedRunStepDeltaStepDetailsToolCallsFunctionObjectType.
const (
	ExtendedRunStepDeltaStepDetailsToolCallsFunctionObjectTypeFunction ExtendedRunStepDeltaStepDetailsToolCallsFunctionObjectType = "function"
)

// Defines values for ExtendedRunStepDeltaStepDetailsToolCallsObjectType.
const (
	ExtendedRunStepDeltaStepDetailsToolCallsObjectTypeToolCalls ExtendedRunStepDeltaStepDetailsToolCallsObjectType = "tool_calls"
)

// Defines values for ExtendedRunStepDeltaStepDetailsToolCallsRetrievalObjectType.
const (
	ExtendedRunStepDeltaStepDetailsToolCallsRetrievalObjectTypeRetrieval ExtendedRunStepDeltaStepDetailsToolCallsRetrievalObjectType = "retrieval"
)

// Defines values for ExtendedRunStepDetailsMessageCreationObjectType.
const (
	ExtendedRunStepDetailsMessageCreationObjectTypeMessageCreation ExtendedRunStepDetailsMessageCreationObjectType = "message_creation"
)

// Defines values for ExtendedRunStepDetailsToolCallsCodeObjectType.
const (
	ExtendedRunStepDetailsToolCallsCodeObjectTypeCodeInterpreter ExtendedRunStepDetailsToolCallsCodeObjectType = "code_interpreter"
)

// Defines values for ExtendedRunStepDetailsToolCallsCodeOutputImageObjectType.
const (
	ExtendedRunStepDetailsToolCallsCodeOutputImageObjectTypeImage ExtendedRunStepDetailsToolCallsCodeOutputImageObjectType = "image"
)

// Defines values for ExtendedRunStepDetailsToolCallsCodeOutputLogsObjectType.
const (
	ExtendedRunStepDetailsToolCallsCodeOutputLogsObjectTypeLogs ExtendedRunStepDetailsToolCallsCodeOutputLogsObjectType = "logs"
)

// Defines values for ExtendedRunStepDetailsToolCallsFunctionObjectType.
const (
	ExtendedRunStepDetailsToolCallsFunctionObjectTypeFunction ExtendedRunStepDetailsToolCallsFunctionObjectType = "function"
)

// Defines values for ExtendedRunStepDetailsToolCallsObjectType.
const (
	ExtendedRunStepDetailsToolCallsObjectTypeToolCalls ExtendedRunStepDetailsToolCallsObjectType = "tool_calls"
)

// Defines values for ExtendedRunStepDetailsToolCallsRetrievalObjectType.
const (
	ExtendedRunStepDetailsToolCallsRetrievalObjectTypeRetrieval ExtendedRunStepDetailsToolCallsRetrievalObjectType = "retrieval"
)

// Defines values for ExtendedRunStepObjectLastErrorCode.
const (
	ExtendedRunStepObjectLastErrorCodeRateLimitExceeded ExtendedRunStepObjectLastErrorCode = "rate_limit_exceeded"
	ExtendedRunStepObjectLastErrorCodeServerError       ExtendedRunStepObjectLastErrorCode = "server_error"
)

// Defines values for ExtendedRunStepObjectObject.
const (
	ExtendedRunStepObjectObjectThreadRunStep ExtendedRunStepObjectObject = "thread.run.step"
)

// Defines values for ExtendedRunStepObjectStatus.
const (
	ExtendedRunStepObjectStatusCancelled  ExtendedRunStepObjectStatus = "cancelled"
	ExtendedRunStepObjectStatusCompleted  ExtendedRunStepObjectStatus = "completed"
	ExtendedRunStepObjectStatusExpired    ExtendedRunStepObjectStatus = "expired"
	ExtendedRunStepObjectStatusFailed     ExtendedRunStepObjectStatus = "failed"
	ExtendedRunStepObjectStatusInProgress ExtendedRunStepObjectStatus = "in_progress"
)

// Defines values for ExtendedRunStepObjectType.
const (
	ExtendedRunStepObjectTypeMessageCreation ExtendedRunStepObjectType = "message_creation"
	ExtendedRunStepObjectTypeToolCalls       ExtendedRunStepObjectType = "tool_calls"
)

// Defines values for ExtendedRunStepStreamEvent0Event.
const (
	ExtendedRunStepStreamEvent0EventThreadRunStepCreated ExtendedRunStepStreamEvent0Event = "thread.run.step.created"
)

// Defines values for ExtendedRunStepStreamEvent1Event.
const (
	ExtendedRunStepStreamEvent1EventThreadRunStepInProgress ExtendedRunStepStreamEvent1Event = "thread.run.step.in_progress"
)

// Defines values for ExtendedRunStepStreamEvent2Event.
const (
	ExtendedRunStepStreamEvent2EventThreadRunStepDelta ExtendedRunStepStreamEvent2Event = "thread.run.step.delta"
)

// Defines values for ExtendedRunStepStreamEvent3Event.
const (
	ExtendedRunStepStreamEvent3EventThreadRunStepCompleted ExtendedRunStepStreamEvent3Event = "thread.run.step.completed"
)

// Defines values for ExtendedRunStepStreamEvent4Event.
const (
	ExtendedRunStepStreamEvent4EventThreadRunStepFailed ExtendedRunStepStreamEvent4Event = "thread.run.step.failed"
)

// Defines values for ExtendedRunStepStreamEvent5Event.
const (
	ExtendedRunStepStreamEvent5EventThreadRunStepCancelled ExtendedRunStepStreamEvent5Event = "thread.run.step.cancelled"
)

// Defines values for ExtendedRunStepStreamEvent6Event.
const (
	ExtendedRunStepStreamEvent6EventThreadRunStepExpired ExtendedRunStepStreamEvent6Event = "thread.run.step.expired"
)

// Defines values for ExtendedRunStreamEvent0Event.
const (
	ExtendedRunStreamEvent0EventThreadRunCreated ExtendedRunStreamEvent0Event = "thread.run.created"
)

// Defines values for ExtendedRunStreamEvent1Event.
const (
	ExtendedRunStreamEvent1EventThreadRunQueued ExtendedRunStreamEvent1Event = "thread.run.queued"
)

// Defines values for ExtendedRunStreamEvent2Event.
const (
	ExtendedRunStreamEvent2EventThreadRunInProgress ExtendedRunStreamEvent2Event = "thread.run.in_progress"
)

// Defines values for ExtendedRunStreamEvent3Event.
const (
	ExtendedRunStreamEvent3EventThreadRunRequiresAction ExtendedRunStreamEvent3Event = "thread.run.requires_action"
)

// Defines values for ExtendedRunStreamEvent4Event.
const (
	ExtendedRunStreamEvent4EventThreadRunCompleted ExtendedRunStreamEvent4Event = "thread.run.completed"
)

// Defines values for ExtendedRunStreamEvent5Event.
const (
	ExtendedRunStreamEvent5EventThreadRunFailed ExtendedRunStreamEvent5Event = "thread.run.failed"
)

// Defines values for ExtendedRunStreamEvent6Event.
const (
	ExtendedRunStreamEvent6EventThreadRunCancelling ExtendedRunStreamEvent6Event = "thread.run.cancelling"
)

// Defines values for ExtendedRunStreamEvent7Event.
const (
	ExtendedRunStreamEvent7EventThreadRunCancelled ExtendedRunStreamEvent7Event = "thread.run.cancelled"
)

// Defines values for ExtendedRunStreamEvent8Event.
const (
	ExtendedRunStreamEvent8EventThreadRunExpired ExtendedRunStreamEvent8Event = "thread.run.expired"
)

// Defines values for ExtendedRunToolCallObjectType.
const (
	ExtendedRunToolCallObjectTypeFunction ExtendedRunToolCallObjectType = "function"
)

// Defines values for ExtendedThreadObjectObject.
const (
	ExtendedThreadObjectObjectThread ExtendedThreadObjectObject = "thread"
)

// Defines values for ExtendedThreadStreamEvent0Event.
const (
	ExtendedThreadStreamEvent0EventThreadCreated ExtendedThreadStreamEvent0Event = "thread.created"
)

// Defines values for FineTuningJobHyperparametersNEpochs0.
const (
	FineTuningJobHyperparametersNEpochs0Auto FineTuningJobHyperparametersNEpochs0 = "auto"
)

// Defines values for FineTuningJobObject.
const (
	FineTuningJobObjectFineTuningJob FineTuningJobObject = "fine_tuning.job"
)

// Defines values for FineTuningJobStatus.
const (
	FineTuningJobStatusCancelled       FineTuningJobStatus = "cancelled"
	FineTuningJobStatusFailed          FineTuningJobStatus = "failed"
	FineTuningJobStatusQueued          FineTuningJobStatus = "queued"
	FineTuningJobStatusRunning         FineTuningJobStatus = "running"
	FineTuningJobStatusSucceeded       FineTuningJobStatus = "succeeded"
	FineTuningJobStatusValidatingFiles FineTuningJobStatus = "validating_files"
)

// Defines values for FineTuningJobEventLevel.
const (
	FineTuningJobEventLevelError FineTuningJobEventLevel = "error"
	FineTuningJobEventLevelInfo  FineTuningJobEventLevel = "info"
	FineTuningJobEventLevelWarn  FineTuningJobEventLevel = "warn"
)

// Defines values for FineTuningJobEventObject.
const (
	FineTuningJobEventObjectFineTuningJobEvent FineTuningJobEventObject = "fine_tuning.job.event"
)

// Defines values for ListFilesResponseObject.
const (
	ListFilesResponseObjectList ListFilesResponseObject = "list"
)

// Defines values for ListFineTuningJobEventsResponseObject.
const (
	ListFineTuningJobEventsResponseObjectList ListFineTuningJobEventsResponseObject = "list"
)

// Defines values for ListModelsResponseObject.
const (
	ListModelsResponseObjectList ListModelsResponseObject = "list"
)

// Defines values for ListPaginatedFineTuningJobsResponseObject.
const (
	ListPaginatedFineTuningJobsResponseObjectList ListPaginatedFineTuningJobsResponseObject = "list"
)

// Defines values for MessageContentImageFileObjectType.
const (
	MessageContentImageFileObjectTypeImageFile MessageContentImageFileObjectType = "image_file"
)

// Defines values for MessageContentTextAnnotationsFileCitationObjectType.
const (
	MessageContentTextAnnotationsFileCitationObjectTypeFileCitation MessageContentTextAnnotationsFileCitationObjectType = "file_citation"
)

// Defines values for MessageContentTextAnnotationsFilePathObjectType.
const (
	MessageContentTextAnnotationsFilePathObjectTypeFilePath MessageContentTextAnnotationsFilePathObjectType = "file_path"
)

// Defines values for MessageContentTextObjectType.
const (
	MessageContentTextObjectTypeText MessageContentTextObjectType = "text"
)

// Defines values for MessageDeltaContentImageFileObjectType.
const (
	MessageDeltaContentImageFileObjectTypeImageFile MessageDeltaContentImageFileObjectType = "image_file"
)

// Defines values for MessageDeltaContentTextAnnotationsFileCitationObjectType.
const (
	MessageDeltaContentTextAnnotationsFileCitationObjectTypeFileCitation MessageDeltaContentTextAnnotationsFileCitationObjectType = "file_citation"
)

// Defines values for MessageDeltaContentTextAnnotationsFilePathObjectType.
const (
	MessageDeltaContentTextAnnotationsFilePathObjectTypeFilePath MessageDeltaContentTextAnnotationsFilePathObjectType = "file_path"
)

// Defines values for MessageDeltaContentTextObjectType.
const (
	MessageDeltaContentTextObjectTypeText MessageDeltaContentTextObjectType = "text"
)

// Defines values for MessageDeltaObjectDeltaRole.
const (
	MessageDeltaObjectDeltaRoleAssistant MessageDeltaObjectDeltaRole = "assistant"
	MessageDeltaObjectDeltaRoleUser      MessageDeltaObjectDeltaRole = "user"
)

// Defines values for MessageDeltaObjectObject.
const (
	MessageDeltaObjectObjectThreadMessageDelta MessageDeltaObjectObject = "thread.message.delta"
)

// Defines values for MessageFileObjectObject.
const (
	MessageFileObjectObjectThreadMessageFile MessageFileObjectObject = "thread.message.file"
)

// Defines values for MessageObjectIncompleteDetailsReason.
const (
	ContentFilter MessageObjectIncompleteDetailsReason = "content_filter"
	MaxTokens     MessageObjectIncompleteDetailsReason = "max_tokens"
	RunCancelled  MessageObjectIncompleteDetailsReason = "run_cancelled"
	RunExpired    MessageObjectIncompleteDetailsReason = "run_expired"
	RunFailed     MessageObjectIncompleteDetailsReason = "run_failed"
)

// Defines values for MessageObjectObject.
const (
	MessageObjectObjectThreadMessage MessageObjectObject = "thread.message"
)

// Defines values for MessageObjectRole.
const (
	Assistant MessageObjectRole = "assistant"
	User      MessageObjectRole = "user"
)

// Defines values for MessageObjectStatus.
const (
	MessageObjectStatusCompleted  MessageObjectStatus = "completed"
	MessageObjectStatusInProgress MessageObjectStatus = "in_progress"
	MessageObjectStatusIncomplete MessageObjectStatus = "incomplete"
)

// Defines values for MessageStreamEvent0Event.
const (
	MessageStreamEvent0EventThreadMessageCreated MessageStreamEvent0Event = "thread.message.created"
)

// Defines values for MessageStreamEvent1Event.
const (
	MessageStreamEvent1EventThreadMessageInProgress MessageStreamEvent1Event = "thread.message.in_progress"
)

// Defines values for MessageStreamEvent2Event.
const (
	MessageStreamEvent2EventThreadMessageDelta MessageStreamEvent2Event = "thread.message.delta"
)

// Defines values for MessageStreamEvent3Event.
const (
	MessageStreamEvent3EventThreadMessageCompleted MessageStreamEvent3Event = "thread.message.completed"
)

// Defines values for MessageStreamEvent4Event.
const (
	MessageStreamEvent4EventThreadMessageIncomplete MessageStreamEvent4Event = "thread.message.incomplete"
)

// Defines values for ModelObject.
const (
	ModelObjectModel ModelObject = "model"
)

// Defines values for OpenAIFileObject.
const (
	OpenAIFileObjectFile OpenAIFileObject = "file"
)

// Defines values for OpenAIFilePurpose.
const (
	OpenAIFilePurposeAssistants       OpenAIFilePurpose = "assistants"
	OpenAIFilePurposeAssistantsOutput OpenAIFilePurpose = "assistants_output"
	OpenAIFilePurposeFineTune         OpenAIFilePurpose = "fine-tune"
	OpenAIFilePurposeFineTuneResults  OpenAIFilePurpose = "fine-tune-results"
)

// Defines values for OpenAIFileStatus.
const (
	OpenAIFileStatusError     OpenAIFileStatus = "error"
	OpenAIFileStatusProcessed OpenAIFileStatus = "processed"
	OpenAIFileStatusUploaded  OpenAIFileStatus = "uploaded"
)

// Defines values for RunObjectLastErrorCode.
const (
	RunObjectLastErrorCodeInvalidPrompt     RunObjectLastErrorCode = "invalid_prompt"
	RunObjectLastErrorCodeRateLimitExceeded RunObjectLastErrorCode = "rate_limit_exceeded"
	RunObjectLastErrorCodeServerError       RunObjectLastErrorCode = "server_error"
)

// Defines values for RunObjectObject.
const (
	RunObjectObjectThreadRun RunObjectObject = "thread.run"
)

// Defines values for RunObjectRequiredActionType.
const (
	RunObjectRequiredActionTypeSubmitToolOutputs RunObjectRequiredActionType = "submit_tool_outputs"
)

// Defines values for RunObjectStatus.
const (
	RunObjectStatusCancelled      RunObjectStatus = "cancelled"
	RunObjectStatusCancelling     RunObjectStatus = "cancelling"
	RunObjectStatusCompleted      RunObjectStatus = "completed"
	RunObjectStatusExpired        RunObjectStatus = "expired"
	RunObjectStatusFailed         RunObjectStatus = "failed"
	RunObjectStatusInProgress     RunObjectStatus = "in_progress"
	RunObjectStatusQueued         RunObjectStatus = "queued"
	RunObjectStatusRequiresAction RunObjectStatus = "requires_action"
)

// Defines values for RunStepDeltaObjectObject.
const (
	RunStepDeltaObjectObjectThreadRunStepDelta RunStepDeltaObjectObject = "thread.run.step.delta"
)

// Defines values for RunStepDeltaStepDetailsMessageCreationObjectType.
const (
	RunStepDeltaStepDetailsMessageCreationObjectTypeMessageCreation RunStepDeltaStepDetailsMessageCreationObjectType = "message_creation"
)

// Defines values for RunStepDeltaStepDetailsToolCallsCodeObjectType.
const (
	RunStepDeltaStepDetailsToolCallsCodeObjectTypeCodeInterpreter RunStepDeltaStepDetailsToolCallsCodeObjectType = "code_interpreter"
)

// Defines values for RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType.
const (
	RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectTypeImage RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType = "image"
)

// Defines values for RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType.
const (
	RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectTypeLogs RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType = "logs"
)

// Defines values for RunStepDeltaStepDetailsToolCallsFunctionObjectType.
const (
	RunStepDeltaStepDetailsToolCallsFunctionObjectTypeFunction RunStepDeltaStepDetailsToolCallsFunctionObjectType = "function"
)

// Defines values for RunStepDeltaStepDetailsToolCallsObjectType.
const (
	RunStepDeltaStepDetailsToolCallsObjectTypeToolCalls RunStepDeltaStepDetailsToolCallsObjectType = "tool_calls"
)

// Defines values for RunStepDeltaStepDetailsToolCallsRetrievalObjectType.
const (
	RunStepDeltaStepDetailsToolCallsRetrievalObjectTypeRetrieval RunStepDeltaStepDetailsToolCallsRetrievalObjectType = "retrieval"
)

// Defines values for RunStepDetailsMessageCreationObjectType.
const (
	RunStepDetailsMessageCreationObjectTypeMessageCreation RunStepDetailsMessageCreationObjectType = "message_creation"
)

// Defines values for RunStepDetailsToolCallsCodeObjectType.
const (
	RunStepDetailsToolCallsCodeObjectTypeCodeInterpreter RunStepDetailsToolCallsCodeObjectType = "code_interpreter"
)

// Defines values for RunStepDetailsToolCallsCodeOutputImageObjectType.
const (
	RunStepDetailsToolCallsCodeOutputImageObjectTypeImage RunStepDetailsToolCallsCodeOutputImageObjectType = "image"
)

// Defines values for RunStepDetailsToolCallsCodeOutputLogsObjectType.
const (
	RunStepDetailsToolCallsCodeOutputLogsObjectTypeLogs RunStepDetailsToolCallsCodeOutputLogsObjectType = "logs"
)

// Defines values for RunStepDetailsToolCallsFunctionObjectType.
const (
	RunStepDetailsToolCallsFunctionObjectTypeFunction RunStepDetailsToolCallsFunctionObjectType = "function"
)

// Defines values for RunStepDetailsToolCallsObjectType.
const (
	RunStepDetailsToolCallsObjectTypeToolCalls RunStepDetailsToolCallsObjectType = "tool_calls"
)

// Defines values for RunStepDetailsToolCallsRetrievalObjectType.
const (
	RunStepDetailsToolCallsRetrievalObjectTypeRetrieval RunStepDetailsToolCallsRetrievalObjectType = "retrieval"
)

// Defines values for RunStepObjectLastErrorCode.
const (
	RunStepObjectLastErrorCodeRateLimitExceeded RunStepObjectLastErrorCode = "rate_limit_exceeded"
	RunStepObjectLastErrorCodeServerError       RunStepObjectLastErrorCode = "server_error"
)

// Defines values for RunStepObjectObject.
const (
	RunStepObjectObjectThreadRunStep RunStepObjectObject = "thread.run.step"
)

// Defines values for RunStepObjectStatus.
const (
	RunStepObjectStatusCancelled  RunStepObjectStatus = "cancelled"
	RunStepObjectStatusCompleted  RunStepObjectStatus = "completed"
	RunStepObjectStatusExpired    RunStepObjectStatus = "expired"
	RunStepObjectStatusFailed     RunStepObjectStatus = "failed"
	RunStepObjectStatusInProgress RunStepObjectStatus = "in_progress"
)

// Defines values for RunStepObjectType.
const (
	RunStepObjectTypeMessageCreation RunStepObjectType = "message_creation"
	RunStepObjectTypeToolCalls       RunStepObjectType = "tool_calls"
)

// Defines values for RunStepStreamEvent0Event.
const (
	RunStepStreamEvent0EventThreadRunStepCreated RunStepStreamEvent0Event = "thread.run.step.created"
)

// Defines values for RunStepStreamEvent1Event.
const (
	RunStepStreamEvent1EventThreadRunStepInProgress RunStepStreamEvent1Event = "thread.run.step.in_progress"
)

// Defines values for RunStepStreamEvent2Event.
const (
	RunStepStreamEvent2EventThreadRunStepDelta RunStepStreamEvent2Event = "thread.run.step.delta"
)

// Defines values for RunStepStreamEvent3Event.
const (
	RunStepStreamEvent3EventThreadRunStepCompleted RunStepStreamEvent3Event = "thread.run.step.completed"
)

// Defines values for RunStepStreamEvent4Event.
const (
	RunStepStreamEvent4EventThreadRunStepFailed RunStepStreamEvent4Event = "thread.run.step.failed"
)

// Defines values for RunStepStreamEvent5Event.
const (
	RunStepStreamEvent5EventThreadRunStepCancelled RunStepStreamEvent5Event = "thread.run.step.cancelled"
)

// Defines values for RunStepStreamEvent6Event.
const (
	RunStepStreamEvent6EventThreadRunStepExpired RunStepStreamEvent6Event = "thread.run.step.expired"
)

// Defines values for RunStreamEvent0Event.
const (
	RunStreamEvent0EventThreadRunCreated RunStreamEvent0Event = "thread.run.created"
)

// Defines values for RunStreamEvent1Event.
const (
	RunStreamEvent1EventThreadRunQueued RunStreamEvent1Event = "thread.run.queued"
)

// Defines values for RunStreamEvent2Event.
const (
	RunStreamEvent2EventThreadRunInProgress RunStreamEvent2Event = "thread.run.in_progress"
)

// Defines values for RunStreamEvent3Event.
const (
	RunStreamEvent3EventThreadRunRequiresAction RunStreamEvent3Event = "thread.run.requires_action"
)

// Defines values for RunStreamEvent4Event.
const (
	RunStreamEvent4EventThreadRunCompleted RunStreamEvent4Event = "thread.run.completed"
)

// Defines values for RunStreamEvent5Event.
const (
	RunStreamEvent5EventThreadRunFailed RunStreamEvent5Event = "thread.run.failed"
)

// Defines values for RunStreamEvent6Event.
const (
	RunStreamEvent6EventThreadRunCancelling RunStreamEvent6Event = "thread.run.cancelling"
)

// Defines values for RunStreamEvent7Event.
const (
	RunStreamEvent7EventThreadRunCancelled RunStreamEvent7Event = "thread.run.cancelled"
)

// Defines values for RunStreamEvent8Event.
const (
	RunStreamEvent8EventThreadRunExpired RunStreamEvent8Event = "thread.run.expired"
)

// Defines values for RunToolCallObjectType.
const (
	Function RunToolCallObjectType = "function"
)

// Defines values for ThreadObjectObject.
const (
	ThreadObjectObjectThread ThreadObjectObject = "thread"
)

// Defines values for ThreadStreamEvent0Event.
const (
	ThreadStreamEvent0EventThreadCreated ThreadStreamEvent0Event = "thread.created"
)

// Defines values for XDeleteToolResponseObject.
const (
	ToolDeleted XDeleteToolResponseObject = "tool.deleted"
)

// Defines values for XToolObjectObject.
const (
	Tool XToolObjectObject = "tool"
)

// Defines values for ListAssistantsParamsOrder.
const (
	ListAssistantsParamsOrderAsc  ListAssistantsParamsOrder = "asc"
	ListAssistantsParamsOrderDesc ListAssistantsParamsOrder = "desc"
)

// Defines values for ListAssistantFilesParamsOrder.
const (
	ListAssistantFilesParamsOrderAsc  ListAssistantFilesParamsOrder = "asc"
	ListAssistantFilesParamsOrderDesc ListAssistantFilesParamsOrder = "desc"
)

// Defines values for ExtendedListAssistantsParamsOrder.
const (
	ExtendedListAssistantsParamsOrderAsc  ExtendedListAssistantsParamsOrder = "asc"
	ExtendedListAssistantsParamsOrderDesc ExtendedListAssistantsParamsOrder = "desc"
)

// Defines values for ExtendedListAssistantFilesParamsOrder.
const (
	ExtendedListAssistantFilesParamsOrderAsc  ExtendedListAssistantFilesParamsOrder = "asc"
	ExtendedListAssistantFilesParamsOrderDesc ExtendedListAssistantFilesParamsOrder = "desc"
)

// Defines values for ExtendedListMessagesParamsOrder.
const (
	ExtendedListMessagesParamsOrderAsc  ExtendedListMessagesParamsOrder = "asc"
	ExtendedListMessagesParamsOrderDesc ExtendedListMessagesParamsOrder = "desc"
)

// Defines values for ExtendedListMessageFilesParamsOrder.
const (
	ExtendedListMessageFilesParamsOrderAsc  ExtendedListMessageFilesParamsOrder = "asc"
	ExtendedListMessageFilesParamsOrderDesc ExtendedListMessageFilesParamsOrder = "desc"
)

// Defines values for ExtendedListRunsParamsOrder.
const (
	ExtendedListRunsParamsOrderAsc  ExtendedListRunsParamsOrder = "asc"
	ExtendedListRunsParamsOrderDesc ExtendedListRunsParamsOrder = "desc"
)

// Defines values for ExtendedListRunStepsParamsOrder.
const (
	ExtendedListRunStepsParamsOrderAsc  ExtendedListRunStepsParamsOrder = "asc"
	ExtendedListRunStepsParamsOrderDesc ExtendedListRunStepsParamsOrder = "desc"
)

// Defines values for ListThreadsParamsOrder.
const (
	ListThreadsParamsOrderAsc  ListThreadsParamsOrder = "asc"
	ListThreadsParamsOrderDesc ListThreadsParamsOrder = "desc"
)

// Defines values for ListToolsParamsOrder.
const (
	ListToolsParamsOrderAsc  ListToolsParamsOrder = "asc"
	ListToolsParamsOrderDesc ListToolsParamsOrder = "desc"
)

// Defines values for ListMessagesParamsOrder.
const (
	ListMessagesParamsOrderAsc  ListMessagesParamsOrder = "asc"
	ListMessagesParamsOrderDesc ListMessagesParamsOrder = "desc"
)

// Defines values for ListMessageFilesParamsOrder.
const (
	ListMessageFilesParamsOrderAsc  ListMessageFilesParamsOrder = "asc"
	ListMessageFilesParamsOrderDesc ListMessageFilesParamsOrder = "desc"
)

// Defines values for ListRunsParamsOrder.
const (
	ListRunsParamsOrderAsc  ListRunsParamsOrder = "asc"
	ListRunsParamsOrderDesc ListRunsParamsOrder = "desc"
)

// Defines values for ListRunStepsParamsOrder.
const (
	ListRunStepsParamsOrderAsc  ListRunStepsParamsOrder = "asc"
	ListRunStepsParamsOrderDesc ListRunStepsParamsOrder = "desc"
)

// AssistantFileObject A list of [Files](/docs/api-reference/files) attached to an `assistant`.
type AssistantFileObject struct {
	// AssistantId The assistant ID that the file is attached to.
	AssistantId string `json:"assistant_id"`

	// CreatedAt The Unix timestamp (in seconds) for when the assistant file was created.
	CreatedAt int `json:"created_at"`

	// Id The identifier, which can be referenced in API endpoints.
	Id string `json:"id"`

	// Object The object type, which is always `assistant.file`.
	Object AssistantFileObjectObject `json:"object"`
}

// AssistantFileObjectObject The object type, which is always `assistant.file`.
type AssistantFileObjectObject string

// AssistantObject Represents an `assistant` that can call the model and use tools.
type AssistantObject struct {
	// CreatedAt The Unix timestamp (in seconds) for when the assistant was created.
	CreatedAt int `json:"created_at"`

	// Description The description of the assistant. The maximum length is 512 characters.
	Description *string `json:"description"`

	// FileIds A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
	FileIds []string `json:"file_ids"`

	// Id The identifier, which can be referenced in API endpoints.
	Id string `json:"id"`

	// Instructions The system instructions that the assistant uses. The maximum length is 32768 characters.
	Instructions *string `json:"instructions"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
	Model string `json:"model"`

	// Name The name of the assistant. The maximum length is 256 characters.
	Name *string `json:"name"`

	// Object The object type, which is always `assistant`.
	Object AssistantObjectObject `json:"object"`

	// Tools A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
	Tools []AssistantObject_Tools_Item `json:"tools"`
}

// AssistantObjectObject The object type, which is always `assistant`.
type AssistantObjectObject string

// AssistantObject_Tools_Item defines model for AssistantObject.tools.Item.
type AssistantObject_Tools_Item struct {
	union json.RawMessage
}

// AssistantStreamEvent Represents an event emitted when streaming a Run.
//
// Each event in a server-sent events stream has an `event` and `data` property:
//
// ```
// event: thread.created
// data: {"id": "thread_123", "object": "thread", ...}
// ```
//
// We emit events whenever a new object is created, transitions to a new state, or is being
// streamed in parts (deltas). For example, we emit `thread.run.created` when a new run
// is created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses
// to create a message during a run, we emit a `thread.message.created event`, a
// `thread.message.in_progress` event, many `thread.message.delta` events, and finally a
// `thread.message.completed` event.
//
// We may add additional events over time, so we recommend handling unknown events gracefully
// in your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to
// integrate the Assistants API with streaming.
type AssistantStreamEvent struct {
	union json.RawMessage
}

// AssistantToolsCode defines model for AssistantToolsCode.
type AssistantToolsCode struct {
	// Type The type of tool being defined: `code_interpreter`
	Type AssistantToolsCodeType `json:"type"`
}

// AssistantToolsCodeType The type of tool being defined: `code_interpreter`
type AssistantToolsCodeType string

// AssistantToolsFunction defines model for AssistantToolsFunction.
type AssistantToolsFunction struct {
	Function FunctionObject `json:"function"`

	// Type The type of tool being defined: `function`
	Type AssistantToolsFunctionType `json:"type"`
}

// AssistantToolsFunctionType The type of tool being defined: `function`
type AssistantToolsFunctionType string

// AssistantToolsRetrieval defines model for AssistantToolsRetrieval.
type AssistantToolsRetrieval struct {
	// Type The type of tool being defined: `retrieval`
	Type AssistantToolsRetrievalType `json:"type"`
}

// AssistantToolsRetrievalType The type of tool being defined: `retrieval`
type AssistantToolsRetrievalType string

// ChatCompletionFunctionCallOption Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
type ChatCompletionFunctionCallOption struct {
	// Name The name of the function to call.
	Name string `json:"name"`
}

// ChatCompletionFunctions defines model for ChatCompletionFunctions.
type ChatCompletionFunctions struct {
	// Description A description of what the function does, used by the model to choose when and how to call the function.
	Description *string `json:"description,omitempty"`

	// Name The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
	Name string `json:"name"`

	// Parameters The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
	//
	// Omitting `parameters` defines a function with an empty parameter list.
	Parameters *FunctionParameters `json:"parameters"`
}

// ChatCompletionMessageToolCall defines model for ChatCompletionMessageToolCall.
type ChatCompletionMessageToolCall struct {
	// Function The function that the model called.
	Function struct {
		// Arguments The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
		Arguments string `json:"arguments"`

		// Name The name of the function to call.
		Name string `json:"name"`
	} `json:"function"`

	// Id The ID of the tool call.
	Id string `json:"id"`

	// Type The type of the tool. Currently, only `function` is supported.
	Type ChatCompletionMessageToolCallType `json:"type"`
}

// ChatCompletionMessageToolCallType The type of the tool. Currently, only `function` is supported.
type ChatCompletionMessageToolCallType string

// ChatCompletionMessageToolCallChunk defines model for ChatCompletionMessageToolCallChunk.
type ChatCompletionMessageToolCallChunk struct {
	Function *struct {
		// Arguments The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
		Arguments *string `json:"arguments,omitempty"`

		// Name The name of the function to call.
		Name *string `json:"name,omitempty"`
	} `json:"function,omitempty"`

	// Id The ID of the tool call.
	Id    *string `json:"id,omitempty"`
	Index int     `json:"index"`

	// Type The type of the tool. Currently, only `function` is supported.
	Type *ChatCompletionMessageToolCallChunkType `json:"type,omitempty"`
}

// ChatCompletionMessageToolCallChunkType The type of the tool. Currently, only `function` is supported.
type ChatCompletionMessageToolCallChunkType string

// ChatCompletionMessageToolCalls The tool calls generated by the model, such as function calls.
type ChatCompletionMessageToolCalls = []ChatCompletionMessageToolCall

// ChatCompletionNamedToolChoice Specifies a tool the model should use. Use to force the model to call a specific function.
type ChatCompletionNamedToolChoice struct {
	Function struct {
		// Name The name of the function to call.
		Name string `json:"name"`
	} `json:"function"`

	// Type The type of the tool. Currently, only `function` is supported.
	Type ChatCompletionNamedToolChoiceType `json:"type"`
}

// ChatCompletionNamedToolChoiceType The type of the tool. Currently, only `function` is supported.
type ChatCompletionNamedToolChoiceType string

// ChatCompletionRequestAssistantMessage defines model for ChatCompletionRequestAssistantMessage.
type ChatCompletionRequestAssistantMessage struct {
	// Content The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
	Content *string `json:"content"`

	// FunctionCall Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
	// Deprecated:
	FunctionCall *struct {
		// Arguments The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
		Arguments string `json:"arguments"`

		// Name The name of the function to call.
		Name string `json:"name"`
	} `json:"function_call,omitempty"`

	// Name An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	Name *string `json:"name,omitempty"`

	// Role The role of the messages author, in this case `assistant`.
	Role ChatCompletionRequestAssistantMessageRole `json:"role"`

	// ToolCalls The tool calls generated by the model, such as function calls.
	ToolCalls *ChatCompletionMessageToolCalls `json:"tool_calls,omitempty"`
}

// ChatCompletionRequestAssistantMessageRole The role of the messages author, in this case `assistant`.
type ChatCompletionRequestAssistantMessageRole string

// ChatCompletionRequestFunctionMessage defines model for ChatCompletionRequestFunctionMessage.
type ChatCompletionRequestFunctionMessage struct {
	// Content The contents of the function message.
	Content *string `json:"content"`

	// Name The name of the function to call.
	Name string `json:"name"`

	// Role The role of the messages author, in this case `function`.
	Role ChatCompletionRequestFunctionMessageRole `json:"role"`
}

// ChatCompletionRequestFunctionMessageRole The role of the messages author, in this case `function`.
type ChatCompletionRequestFunctionMessageRole string

// ChatCompletionRequestMessage defines model for ChatCompletionRequestMessage.
type ChatCompletionRequestMessage struct {
	union json.RawMessage
}

// ChatCompletionRequestMessageContentPart defines model for ChatCompletionRequestMessageContentPart.
type ChatCompletionRequestMessageContentPart struct {
	union json.RawMessage
}

// ChatCompletionRequestMessageContentPartImage defines model for ChatCompletionRequestMessageContentPartImage.
type ChatCompletionRequestMessageContentPartImage struct {
	ImageUrl struct {
		// Detail Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision/low-or-high-fidelity-image-understanding).
		Detail *ChatCompletionRequestMessageContentPartImageImageUrlDetail `json:"detail,omitempty"`

		// Url Either a URL of the image or the base64 encoded image data.
		Url string `json:"url"`
	} `json:"image_url"`

	// Type The type of the content part.
	Type ChatCompletionRequestMessageContentPartImageType `json:"type"`
}

// ChatCompletionRequestMessageContentPartImageImageUrlDetail Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision/low-or-high-fidelity-image-understanding).
type ChatCompletionRequestMessageContentPartImageImageUrlDetail string

// ChatCompletionRequestMessageContentPartImageType The type of the content part.
type ChatCompletionRequestMessageContentPartImageType string

// ChatCompletionRequestMessageContentPartText defines model for ChatCompletionRequestMessageContentPartText.
type ChatCompletionRequestMessageContentPartText struct {
	// Text The text content.
	Text string `json:"text"`

	// Type The type of the content part.
	Type ChatCompletionRequestMessageContentPartTextType `json:"type"`
}

// ChatCompletionRequestMessageContentPartTextType The type of the content part.
type ChatCompletionRequestMessageContentPartTextType string

// ChatCompletionRequestSystemMessage defines model for ChatCompletionRequestSystemMessage.
type ChatCompletionRequestSystemMessage struct {
	// Content The contents of the system message.
	Content string `json:"content"`

	// Name An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	Name *string `json:"name,omitempty"`

	// Role The role of the messages author, in this case `system`.
	Role ChatCompletionRequestSystemMessageRole `json:"role"`
}

// ChatCompletionRequestSystemMessageRole The role of the messages author, in this case `system`.
type ChatCompletionRequestSystemMessageRole string

// ChatCompletionRequestToolMessage defines model for ChatCompletionRequestToolMessage.
type ChatCompletionRequestToolMessage struct {
	// Content The contents of the tool message.
	Content string `json:"content"`

	// Role The role of the messages author, in this case `tool`.
	Role ChatCompletionRequestToolMessageRole `json:"role"`

	// ToolCallId Tool call that this message is responding to.
	ToolCallId string `json:"tool_call_id"`
}

// ChatCompletionRequestToolMessageRole The role of the messages author, in this case `tool`.
type ChatCompletionRequestToolMessageRole string

// ChatCompletionRequestUserMessage defines model for ChatCompletionRequestUserMessage.
type ChatCompletionRequestUserMessage struct {
	// Content The contents of the user message.
	Content ChatCompletionRequestUserMessage_Content `json:"content"`

	// Name An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	Name *string `json:"name,omitempty"`

	// Role The role of the messages author, in this case `user`.
	Role ChatCompletionRequestUserMessageRole `json:"role"`
}

// ChatCompletionRequestUserMessageContent0 The text contents of the message.
type ChatCompletionRequestUserMessageContent0 = string

// ChatCompletionRequestUserMessageContent1 An array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts. Image input is only supported when using the `gpt-4-visual-preview` model.
type ChatCompletionRequestUserMessageContent1 = []ChatCompletionRequestMessageContentPart

// ChatCompletionRequestUserMessage_Content The contents of the user message.
type ChatCompletionRequestUserMessage_Content struct {
	union json.RawMessage
}

// ChatCompletionRequestUserMessageRole The role of the messages author, in this case `user`.
type ChatCompletionRequestUserMessageRole string

// ChatCompletionResponseMessage A chat completion message generated by the model.
type ChatCompletionResponseMessage struct {
	// Content The contents of the message.
	Content *string `json:"content"`

	// FunctionCall Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
	// Deprecated:
	FunctionCall *struct {
		// Arguments The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
		Arguments string `json:"arguments"`

		// Name The name of the function to call.
		Name string `json:"name"`
	} `json:"function_call,omitempty"`

	// Role The role of the author of this message.
	Role ChatCompletionResponseMessageRole `json:"role"`

	// ToolCalls The tool calls generated by the model, such as function calls.
	ToolCalls *ChatCompletionMessageToolCalls `json:"tool_calls,omitempty"`
}

// ChatCompletionResponseMessageRole The role of the author of this message.
type ChatCompletionResponseMessageRole string

// ChatCompletionRole The role of the author of a message
type ChatCompletionRole string

// ChatCompletionStreamResponseDelta A chat completion delta generated by streamed model responses.
type ChatCompletionStreamResponseDelta struct {
	// Content The contents of the chunk message.
	Content *string `json:"content"`

	// FunctionCall Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
	// Deprecated:
	FunctionCall *struct {
		// Arguments The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
		Arguments *string `json:"arguments,omitempty"`

		// Name The name of the function to call.
		Name *string `json:"name,omitempty"`
	} `json:"function_call,omitempty"`

	// Role The role of the author of this message.
	Role      *ChatCompletionStreamResponseDeltaRole `json:"role,omitempty"`
	ToolCalls *[]ChatCompletionMessageToolCallChunk  `json:"tool_calls,omitempty"`
}

// ChatCompletionStreamResponseDeltaRole The role of the author of this message.
type ChatCompletionStreamResponseDeltaRole string

// ChatCompletionTokenLogprob defines model for ChatCompletionTokenLogprob.
type ChatCompletionTokenLogprob struct {
	// Bytes A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
	Bytes *[]int `json:"bytes"`

	// Logprob The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
	Logprob float32 `json:"logprob"`

	// Token The token.
	Token string `json:"token"`

	// TopLogprobs List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
	TopLogprobs []struct {
		// Bytes A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
		Bytes *[]int `json:"bytes"`

		// Logprob The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
		Logprob float32 `json:"logprob"`

		// Token The token.
		Token string `json:"token"`
	} `json:"top_logprobs"`
}

// ChatCompletionTool defines model for ChatCompletionTool.
type ChatCompletionTool struct {
	Function FunctionObject `json:"function"`

	// Type The type of the tool. Currently, only `function` is supported.
	Type ChatCompletionToolType `json:"type"`
}

// ChatCompletionToolType The type of the tool. Currently, only `function` is supported.
type ChatCompletionToolType string

// ChatCompletionToolChoiceOption Controls which (if any) function is called by the model.
// `none` means the model will not call a function and instead generates a message.
// `auto` means the model can pick between generating a message or calling a function.
// Specifying a particular function via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that function.
//
// `none` is the default when no functions are present. `auto` is the default if functions are present.
type ChatCompletionToolChoiceOption struct {
	union json.RawMessage
}

// ChatCompletionToolChoiceOption0 `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
type ChatCompletionToolChoiceOption0 string

// CompletionUsage Usage statistics for the completion request.
type CompletionUsage struct {
	// CompletionTokens Number of tokens in the generated completion.
	CompletionTokens int `json:"completion_tokens"`

	// PromptTokens Number of tokens in the prompt.
	PromptTokens int `json:"prompt_tokens"`

	// TotalTokens Total number of tokens used in the request (prompt + completion).
	TotalTokens int `json:"total_tokens"`
}

// CreateAssistantFileRequest defines model for CreateAssistantFileRequest.
type CreateAssistantFileRequest struct {
	// FileId A [File](/docs/api-reference/files) ID (with `purpose="assistants"`) that the assistant should use. Useful for tools like `retrieval` and `code_interpreter` that can access files.
	FileId string `json:"file_id"`
}

// CreateAssistantRequest defines model for CreateAssistantRequest.
type CreateAssistantRequest struct {
	// Description The description of the assistant. The maximum length is 512 characters.
	Description *string `json:"description"`

	// FileIds A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
	FileIds *[]string `json:"file_ids,omitempty"`

	// Instructions The system instructions that the assistant uses. The maximum length is 32768 characters.
	Instructions *string `json:"instructions"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
	Model CreateAssistantRequest_Model `json:"model"`

	// Name The name of the assistant. The maximum length is 256 characters.
	Name *string `json:"name"`

	// Tools A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
	Tools *[]CreateAssistantRequest_Tools_Item `json:"tools,omitempty"`
}

// CreateAssistantRequestModel0 defines model for .
type CreateAssistantRequestModel0 = string

// CreateAssistantRequest_Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
type CreateAssistantRequest_Model struct {
	union json.RawMessage
}

// CreateAssistantRequest_Tools_Item defines model for CreateAssistantRequest.tools.Item.
type CreateAssistantRequest_Tools_Item struct {
	union json.RawMessage
}

// CreateChatCompletionFunctionResponse Represents a chat completion response returned by model, based on the provided input.
type CreateChatCompletionFunctionResponse struct {
	// Choices A list of chat completion choices. Can be more than one if `n` is greater than 1.
	Choices []struct {
		// FinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function.
		FinishReason CreateChatCompletionFunctionResponseChoicesFinishReason `json:"finish_reason"`

		// Index The index of the choice in the list of choices.
		Index int `json:"index"`

		// Message A chat completion message generated by the model.
		Message ChatCompletionResponseMessage `json:"message"`
	} `json:"choices"`

	// Created The Unix timestamp (in seconds) of when the chat completion was created.
	Created int `json:"created"`

	// Id A unique identifier for the chat completion.
	Id string `json:"id"`

	// Model The model used for the chat completion.
	Model string `json:"model"`

	// Object The object type, which is always `chat.completion`.
	Object CreateChatCompletionFunctionResponseObject `json:"object"`

	// SystemFingerprint This fingerprint represents the backend configuration that the model runs with.
	//
	// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
	SystemFingerprint *string `json:"system_fingerprint,omitempty"`

	// Usage Usage statistics for the completion request.
	Usage *CompletionUsage `json:"usage,omitempty"`
}

// CreateChatCompletionFunctionResponseChoicesFinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function.
type CreateChatCompletionFunctionResponseChoicesFinishReason string

// CreateChatCompletionFunctionResponseObject The object type, which is always `chat.completion`.
type CreateChatCompletionFunctionResponseObject string

// CreateChatCompletionImageResponse Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
type CreateChatCompletionImageResponse = map[string]interface{}

// CreateChatCompletionRequest defines model for CreateChatCompletionRequest.
type CreateChatCompletionRequest struct {
	// FrequencyPenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
	//
	// [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
	FrequencyPenalty *float32 `json:"frequency_penalty"`

	// FunctionCall Deprecated in favor of `tool_choice`.
	//
	// Controls which (if any) function is called by the model.
	// `none` means the model will not call a function and instead generates a message.
	// `auto` means the model can pick between generating a message or calling a function.
	// Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
	//
	// `none` is the default when no functions are present. `auto` is the default if functions are present.
	// Deprecated:
	FunctionCall *CreateChatCompletionRequest_FunctionCall `json:"function_call,omitempty"`

	// Functions Deprecated in favor of `tools`.
	//
	// A list of functions the model may generate JSON inputs for.
	// Deprecated:
	Functions *[]ChatCompletionFunctions `json:"functions,omitempty"`

	// LogitBias Modify the likelihood of specified tokens appearing in the completion.
	//
	// Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
	LogitBias *map[string]int `json:"logit_bias"`

	// Logprobs Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`. This option is currently not available on the `gpt-4-vision-preview` model.
	Logprobs *bool `json:"logprobs"`

	// MaxTokens The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.
	//
	// The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
	MaxTokens *int `json:"max_tokens"`

	// Messages A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
	Messages []ChatCompletionRequestMessage `json:"messages"`

	// Model ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
	Model CreateChatCompletionRequest_Model `json:"model"`

	// N How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
	N *int `json:"n"`

	// PresencePenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	//
	// [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
	PresencePenalty *float32 `json:"presence_penalty"`

	// ResponseFormat An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
	//
	// Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON.
	//
	// **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
	ResponseFormat *struct {
		// Type Must be one of `text` or `json_object`.
		Type *CreateChatCompletionRequestResponseFormatType `json:"type,omitempty"`
	} `json:"response_format,omitempty"`

	// Seed This feature is in Beta.
	// If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
	// Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
	Seed *int `json:"seed"`

	// Stop Up to 4 sequences where the API will stop generating further tokens.
	Stop *CreateChatCompletionRequest_Stop `json:"stop,omitempty"`

	// Stream If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
	Stream *bool `json:"stream"`

	// Temperature What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	//
	// We generally recommend altering this or `top_p` but not both.
	Temperature *float32 `json:"temperature"`

	// ToolChoice Controls which (if any) function is called by the model.
	// `none` means the model will not call a function and instead generates a message.
	// `auto` means the model can pick between generating a message or calling a function.
	// Specifying a particular function via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that function.
	//
	// `none` is the default when no functions are present. `auto` is the default if functions are present.
	ToolChoice *ChatCompletionToolChoiceOption `json:"tool_choice,omitempty"`

	// Tools A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
	Tools *[]ChatCompletionTool `json:"tools"`

	// TopLogprobs An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
	TopLogprobs *int `json:"top_logprobs"`

	// TopP An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	//
	// We generally recommend altering this or `temperature` but not both.
	TopP *float32 `json:"top_p"`

	// User A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User *string `json:"user,omitempty"`
}

// CreateChatCompletionRequestFunctionCall0 `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
type CreateChatCompletionRequestFunctionCall0 string

// CreateChatCompletionRequest_FunctionCall Deprecated in favor of `tool_choice`.
//
// Controls which (if any) function is called by the model.
// `none` means the model will not call a function and instead generates a message.
// `auto` means the model can pick between generating a message or calling a function.
// Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
//
// `none` is the default when no functions are present. `auto` is the default if functions are present.
type CreateChatCompletionRequest_FunctionCall struct {
	union json.RawMessage
}

// CreateChatCompletionRequestModel0 defines model for .
type CreateChatCompletionRequestModel0 = string

// CreateChatCompletionRequestModel1 defines model for CreateChatCompletionRequest.Model.1.
type CreateChatCompletionRequestModel1 string

// CreateChatCompletionRequest_Model ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
type CreateChatCompletionRequest_Model struct {
	union json.RawMessage
}

// CreateChatCompletionRequestResponseFormatType Must be one of `text` or `json_object`.
type CreateChatCompletionRequestResponseFormatType string

// CreateChatCompletionRequestStop0 defines model for .
type CreateChatCompletionRequestStop0 = string

// CreateChatCompletionRequestStop1 defines model for .
type CreateChatCompletionRequestStop1 = []string

// CreateChatCompletionRequest_Stop Up to 4 sequences where the API will stop generating further tokens.
type CreateChatCompletionRequest_Stop struct {
	union json.RawMessage
}

// CreateChatCompletionResponse Represents a chat completion response returned by model, based on the provided input.
type CreateChatCompletionResponse struct {
	// Choices A list of chat completion choices. Can be more than one if `n` is greater than 1.
	Choices []struct {
		// FinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
		// `length` if the maximum number of tokens specified in the request was reached,
		// `content_filter` if content was omitted due to a flag from our content filters,
		// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
		FinishReason CreateChatCompletionResponseChoicesFinishReason `json:"finish_reason"`

		// Index The index of the choice in the list of choices.
		Index int `json:"index"`

		// Logprobs Log probability information for the choice.
		Logprobs *struct {
			// Content A list of message content tokens with log probability information.
			Content *[]ChatCompletionTokenLogprob `json:"content"`
		} `json:"logprobs"`

		// Message A chat completion message generated by the model.
		Message ChatCompletionResponseMessage `json:"message"`
	} `json:"choices"`

	// Created The Unix timestamp (in seconds) of when the chat completion was created.
	Created int `json:"created"`

	// Id A unique identifier for the chat completion.
	Id string `json:"id"`

	// Model The model used for the chat completion.
	Model string `json:"model"`

	// Object The object type, which is always `chat.completion`.
	Object CreateChatCompletionResponseObject `json:"object"`

	// SystemFingerprint This fingerprint represents the backend configuration that the model runs with.
	//
	// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
	SystemFingerprint *string `json:"system_fingerprint,omitempty"`

	// Usage Usage statistics for the completion request.
	Usage *CompletionUsage `json:"usage,omitempty"`
}

// CreateChatCompletionResponseChoicesFinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
// `length` if the maximum number of tokens specified in the request was reached,
// `content_filter` if content was omitted due to a flag from our content filters,
// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
type CreateChatCompletionResponseChoicesFinishReason string

// CreateChatCompletionResponseObject The object type, which is always `chat.completion`.
type CreateChatCompletionResponseObject string

// CreateChatCompletionStreamResponse Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
type CreateChatCompletionStreamResponse struct {
	// Choices A list of chat completion choices. Can be more than one if `n` is greater than 1.
	Choices []struct {
		// Delta A chat completion delta generated by streamed model responses.
		Delta ChatCompletionStreamResponseDelta `json:"delta"`

		// FinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
		// `length` if the maximum number of tokens specified in the request was reached,
		// `content_filter` if content was omitted due to a flag from our content filters,
		// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
		FinishReason *CreateChatCompletionStreamResponseChoicesFinishReason `json:"finish_reason"`

		// Index The index of the choice in the list of choices.
		Index int `json:"index"`

		// Logprobs Log probability information for the choice.
		Logprobs *struct {
			// Content A list of message content tokens with log probability information.
			Content *[]ChatCompletionTokenLogprob `json:"content"`
		} `json:"logprobs"`
	} `json:"choices"`

	// Created The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
	Created int `json:"created"`

	// Id A unique identifier for the chat completion. Each chunk has the same ID.
	Id string `json:"id"`

	// Model The model to generate the completion.
	Model string `json:"model"`

	// Object The object type, which is always `chat.completion.chunk`.
	Object CreateChatCompletionStreamResponseObject `json:"object"`

	// SystemFingerprint This fingerprint represents the backend configuration that the model runs with.
	// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
	SystemFingerprint *string `json:"system_fingerprint,omitempty"`
}

// CreateChatCompletionStreamResponseChoicesFinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
// `length` if the maximum number of tokens specified in the request was reached,
// `content_filter` if content was omitted due to a flag from our content filters,
// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
type CreateChatCompletionStreamResponseChoicesFinishReason string

// CreateChatCompletionStreamResponseObject The object type, which is always `chat.completion.chunk`.
type CreateChatCompletionStreamResponseObject string

// CreateCompletionRequest defines model for CreateCompletionRequest.
type CreateCompletionRequest struct {
	// BestOf Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
	//
	// When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.
	//
	// **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
	BestOf *int `json:"best_of"`

	// Echo Echo back the prompt in addition to the completion
	Echo *bool `json:"echo"`

	// FrequencyPenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
	//
	// [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
	FrequencyPenalty *float32 `json:"frequency_penalty"`

	// LogitBias Modify the likelihood of specified tokens appearing in the completion.
	//
	// Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
	//
	// As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
	LogitBias *map[string]int `json:"logit_bias"`

	// Logprobs Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
	//
	// The maximum value for `logprobs` is 5.
	Logprobs *int `json:"logprobs"`

	// MaxTokens The maximum number of [tokens](/tokenizer) that can be generated in the completion.
	//
	// The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
	MaxTokens *int `json:"max_tokens"`

	// Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
	Model CreateCompletionRequest_Model `json:"model"`

	// N How many completions to generate for each prompt.
	//
	// **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
	N *int `json:"n"`

	// PresencePenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	//
	// [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
	PresencePenalty *float32 `json:"presence_penalty"`

	// Prompt The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
	//
	// Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
	Prompt *CreateCompletionRequest_Prompt `json:"prompt"`

	// Seed If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
	//
	// Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
	Seed *int `json:"seed"`

	// Stop Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
	Stop *CreateCompletionRequest_Stop `json:"stop"`

	// Stream Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
	Stream *bool `json:"stream"`

	// Suffix The suffix that comes after a completion of inserted text.
	//
	// This parameter is only supported for `gpt-3.5-turbo-instruct`.
	Suffix *string `json:"suffix"`

	// Temperature What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	//
	// We generally recommend altering this or `top_p` but not both.
	Temperature *float32 `json:"temperature"`

	// TopP An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	//
	// We generally recommend altering this or `temperature` but not both.
	TopP *float32 `json:"top_p"`

	// User A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User *string `json:"user,omitempty"`
}

// CreateCompletionRequestModel0 defines model for .
type CreateCompletionRequestModel0 = string

// CreateCompletionRequestModel1 defines model for CreateCompletionRequest.Model.1.
type CreateCompletionRequestModel1 string

// CreateCompletionRequest_Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
type CreateCompletionRequest_Model struct {
	union json.RawMessage
}

// CreateCompletionRequestPrompt0 defines model for .
type CreateCompletionRequestPrompt0 = string

// CreateCompletionRequestPrompt1 defines model for .
type CreateCompletionRequestPrompt1 = []string

// CreateCompletionRequestPrompt2 defines model for .
type CreateCompletionRequestPrompt2 = []int

// CreateCompletionRequestPrompt3 defines model for .
type CreateCompletionRequestPrompt3 = [][]int

// CreateCompletionRequest_Prompt The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
//
// Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
type CreateCompletionRequest_Prompt struct {
	union json.RawMessage
}

// CreateCompletionRequestStop0 defines model for .
type CreateCompletionRequestStop0 = string

// CreateCompletionRequestStop1 defines model for .
type CreateCompletionRequestStop1 = []string

// CreateCompletionRequest_Stop Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
type CreateCompletionRequest_Stop struct {
	union json.RawMessage
}

// CreateCompletionResponse Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).
type CreateCompletionResponse struct {
	// Choices The list of completion choices the model generated for the input prompt.
	Choices []struct {
		// FinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
		// `length` if the maximum number of tokens specified in the request was reached,
		// or `content_filter` if content was omitted due to a flag from our content filters.
		FinishReason CreateCompletionResponseChoicesFinishReason `json:"finish_reason"`
		Index        int                                         `json:"index"`
		Logprobs     *struct {
			TextOffset    *[]int                `json:"text_offset,omitempty"`
			TokenLogprobs *[]float32            `json:"token_logprobs,omitempty"`
			Tokens        *[]string             `json:"tokens,omitempty"`
			TopLogprobs   *[]map[string]float32 `json:"top_logprobs,omitempty"`
		} `json:"logprobs"`
		Text string `json:"text"`
	} `json:"choices"`

	// Created The Unix timestamp (in seconds) of when the completion was created.
	Created int `json:"created"`

	// Id A unique identifier for the completion.
	Id string `json:"id"`

	// Model The model used for completion.
	Model string `json:"model"`

	// Object The object type, which is always "text_completion"
	Object CreateCompletionResponseObject `json:"object"`

	// SystemFingerprint This fingerprint represents the backend configuration that the model runs with.
	//
	// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
	SystemFingerprint *string `json:"system_fingerprint,omitempty"`

	// Usage Usage statistics for the completion request.
	Usage *CompletionUsage `json:"usage,omitempty"`
}

// CreateCompletionResponseChoicesFinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
// `length` if the maximum number of tokens specified in the request was reached,
// or `content_filter` if content was omitted due to a flag from our content filters.
type CreateCompletionResponseChoicesFinishReason string

// CreateCompletionResponseObject The object type, which is always "text_completion"
type CreateCompletionResponseObject string

// CreateEmbeddingRequest defines model for CreateEmbeddingRequest.
type CreateEmbeddingRequest struct {
	// Dimensions The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
	Dimensions *int `json:"dimensions,omitempty"`

	// EncodingFormat The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
	EncodingFormat *CreateEmbeddingRequestEncodingFormat `json:"encoding_format,omitempty"`

	// Input Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
	Input CreateEmbeddingRequest_Input `json:"input"`

	// Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
	Model CreateEmbeddingRequest_Model `json:"model"`

	// User A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User *string `json:"user,omitempty"`
}

// CreateEmbeddingRequestEncodingFormat The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
type CreateEmbeddingRequestEncodingFormat string

// CreateEmbeddingRequestInput0 The string that will be turned into an embedding.
type CreateEmbeddingRequestInput0 = string

// CreateEmbeddingRequestInput1 The array of strings that will be turned into an embedding.
type CreateEmbeddingRequestInput1 = []string

// CreateEmbeddingRequestInput2 The array of integers that will be turned into an embedding.
type CreateEmbeddingRequestInput2 = []int

// CreateEmbeddingRequestInput3 The array of arrays containing integers that will be turned into an embedding.
type CreateEmbeddingRequestInput3 = [][]int

// CreateEmbeddingRequest_Input Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
type CreateEmbeddingRequest_Input struct {
	union json.RawMessage
}

// CreateEmbeddingRequestModel0 defines model for .
type CreateEmbeddingRequestModel0 = string

// CreateEmbeddingRequestModel1 defines model for CreateEmbeddingRequest.Model.1.
type CreateEmbeddingRequestModel1 string

// CreateEmbeddingRequest_Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
type CreateEmbeddingRequest_Model struct {
	union json.RawMessage
}

// CreateEmbeddingResponse defines model for CreateEmbeddingResponse.
type CreateEmbeddingResponse struct {
	// Data The list of embeddings generated by the model.
	Data []Embedding `json:"data"`

	// Model The name of the model used to generate the embedding.
	Model string `json:"model"`

	// Object The object type, which is always "list".
	Object CreateEmbeddingResponseObject `json:"object"`

	// Usage The usage information for the request.
	Usage struct {
		// PromptTokens The number of tokens used by the prompt.
		PromptTokens int `json:"prompt_tokens"`

		// TotalTokens The total number of tokens used by the request.
		TotalTokens int `json:"total_tokens"`
	} `json:"usage"`
}

// CreateEmbeddingResponseObject The object type, which is always "list".
type CreateEmbeddingResponseObject string

// CreateFileRequest defines model for CreateFileRequest.
type CreateFileRequest struct {
	// File The File object (not file name) to be uploaded.
	File openapi_types.File `json:"file"`

	// Purpose The intended purpose of the uploaded file.
	//
	// Use "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tuning) and "assistants" for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning.
	Purpose CreateFileRequestPurpose `json:"purpose"`
}

// CreateFileRequestPurpose The intended purpose of the uploaded file.
//
// Use "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tuning) and "assistants" for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning.
type CreateFileRequestPurpose string

// CreateFineTuningJobRequest defines model for CreateFineTuningJobRequest.
type CreateFineTuningJobRequest struct {
	// Hyperparameters The hyperparameters used for the fine-tuning job.
	Hyperparameters *struct {
		// BatchSize Number of examples in each batch. A larger batch size means that model parameters
		// are updated less frequently, but with lower variance.
		BatchSize *CreateFineTuningJobRequest_Hyperparameters_BatchSize `json:"batch_size,omitempty"`

		// LearningRateMultiplier Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
		// overfitting.
		LearningRateMultiplier *CreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier `json:"learning_rate_multiplier,omitempty"`

		// NEpochs The number of epochs to train the model for. An epoch refers to one full cycle
		// through the training dataset.
		NEpochs *CreateFineTuningJobRequest_Hyperparameters_NEpochs `json:"n_epochs,omitempty"`
	} `json:"hyperparameters,omitempty"`

	// Model The name of the model to fine-tune. You can select one of the
	// [supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned).
	Model CreateFineTuningJobRequest_Model `json:"model"`

	// Suffix A string of up to 18 characters that will be added to your fine-tuned model name.
	//
	// For example, a `suffix` of "custom-model-name" would produce a model name like `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`.
	Suffix *string `json:"suffix"`

	// TrainingFile The ID of an uploaded file that contains training data.
	//
	// See [upload file](/docs/api-reference/files/upload) for how to upload a file.
	//
	// Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.
	//
	// See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
	TrainingFile string `json:"training_file"`

	// ValidationFile The ID of an uploaded file that contains validation data.
	//
	// If you provide this file, the data is used to generate validation
	// metrics periodically during fine-tuning. These metrics can be viewed in
	// the fine-tuning results file.
	// The same data should not be present in both train and validation files.
	//
	// Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.
	//
	// See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
	ValidationFile *string `json:"validation_file"`
}

// CreateFineTuningJobRequestHyperparametersBatchSize0 defines model for CreateFineTuningJobRequest.Hyperparameters.BatchSize.0.
type CreateFineTuningJobRequestHyperparametersBatchSize0 string

// CreateFineTuningJobRequestHyperparametersBatchSize1 defines model for .
type CreateFineTuningJobRequestHyperparametersBatchSize1 = int

// CreateFineTuningJobRequest_Hyperparameters_BatchSize Number of examples in each batch. A larger batch size means that model parameters
// are updated less frequently, but with lower variance.
type CreateFineTuningJobRequest_Hyperparameters_BatchSize struct {
	union json.RawMessage
}

// CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 defines model for CreateFineTuningJobRequest.Hyperparameters.LearningRateMultiplier.0.
type CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 string

// CreateFineTuningJobRequestHyperparametersLearningRateMultiplier1 defines model for .
type CreateFineTuningJobRequestHyperparametersLearningRateMultiplier1 = float32

// CreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
// overfitting.
type CreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier struct {
	union json.RawMessage
}

// CreateFineTuningJobRequestHyperparametersNEpochs0 defines model for CreateFineTuningJobRequest.Hyperparameters.NEpochs.0.
type CreateFineTuningJobRequestHyperparametersNEpochs0 string

// CreateFineTuningJobRequestHyperparametersNEpochs1 defines model for .
type CreateFineTuningJobRequestHyperparametersNEpochs1 = int

// CreateFineTuningJobRequest_Hyperparameters_NEpochs The number of epochs to train the model for. An epoch refers to one full cycle
// through the training dataset.
type CreateFineTuningJobRequest_Hyperparameters_NEpochs struct {
	union json.RawMessage
}

// CreateFineTuningJobRequestModel0 defines model for .
type CreateFineTuningJobRequestModel0 = string

// CreateFineTuningJobRequestModel1 defines model for CreateFineTuningJobRequest.Model.1.
type CreateFineTuningJobRequestModel1 string

// CreateFineTuningJobRequest_Model The name of the model to fine-tune. You can select one of the
// [supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned).
type CreateFineTuningJobRequest_Model struct {
	union json.RawMessage
}

// CreateImageEditRequest defines model for CreateImageEditRequest.
type CreateImageEditRequest struct {
	// Image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
	Image openapi_types.File `json:"image"`

	// Mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
	Mask *openapi_types.File `json:"mask,omitempty"`

	// Model The model to use for image generation. Only `dall-e-2` is supported at this time.
	Model *CreateImageEditRequest_Model `json:"model"`

	// N The number of images to generate. Must be between 1 and 10.
	N *int `json:"n"`

	// Prompt A text description of the desired image(s). The maximum length is 1000 characters.
	Prompt string `json:"prompt"`

	// ResponseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
	ResponseFormat *CreateImageEditRequestResponseFormat `json:"response_format"`

	// Size The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
	Size *CreateImageEditRequestSize `json:"size"`

	// User A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User *string `json:"user,omitempty"`
}

// CreateImageEditRequestModel0 defines model for .
type CreateImageEditRequestModel0 = string

// CreateImageEditRequestModel1 defines model for CreateImageEditRequest.Model.1.
type CreateImageEditRequestModel1 string

// CreateImageEditRequest_Model The model to use for image generation. Only `dall-e-2` is supported at this time.
type CreateImageEditRequest_Model struct {
	union json.RawMessage
}

// CreateImageEditRequestResponseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
type CreateImageEditRequestResponseFormat string

// CreateImageEditRequestSize The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
type CreateImageEditRequestSize string

// CreateImageRequest defines model for CreateImageRequest.
type CreateImageRequest struct {
	// Model The model to use for image generation.
	Model *CreateImageRequest_Model `json:"model"`

	// N The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
	N *int `json:"n"`

	// Prompt A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
	Prompt string `json:"prompt"`

	// Quality The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
	Quality *CreateImageRequestQuality `json:"quality,omitempty"`

	// ResponseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
	ResponseFormat *CreateImageRequestResponseFormat `json:"response_format"`

	// Size The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
	Size *CreateImageRequestSize `json:"size"`

	// Style The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
	Style *CreateImageRequestStyle `json:"style"`

	// User A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User *string `json:"user,omitempty"`
}

// CreateImageRequestModel0 defines model for .
type CreateImageRequestModel0 = string

// CreateImageRequestModel1 defines model for CreateImageRequest.Model.1.
type CreateImageRequestModel1 string

// CreateImageRequest_Model The model to use for image generation.
type CreateImageRequest_Model struct {
	union json.RawMessage
}

// CreateImageRequestQuality The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
type CreateImageRequestQuality string

// CreateImageRequestResponseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
type CreateImageRequestResponseFormat string

// CreateImageRequestSize The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
type CreateImageRequestSize string

// CreateImageRequestStyle The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
type CreateImageRequestStyle string

// CreateImageVariationRequest defines model for CreateImageVariationRequest.
type CreateImageVariationRequest struct {
	// Image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
	Image openapi_types.File `json:"image"`

	// Model The model to use for image generation. Only `dall-e-2` is supported at this time.
	Model *CreateImageVariationRequest_Model `json:"model"`

	// N The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
	N *int `json:"n"`

	// ResponseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
	ResponseFormat *CreateImageVariationRequestResponseFormat `json:"response_format"`

	// Size The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
	Size *CreateImageVariationRequestSize `json:"size"`

	// User A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User *string `json:"user,omitempty"`
}

// CreateImageVariationRequestModel0 defines model for .
type CreateImageVariationRequestModel0 = string

// CreateImageVariationRequestModel1 defines model for CreateImageVariationRequest.Model.1.
type CreateImageVariationRequestModel1 string

// CreateImageVariationRequest_Model The model to use for image generation. Only `dall-e-2` is supported at this time.
type CreateImageVariationRequest_Model struct {
	union json.RawMessage
}

// CreateImageVariationRequestResponseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
type CreateImageVariationRequestResponseFormat string

// CreateImageVariationRequestSize The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
type CreateImageVariationRequestSize string

// CreateMessageRequest defines model for CreateMessageRequest.
type CreateMessageRequest struct {
	// Content The content of the message.
	Content string `json:"content"`

	// FileIds A list of [File](/docs/api-reference/files) IDs that the message should use. There can be a maximum of 10 files attached to a message. Useful for tools like `retrieval` and `code_interpreter` that can access and use files.
	FileIds *[]string `json:"file_ids,omitempty"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Role The role of the entity that is creating the message. Currently only `user` is supported.
	Role CreateMessageRequestRole `json:"role"`
}

// CreateMessageRequestRole The role of the entity that is creating the message. Currently only `user` is supported.
type CreateMessageRequestRole string

// CreateModerationRequest defines model for CreateModerationRequest.
type CreateModerationRequest struct {
	// Input The input text to classify
	Input CreateModerationRequest_Input `json:"input"`

	// Model Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.
	//
	// The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.
	Model *CreateModerationRequest_Model `json:"model,omitempty"`
}

// CreateModerationRequestInput0 defines model for .
type CreateModerationRequestInput0 = string

// CreateModerationRequestInput1 defines model for .
type CreateModerationRequestInput1 = []string

// CreateModerationRequest_Input The input text to classify
type CreateModerationRequest_Input struct {
	union json.RawMessage
}

// CreateModerationRequestModel0 defines model for .
type CreateModerationRequestModel0 = string

// CreateModerationRequestModel1 defines model for CreateModerationRequest.Model.1.
type CreateModerationRequestModel1 string

// CreateModerationRequest_Model Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.
//
// The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.
type CreateModerationRequest_Model struct {
	union json.RawMessage
}

// CreateModerationResponse Represents if a given text input is potentially harmful.
type CreateModerationResponse struct {
	// Id The unique identifier for the moderation request.
	Id string `json:"id"`

	// Model The model used to generate the moderation results.
	Model string `json:"model"`

	// Results A list of moderation objects.
	Results []struct {
		// Categories A list of the categories, and whether they are flagged or not.
		Categories struct {
			// Harassment Content that expresses, incites, or promotes harassing language towards any target.
			Harassment bool `json:"harassment"`

			// Harassmentthreatening Harassment content that also includes violence or serious harm towards any target.
			Harassmentthreatening bool `json:"harassment/threatening"`

			// Hate Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.
			Hate bool `json:"hate"`

			// Hatethreatening Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
			Hatethreatening bool `json:"hate/threatening"`

			// SelfHarm Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
			SelfHarm bool `json:"self-harm"`

			// SelfHarminstructions Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.
			SelfHarminstructions bool `json:"self-harm/instructions"`

			// SelfHarmintent Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.
			SelfHarmintent bool `json:"self-harm/intent"`

			// Sexual Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).
			Sexual bool `json:"sexual"`

			// Sexualminors Sexual content that includes an individual who is under 18 years old.
			Sexualminors bool `json:"sexual/minors"`

			// Violence Content that depicts death, violence, or physical injury.
			Violence bool `json:"violence"`

			// Violencegraphic Content that depicts death, violence, or physical injury in graphic detail.
			Violencegraphic bool `json:"violence/graphic"`
		} `json:"categories"`

		// CategoryScores A list of the categories along with their scores as predicted by model.
		CategoryScores struct {
			// Harassment The score for the category 'harassment'.
			Harassment float32 `json:"harassment"`

			// Harassmentthreatening The score for the category 'harassment/threatening'.
			Harassmentthreatening float32 `json:"harassment/threatening"`

			// Hate The score for the category 'hate'.
			Hate float32 `json:"hate"`

			// Hatethreatening The score for the category 'hate/threatening'.
			Hatethreatening float32 `json:"hate/threatening"`

			// SelfHarm The score for the category 'self-harm'.
			SelfHarm float32 `json:"self-harm"`

			// SelfHarminstructions The score for the category 'self-harm/instructions'.
			SelfHarminstructions float32 `json:"self-harm/instructions"`

			// SelfHarmintent The score for the category 'self-harm/intent'.
			SelfHarmintent float32 `json:"self-harm/intent"`

			// Sexual The score for the category 'sexual'.
			Sexual float32 `json:"sexual"`

			// Sexualminors The score for the category 'sexual/minors'.
			Sexualminors float32 `json:"sexual/minors"`

			// Violence The score for the category 'violence'.
			Violence float32 `json:"violence"`

			// Violencegraphic The score for the category 'violence/graphic'.
			Violencegraphic float32 `json:"violence/graphic"`
		} `json:"category_scores"`

		// Flagged Whether any of the below categories are flagged.
		Flagged bool `json:"flagged"`
	} `json:"results"`
}

// CreateRunRequest defines model for CreateRunRequest.
type CreateRunRequest struct {
	// AdditionalInstructions Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
	AdditionalInstructions *string `json:"additional_instructions"`

	// AssistantId The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
	AssistantId string `json:"assistant_id"`

	// Instructions Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
	Instructions *string `json:"instructions"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Model The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
	Model *string `json:"model"`

	// Stream If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
	Stream *bool `json:"stream"`

	// Tools Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
	Tools *[]CreateRunRequest_Tools_Item `json:"tools"`
}

// CreateRunRequest_Tools_Item defines model for CreateRunRequest.tools.Item.
type CreateRunRequest_Tools_Item struct {
	union json.RawMessage
}

// CreateSpeechRequest defines model for CreateSpeechRequest.
type CreateSpeechRequest struct {
	// Input The text to generate audio for. The maximum length is 4096 characters.
	Input string `json:"input"`

	// Model One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd`
	Model CreateSpeechRequest_Model `json:"model"`

	// ResponseFormat The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
	ResponseFormat *CreateSpeechRequestResponseFormat `json:"response_format,omitempty"`

	// Speed The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
	Speed *float32 `json:"speed,omitempty"`

	// Voice The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
	Voice CreateSpeechRequestVoice `json:"voice"`
}

// CreateSpeechRequestModel0 defines model for .
type CreateSpeechRequestModel0 = string

// CreateSpeechRequestModel1 defines model for CreateSpeechRequest.Model.1.
type CreateSpeechRequestModel1 string

// CreateSpeechRequest_Model One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd`
type CreateSpeechRequest_Model struct {
	union json.RawMessage
}

// CreateSpeechRequestResponseFormat The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
type CreateSpeechRequestResponseFormat string

// CreateSpeechRequestVoice The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
type CreateSpeechRequestVoice string

// CreateThreadAndRunRequest defines model for CreateThreadAndRunRequest.
type CreateThreadAndRunRequest struct {
	// AssistantId The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
	AssistantId string `json:"assistant_id"`

	// Instructions Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
	Instructions *string `json:"instructions"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Model The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
	Model *string `json:"model"`

	// Stream If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
	Stream *bool                `json:"stream"`
	Thread *CreateThreadRequest `json:"thread,omitempty"`

	// Tools Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
	Tools *[]CreateThreadAndRunRequest_Tools_Item `json:"tools"`
}

// CreateThreadAndRunRequest_Tools_Item defines model for CreateThreadAndRunRequest.tools.Item.
type CreateThreadAndRunRequest_Tools_Item struct {
	union json.RawMessage
}

// CreateThreadRequest defines model for CreateThreadRequest.
type CreateThreadRequest struct {
	// Messages A list of [messages](/docs/api-reference/messages) to start the thread with.
	Messages *[]CreateMessageRequest `json:"messages,omitempty"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`
}

// CreateTranscriptionRequest defines model for CreateTranscriptionRequest.
type CreateTranscriptionRequest struct {
	// File The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
	File openapi_types.File `json:"file"`

	// Language The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.
	Language *string `json:"language,omitempty"`

	// Model ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.
	Model CreateTranscriptionRequest_Model `json:"model"`

	// Prompt An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
	Prompt *string `json:"prompt,omitempty"`

	// ResponseFormat The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
	ResponseFormat *CreateTranscriptionRequestResponseFormat `json:"response_format,omitempty"`

	// Temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
	Temperature *float32 `json:"temperature,omitempty"`

	// TimestampGranularities The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.
	TimestampGranularities *[]CreateTranscriptionRequestTimestampGranularities `json:"timestamp_granularities[],omitempty"`
}

// CreateTranscriptionRequestModel0 defines model for .
type CreateTranscriptionRequestModel0 = string

// CreateTranscriptionRequestModel1 defines model for CreateTranscriptionRequest.Model.1.
type CreateTranscriptionRequestModel1 string

// CreateTranscriptionRequest_Model ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.
type CreateTranscriptionRequest_Model struct {
	union json.RawMessage
}

// CreateTranscriptionRequestResponseFormat The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
type CreateTranscriptionRequestResponseFormat string

// CreateTranscriptionRequestTimestampGranularities defines model for CreateTranscriptionRequest.TimestampGranularities.
type CreateTranscriptionRequestTimestampGranularities string

// CreateTranscriptionResponseJson Represents a transcription response returned by model, based on the provided input.
type CreateTranscriptionResponseJson struct {
	// Text The transcribed text.
	Text string `json:"text"`
}

// CreateTranscriptionResponseVerboseJson Represents a verbose json transcription response returned by model, based on the provided input.
type CreateTranscriptionResponseVerboseJson struct {
	// Duration The duration of the input audio.
	Duration string `json:"duration"`

	// Language The language of the input audio.
	Language string `json:"language"`

	// Segments Segments of the transcribed text and their corresponding details.
	Segments *[]TranscriptionSegment `json:"segments,omitempty"`

	// Text The transcribed text.
	Text string `json:"text"`

	// Words Extracted words and their corresponding timestamps.
	Words *[]TranscriptionWord `json:"words,omitempty"`
}

// CreateTranslationRequest defines model for CreateTranslationRequest.
type CreateTranslationRequest struct {
	// File The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
	File openapi_types.File `json:"file"`

	// Model ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.
	Model CreateTranslationRequest_Model `json:"model"`

	// Prompt An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.
	Prompt *string `json:"prompt,omitempty"`

	// ResponseFormat The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
	ResponseFormat *string `json:"response_format,omitempty"`

	// Temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
	Temperature *float32 `json:"temperature,omitempty"`
}

// CreateTranslationRequestModel0 defines model for .
type CreateTranslationRequestModel0 = string

// CreateTranslationRequestModel1 defines model for CreateTranslationRequest.Model.1.
type CreateTranslationRequestModel1 string

// CreateTranslationRequest_Model ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.
type CreateTranslationRequest_Model struct {
	union json.RawMessage
}

// CreateTranslationResponseJson defines model for CreateTranslationResponseJson.
type CreateTranslationResponseJson struct {
	Text string `json:"text"`
}

// CreateTranslationResponseVerboseJson defines model for CreateTranslationResponseVerboseJson.
type CreateTranslationResponseVerboseJson struct {
	// Duration The duration of the input audio.
	Duration string `json:"duration"`

	// Language The language of the output translation (always `english`).
	Language string `json:"language"`

	// Segments Segments of the translated text and their corresponding details.
	Segments *[]TranscriptionSegment `json:"segments,omitempty"`

	// Text The translated text.
	Text string `json:"text"`
}

// DeleteAssistantFileResponse Deletes the association between the assistant and the file, but does not delete the [File](/docs/api-reference/files) object itself.
type DeleteAssistantFileResponse struct {
	Deleted bool                              `json:"deleted"`
	Id      string                            `json:"id"`
	Object  DeleteAssistantFileResponseObject `json:"object"`
}

// DeleteAssistantFileResponseObject defines model for DeleteAssistantFileResponse.Object.
type DeleteAssistantFileResponseObject string

// DeleteAssistantResponse defines model for DeleteAssistantResponse.
type DeleteAssistantResponse struct {
	Deleted bool                          `json:"deleted"`
	Id      string                        `json:"id"`
	Object  DeleteAssistantResponseObject `json:"object"`
}

// DeleteAssistantResponseObject defines model for DeleteAssistantResponse.Object.
type DeleteAssistantResponseObject string

// DeleteFileResponse defines model for DeleteFileResponse.
type DeleteFileResponse struct {
	Deleted bool                     `json:"deleted"`
	Id      string                   `json:"id"`
	Object  DeleteFileResponseObject `json:"object"`
}

// DeleteFileResponseObject defines model for DeleteFileResponse.Object.
type DeleteFileResponseObject string

// DeleteMessageResponse defines model for DeleteMessageResponse.
type DeleteMessageResponse struct {
	Deleted bool                        `json:"deleted"`
	Id      string                      `json:"id"`
	Object  DeleteMessageResponseObject `json:"object"`
}

// DeleteMessageResponseObject defines model for DeleteMessageResponse.Object.
type DeleteMessageResponseObject string

// DeleteModelResponse defines model for DeleteModelResponse.
type DeleteModelResponse struct {
	Deleted bool   `json:"deleted"`
	Id      string `json:"id"`
	Object  string `json:"object"`
}

// DeleteThreadResponse defines model for DeleteThreadResponse.
type DeleteThreadResponse struct {
	Deleted bool                       `json:"deleted"`
	Id      string                     `json:"id"`
	Object  DeleteThreadResponseObject `json:"object"`
}

// DeleteThreadResponseObject defines model for DeleteThreadResponse.Object.
type DeleteThreadResponseObject string

// DoneEvent Occurs when a stream ends.
type DoneEvent struct {
	Data  DoneEventData  `json:"data"`
	Event DoneEventEvent `json:"event"`
}

// DoneEventData defines model for DoneEvent.Data.
type DoneEventData string

// DoneEventEvent defines model for DoneEvent.Event.
type DoneEventEvent string

// Embedding Represents an embedding vector returned by embedding endpoint.
type Embedding struct {
	// Embedding The embedding vector, which is a list of floats or a base64 encoded string, depending on the requested return type. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).
	Embedding Embedding_Embedding `json:"embedding"`

	// Index The index of the embedding in the list of embeddings.
	Index int `json:"index"`

	// Object The object type, which is always "embedding".
	Object EmbeddingObject `json:"object"`
}

// EmbeddingEmbedding0 defines model for .
type EmbeddingEmbedding0 = []float32

// EmbeddingEmbedding1 defines model for .
type EmbeddingEmbedding1 = string

// Embedding_Embedding The embedding vector, which is a list of floats or a base64 encoded string, depending on the requested return type. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).
type Embedding_Embedding struct {
	union json.RawMessage
}

// EmbeddingObject The object type, which is always "embedding".
type EmbeddingObject string

// Error defines model for Error.
type Error struct {
	Code    *string `json:"code"`
	Message string  `json:"message"`
	Param   *string `json:"param"`
	Type    string  `json:"type"`
}

// ErrorEvent Occurs when an [error](/docs/guides/error-codes/api-errors) occurs. This can happen due to an internal server error or a timeout.
type ErrorEvent struct {
	Data  Error           `json:"data"`
	Event ErrorEventEvent `json:"event"`
}

// ErrorEventEvent defines model for ErrorEvent.Event.
type ErrorEventEvent string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error Error `json:"error"`
}

// ExtendedAssistantFileObject A list of [Files](/docs/api-reference/files) attached to an `assistant`.
type ExtendedAssistantFileObject struct {
	// AssistantId The assistant ID that the file is attached to.
	AssistantId string `json:"assistant_id"`

	// CreatedAt The Unix timestamp (in seconds) for when the assistant file was created.
	CreatedAt int `json:"created_at"`

	// Id The identifier, which can be referenced in API endpoints.
	Id string `json:"id"`

	// Object The object type, which is always `assistant.file`.
	Object ExtendedAssistantFileObjectObject `json:"object"`
}

// ExtendedAssistantFileObjectObject The object type, which is always `assistant.file`.
type ExtendedAssistantFileObjectObject string

// ExtendedAssistantObject Represents an `assistant` that can call the model and use tools.
type ExtendedAssistantObject struct {
	// CreatedAt The Unix timestamp (in seconds) for when the assistant was created.
	CreatedAt int `json:"created_at"`

	// Description The description of the assistant. The maximum length is 512 characters.
	Description *string `json:"description"`

	// FileIds A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
	FileIds []string `json:"file_ids"`

	// GptscriptTools A list of gptscript tools available to the assistant.
	GptscriptTools *[]string `json:"gptscript_tools,omitempty"`

	// Id The identifier, which can be referenced in API endpoints.
	Id string `json:"id"`

	// Instructions The system instructions that the assistant uses. The maximum length is 32768 characters.
	Instructions *string `json:"instructions"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
	Model string `json:"model"`

	// Name The name of the assistant. The maximum length is 256 characters.
	Name *string `json:"name"`

	// Object The object type, which is always `assistant`.
	Object ExtendedAssistantObjectObject `json:"object"`

	// Tools A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
	Tools []ExtendedAssistantObject_Tools_Item `json:"tools"`
}

// ExtendedAssistantObjectObject The object type, which is always `assistant`.
type ExtendedAssistantObjectObject string

// ExtendedAssistantObject_Tools_Item defines model for ExtendedAssistantObject.tools.Item.
type ExtendedAssistantObject_Tools_Item struct {
	union json.RawMessage
}

// ExtendedAssistantStreamEvent Represents an event emitted when streaming a Run.
//
// Each event in a server-sent events stream has an `event` and `data` property:
//
// ```
// event: thread.created
// data: {"id": "thread_123", "object": "thread", ...}
// ```
//
// We emit events whenever a new object is created, transitions to a new state, or is being
// streamed in parts (deltas). For example, we emit `thread.run.created` when a new run
// is created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses
// to create a message during a run, we emit a `thread.message.created event`, a
// `thread.message.in_progress` event, many `thread.message.delta` events, and finally a
// `thread.message.completed` event.
//
// We may add additional events over time, so we recommend handling unknown events gracefully
// in your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to
// integrate the Assistants API with streaming.
type ExtendedAssistantStreamEvent struct {
	union json.RawMessage
}

// ExtendedAssistantToolsCode defines model for ExtendedAssistantToolsCode.
type ExtendedAssistantToolsCode struct {
	// Type The type of tool being defined: `code_interpreter`
	Type ExtendedAssistantToolsCodeType `json:"type"`
}

// ExtendedAssistantToolsCodeType The type of tool being defined: `code_interpreter`
type ExtendedAssistantToolsCodeType string

// ExtendedAssistantToolsFunction defines model for ExtendedAssistantToolsFunction.
type ExtendedAssistantToolsFunction struct {
	Function FunctionObject `json:"function"`

	// Type The type of tool being defined: `function`
	Type ExtendedAssistantToolsFunctionType `json:"type"`
}

// ExtendedAssistantToolsFunctionType The type of tool being defined: `function`
type ExtendedAssistantToolsFunctionType string

// ExtendedAssistantToolsRetrieval defines model for ExtendedAssistantToolsRetrieval.
type ExtendedAssistantToolsRetrieval struct {
	// Type The type of tool being defined: `retrieval`
	Type ExtendedAssistantToolsRetrievalType `json:"type"`
}

// ExtendedAssistantToolsRetrievalType The type of tool being defined: `retrieval`
type ExtendedAssistantToolsRetrievalType string

// ExtendedChatCompletionFunctionCallOption Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
type ExtendedChatCompletionFunctionCallOption struct {
	// Name The name of the function to call.
	Name string `json:"name"`
}

// ExtendedChatCompletionFunctions defines model for ExtendedChatCompletionFunctions.
type ExtendedChatCompletionFunctions struct {
	// Description A description of what the function does, used by the model to choose when and how to call the function.
	Description *string `json:"description,omitempty"`

	// Name The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
	Name string `json:"name"`

	// Parameters The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
	//
	// Omitting `parameters` defines a function with an empty parameter list.
	Parameters *FunctionParameters `json:"parameters"`
}

// ExtendedChatCompletionMessageToolCall defines model for ExtendedChatCompletionMessageToolCall.
type ExtendedChatCompletionMessageToolCall struct {
	// Function The function that the model called.
	Function struct {
		// Arguments The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
		Arguments string `json:"arguments"`

		// Name The name of the function to call.
		Name string `json:"name"`
	} `json:"function"`

	// Id The ID of the tool call.
	Id string `json:"id"`

	// Type The type of the tool. Currently, only `function` is supported.
	Type ExtendedChatCompletionMessageToolCallType `json:"type"`
}

// ExtendedChatCompletionMessageToolCallType The type of the tool. Currently, only `function` is supported.
type ExtendedChatCompletionMessageToolCallType string

// ExtendedChatCompletionMessageToolCallChunk defines model for ExtendedChatCompletionMessageToolCallChunk.
type ExtendedChatCompletionMessageToolCallChunk struct {
	Function *struct {
		// Arguments The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
		Arguments *string `json:"arguments,omitempty"`

		// Name The name of the function to call.
		Name *string `json:"name,omitempty"`
	} `json:"function,omitempty"`

	// Id The ID of the tool call.
	Id    *string `json:"id,omitempty"`
	Index int     `json:"index"`

	// Type The type of the tool. Currently, only `function` is supported.
	Type *ExtendedChatCompletionMessageToolCallChunkType `json:"type,omitempty"`
}

// ExtendedChatCompletionMessageToolCallChunkType The type of the tool. Currently, only `function` is supported.
type ExtendedChatCompletionMessageToolCallChunkType string

// ExtendedChatCompletionMessageToolCalls The tool calls generated by the model, such as function calls.
type ExtendedChatCompletionMessageToolCalls = []ChatCompletionMessageToolCall

// ExtendedChatCompletionNamedToolChoice Specifies a tool the model should use. Use to force the model to call a specific function.
type ExtendedChatCompletionNamedToolChoice struct {
	Function struct {
		// Name The name of the function to call.
		Name string `json:"name"`
	} `json:"function"`

	// Type The type of the tool. Currently, only `function` is supported.
	Type ExtendedChatCompletionNamedToolChoiceType `json:"type"`
}

// ExtendedChatCompletionNamedToolChoiceType The type of the tool. Currently, only `function` is supported.
type ExtendedChatCompletionNamedToolChoiceType string

// ExtendedChatCompletionRequestAssistantMessage defines model for ExtendedChatCompletionRequestAssistantMessage.
type ExtendedChatCompletionRequestAssistantMessage struct {
	// Content The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
	Content *string `json:"content"`

	// FunctionCall Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
	// Deprecated:
	FunctionCall *struct {
		// Arguments The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
		Arguments string `json:"arguments"`

		// Name The name of the function to call.
		Name string `json:"name"`
	} `json:"function_call,omitempty"`

	// Name An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	Name *string `json:"name,omitempty"`

	// Role The role of the messages author, in this case `assistant`.
	Role ExtendedChatCompletionRequestAssistantMessageRole `json:"role"`

	// ToolCalls The tool calls generated by the model, such as function calls.
	ToolCalls *ChatCompletionMessageToolCalls `json:"tool_calls,omitempty"`
}

// ExtendedChatCompletionRequestAssistantMessageRole The role of the messages author, in this case `assistant`.
type ExtendedChatCompletionRequestAssistantMessageRole string

// ExtendedChatCompletionRequestFunctionMessage defines model for ExtendedChatCompletionRequestFunctionMessage.
type ExtendedChatCompletionRequestFunctionMessage struct {
	// Content The contents of the function message.
	Content *string `json:"content"`

	// Name The name of the function to call.
	Name string `json:"name"`

	// Role The role of the messages author, in this case `function`.
	Role ExtendedChatCompletionRequestFunctionMessageRole `json:"role"`
}

// ExtendedChatCompletionRequestFunctionMessageRole The role of the messages author, in this case `function`.
type ExtendedChatCompletionRequestFunctionMessageRole string

// ExtendedChatCompletionRequestMessage defines model for ExtendedChatCompletionRequestMessage.
type ExtendedChatCompletionRequestMessage struct {
	union json.RawMessage
}

// ExtendedChatCompletionRequestMessageContentPart defines model for ExtendedChatCompletionRequestMessageContentPart.
type ExtendedChatCompletionRequestMessageContentPart struct {
	union json.RawMessage
}

// ExtendedChatCompletionRequestMessageContentPartImage defines model for ExtendedChatCompletionRequestMessageContentPartImage.
type ExtendedChatCompletionRequestMessageContentPartImage struct {
	ImageUrl struct {
		// Detail Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision/low-or-high-fidelity-image-understanding).
		Detail *ExtendedChatCompletionRequestMessageContentPartImageImageUrlDetail `json:"detail,omitempty"`

		// Url Either a URL of the image or the base64 encoded image data.
		Url string `json:"url"`
	} `json:"image_url"`

	// Type The type of the content part.
	Type ExtendedChatCompletionRequestMessageContentPartImageType `json:"type"`
}

// ExtendedChatCompletionRequestMessageContentPartImageImageUrlDetail Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision/low-or-high-fidelity-image-understanding).
type ExtendedChatCompletionRequestMessageContentPartImageImageUrlDetail string

// ExtendedChatCompletionRequestMessageContentPartImageType The type of the content part.
type ExtendedChatCompletionRequestMessageContentPartImageType string

// ExtendedChatCompletionRequestMessageContentPartText defines model for ExtendedChatCompletionRequestMessageContentPartText.
type ExtendedChatCompletionRequestMessageContentPartText struct {
	// Text The text content.
	Text string `json:"text"`

	// Type The type of the content part.
	Type ExtendedChatCompletionRequestMessageContentPartTextType `json:"type"`
}

// ExtendedChatCompletionRequestMessageContentPartTextType The type of the content part.
type ExtendedChatCompletionRequestMessageContentPartTextType string

// ExtendedChatCompletionRequestSystemMessage defines model for ExtendedChatCompletionRequestSystemMessage.
type ExtendedChatCompletionRequestSystemMessage struct {
	// Content The contents of the system message.
	Content string `json:"content"`

	// Name An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	Name *string `json:"name,omitempty"`

	// Role The role of the messages author, in this case `system`.
	Role ExtendedChatCompletionRequestSystemMessageRole `json:"role"`
}

// ExtendedChatCompletionRequestSystemMessageRole The role of the messages author, in this case `system`.
type ExtendedChatCompletionRequestSystemMessageRole string

// ExtendedChatCompletionRequestToolMessage defines model for ExtendedChatCompletionRequestToolMessage.
type ExtendedChatCompletionRequestToolMessage struct {
	// Content The contents of the tool message.
	Content string `json:"content"`

	// Role The role of the messages author, in this case `tool`.
	Role ExtendedChatCompletionRequestToolMessageRole `json:"role"`

	// ToolCallId Tool call that this message is responding to.
	ToolCallId string `json:"tool_call_id"`
}

// ExtendedChatCompletionRequestToolMessageRole The role of the messages author, in this case `tool`.
type ExtendedChatCompletionRequestToolMessageRole string

// ExtendedChatCompletionRequestUserMessage defines model for ExtendedChatCompletionRequestUserMessage.
type ExtendedChatCompletionRequestUserMessage struct {
	// Content The contents of the user message.
	Content ExtendedChatCompletionRequestUserMessage_Content `json:"content"`

	// Name An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	Name *string `json:"name,omitempty"`

	// Role The role of the messages author, in this case `user`.
	Role ExtendedChatCompletionRequestUserMessageRole `json:"role"`
}

// ExtendedChatCompletionRequestUserMessageContent0 The text contents of the message.
type ExtendedChatCompletionRequestUserMessageContent0 = string

// ExtendedChatCompletionRequestUserMessageContent1 An array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts. Image input is only supported when using the `gpt-4-visual-preview` model.
type ExtendedChatCompletionRequestUserMessageContent1 = []ChatCompletionRequestMessageContentPart

// ExtendedChatCompletionRequestUserMessage_Content The contents of the user message.
type ExtendedChatCompletionRequestUserMessage_Content struct {
	union json.RawMessage
}

// ExtendedChatCompletionRequestUserMessageRole The role of the messages author, in this case `user`.
type ExtendedChatCompletionRequestUserMessageRole string

// ExtendedChatCompletionResponseMessage A chat completion message generated by the model.
type ExtendedChatCompletionResponseMessage struct {
	// Content The contents of the message.
	Content *string `json:"content"`

	// FunctionCall Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
	// Deprecated:
	FunctionCall *struct {
		// Arguments The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
		Arguments string `json:"arguments"`

		// Name The name of the function to call.
		Name string `json:"name"`
	} `json:"function_call,omitempty"`

	// Role The role of the author of this message.
	Role ExtendedChatCompletionResponseMessageRole `json:"role"`

	// ToolCalls The tool calls generated by the model, such as function calls.
	ToolCalls *ChatCompletionMessageToolCalls `json:"tool_calls,omitempty"`
}

// ExtendedChatCompletionResponseMessageRole The role of the author of this message.
type ExtendedChatCompletionResponseMessageRole string

// ExtendedChatCompletionRole The role of the author of a message
type ExtendedChatCompletionRole string

// ExtendedChatCompletionStreamResponseDelta A chat completion delta generated by streamed model responses.
type ExtendedChatCompletionStreamResponseDelta struct {
	// Content The contents of the chunk message.
	Content *string `json:"content"`

	// FunctionCall Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
	// Deprecated:
	FunctionCall *struct {
		// Arguments The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
		Arguments *string `json:"arguments,omitempty"`

		// Name The name of the function to call.
		Name *string `json:"name,omitempty"`
	} `json:"function_call,omitempty"`

	// Role The role of the author of this message.
	Role      *ExtendedChatCompletionStreamResponseDeltaRole `json:"role,omitempty"`
	ToolCalls *[]ChatCompletionMessageToolCallChunk          `json:"tool_calls,omitempty"`
}

// ExtendedChatCompletionStreamResponseDeltaRole The role of the author of this message.
type ExtendedChatCompletionStreamResponseDeltaRole string

// ExtendedChatCompletionTokenLogprob defines model for ExtendedChatCompletionTokenLogprob.
type ExtendedChatCompletionTokenLogprob struct {
	// Bytes A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
	Bytes *[]int `json:"bytes"`

	// Logprob The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
	Logprob float32 `json:"logprob"`

	// Token The token.
	Token string `json:"token"`

	// TopLogprobs List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
	TopLogprobs []struct {
		// Bytes A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
		Bytes *[]int `json:"bytes"`

		// Logprob The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
		Logprob float32 `json:"logprob"`

		// Token The token.
		Token string `json:"token"`
	} `json:"top_logprobs"`
}

// ExtendedChatCompletionTool defines model for ExtendedChatCompletionTool.
type ExtendedChatCompletionTool struct {
	Function FunctionObject `json:"function"`

	// Type The type of the tool. Currently, only `function` is supported.
	Type ExtendedChatCompletionToolType `json:"type"`
}

// ExtendedChatCompletionToolType The type of the tool. Currently, only `function` is supported.
type ExtendedChatCompletionToolType string

// ExtendedChatCompletionToolChoiceOption Controls which (if any) function is called by the model.
// `none` means the model will not call a function and instead generates a message.
// `auto` means the model can pick between generating a message or calling a function.
// Specifying a particular function via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that function.
//
// `none` is the default when no functions are present. `auto` is the default if functions are present.
type ExtendedChatCompletionToolChoiceOption struct {
	union json.RawMessage
}

// ExtendedChatCompletionToolChoiceOption0 `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
type ExtendedChatCompletionToolChoiceOption0 string

// ExtendedCompletionUsage Usage statistics for the completion request.
type ExtendedCompletionUsage struct {
	// CompletionTokens Number of tokens in the generated completion.
	CompletionTokens int `json:"completion_tokens"`

	// PromptTokens Number of tokens in the prompt.
	PromptTokens int `json:"prompt_tokens"`

	// TotalTokens Total number of tokens used in the request (prompt + completion).
	TotalTokens int `json:"total_tokens"`
}

// ExtendedCreateAssistantFileRequest defines model for ExtendedCreateAssistantFileRequest.
type ExtendedCreateAssistantFileRequest struct {
	// FileId A [File](/docs/api-reference/files) ID (with `purpose="assistants"`) that the assistant should use. Useful for tools like `retrieval` and `code_interpreter` that can access files.
	FileId string `json:"file_id"`
}

// ExtendedCreateAssistantRequest defines model for ExtendedCreateAssistantRequest.
type ExtendedCreateAssistantRequest struct {
	// Description The description of the assistant. The maximum length is 512 characters.
	Description *string `json:"description"`

	// FileIds A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
	FileIds *[]string `json:"file_ids,omitempty"`

	// GptscriptTools A list of gptscript tools available to the assistant.
	GptscriptTools *[]string `json:"gptscript_tools,omitempty"`

	// Instructions The system instructions that the assistant uses. The maximum length is 32768 characters.
	Instructions *string `json:"instructions"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
	Model ExtendedCreateAssistantRequest_Model `json:"model"`

	// Name The name of the assistant. The maximum length is 256 characters.
	Name *string `json:"name"`

	// Tools A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
	Tools *[]ExtendedCreateAssistantRequest_Tools_Item `json:"tools,omitempty"`
}

// ExtendedCreateAssistantRequestModel0 defines model for .
type ExtendedCreateAssistantRequestModel0 = string

// ExtendedCreateAssistantRequest_Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
type ExtendedCreateAssistantRequest_Model struct {
	union json.RawMessage
}

// ExtendedCreateAssistantRequest_Tools_Item defines model for ExtendedCreateAssistantRequest.tools.Item.
type ExtendedCreateAssistantRequest_Tools_Item struct {
	union json.RawMessage
}

// ExtendedCreateChatCompletionFunctionResponse Represents a chat completion response returned by model, based on the provided input.
type ExtendedCreateChatCompletionFunctionResponse struct {
	// Choices A list of chat completion choices. Can be more than one if `n` is greater than 1.
	Choices []struct {
		// FinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function.
		FinishReason ExtendedCreateChatCompletionFunctionResponseChoicesFinishReason `json:"finish_reason"`

		// Index The index of the choice in the list of choices.
		Index int `json:"index"`

		// Message A chat completion message generated by the model.
		Message ChatCompletionResponseMessage `json:"message"`
	} `json:"choices"`

	// Created The Unix timestamp (in seconds) of when the chat completion was created.
	Created int `json:"created"`

	// Id A unique identifier for the chat completion.
	Id string `json:"id"`

	// Model The model used for the chat completion.
	Model string `json:"model"`

	// Object The object type, which is always `chat.completion`.
	Object ExtendedCreateChatCompletionFunctionResponseObject `json:"object"`

	// SystemFingerprint This fingerprint represents the backend configuration that the model runs with.
	//
	// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
	SystemFingerprint *string `json:"system_fingerprint,omitempty"`

	// Usage Usage statistics for the completion request.
	Usage *CompletionUsage `json:"usage,omitempty"`
}

// ExtendedCreateChatCompletionFunctionResponseChoicesFinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function.
type ExtendedCreateChatCompletionFunctionResponseChoicesFinishReason string

// ExtendedCreateChatCompletionFunctionResponseObject The object type, which is always `chat.completion`.
type ExtendedCreateChatCompletionFunctionResponseObject string

// ExtendedCreateChatCompletionImageResponse Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
type ExtendedCreateChatCompletionImageResponse = map[string]interface{}

// ExtendedCreateChatCompletionRequest defines model for ExtendedCreateChatCompletionRequest.
type ExtendedCreateChatCompletionRequest struct {
	// FrequencyPenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
	//
	// [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
	FrequencyPenalty *float32 `json:"frequency_penalty"`

	// FunctionCall Deprecated in favor of `tool_choice`.
	//
	// Controls which (if any) function is called by the model.
	// `none` means the model will not call a function and instead generates a message.
	// `auto` means the model can pick between generating a message or calling a function.
	// Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
	//
	// `none` is the default when no functions are present. `auto` is the default if functions are present.
	// Deprecated:
	FunctionCall *ExtendedCreateChatCompletionRequest_FunctionCall `json:"function_call,omitempty"`

	// Functions Deprecated in favor of `tools`.
	//
	// A list of functions the model may generate JSON inputs for.
	// Deprecated:
	Functions *[]ChatCompletionFunctions `json:"functions,omitempty"`

	// LogitBias Modify the likelihood of specified tokens appearing in the completion.
	//
	// Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
	LogitBias *map[string]int `json:"logit_bias"`

	// Logprobs Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`. This option is currently not available on the `gpt-4-vision-preview` model.
	Logprobs *bool `json:"logprobs"`

	// MaxTokens The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.
	//
	// The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
	MaxTokens *int `json:"max_tokens"`

	// Messages A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
	Messages []ChatCompletionRequestMessage `json:"messages"`

	// Model ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
	Model ExtendedCreateChatCompletionRequest_Model `json:"model"`

	// N How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
	N *int `json:"n"`

	// PresencePenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	//
	// [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
	PresencePenalty *float32 `json:"presence_penalty"`

	// ResponseFormat An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
	//
	// Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON.
	//
	// **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
	ResponseFormat *struct {
		// Type Must be one of `text` or `json_object`.
		Type *ExtendedCreateChatCompletionRequestResponseFormatType `json:"type,omitempty"`
	} `json:"response_format,omitempty"`

	// Seed This feature is in Beta.
	// If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
	// Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
	Seed *int `json:"seed"`

	// Stop Up to 4 sequences where the API will stop generating further tokens.
	Stop *ExtendedCreateChatCompletionRequest_Stop `json:"stop,omitempty"`

	// Stream If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
	Stream *bool `json:"stream"`

	// Temperature What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	//
	// We generally recommend altering this or `top_p` but not both.
	Temperature *float32 `json:"temperature"`

	// ToolChoice Controls which (if any) function is called by the model.
	// `none` means the model will not call a function and instead generates a message.
	// `auto` means the model can pick between generating a message or calling a function.
	// Specifying a particular function via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that function.
	//
	// `none` is the default when no functions are present. `auto` is the default if functions are present.
	ToolChoice *ChatCompletionToolChoiceOption `json:"tool_choice,omitempty"`

	// Tools A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
	Tools *[]ChatCompletionTool `json:"tools"`

	// TopLogprobs An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
	TopLogprobs *int `json:"top_logprobs"`

	// TopP An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	//
	// We generally recommend altering this or `temperature` but not both.
	TopP *float32 `json:"top_p"`

	// User A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User *string `json:"user,omitempty"`
}

// ExtendedCreateChatCompletionRequestFunctionCall0 `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
type ExtendedCreateChatCompletionRequestFunctionCall0 string

// ExtendedCreateChatCompletionRequest_FunctionCall Deprecated in favor of `tool_choice`.
//
// Controls which (if any) function is called by the model.
// `none` means the model will not call a function and instead generates a message.
// `auto` means the model can pick between generating a message or calling a function.
// Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
//
// `none` is the default when no functions are present. `auto` is the default if functions are present.
type ExtendedCreateChatCompletionRequest_FunctionCall struct {
	union json.RawMessage
}

// ExtendedCreateChatCompletionRequestModel0 defines model for .
type ExtendedCreateChatCompletionRequestModel0 = string

// ExtendedCreateChatCompletionRequestModel1 defines model for ExtendedCreateChatCompletionRequest.Model.1.
type ExtendedCreateChatCompletionRequestModel1 string

// ExtendedCreateChatCompletionRequest_Model ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
type ExtendedCreateChatCompletionRequest_Model struct {
	union json.RawMessage
}

// ExtendedCreateChatCompletionRequestResponseFormatType Must be one of `text` or `json_object`.
type ExtendedCreateChatCompletionRequestResponseFormatType string

// ExtendedCreateChatCompletionRequestStop0 defines model for .
type ExtendedCreateChatCompletionRequestStop0 = string

// ExtendedCreateChatCompletionRequestStop1 defines model for .
type ExtendedCreateChatCompletionRequestStop1 = []string

// ExtendedCreateChatCompletionRequest_Stop Up to 4 sequences where the API will stop generating further tokens.
type ExtendedCreateChatCompletionRequest_Stop struct {
	union json.RawMessage
}

// ExtendedCreateChatCompletionResponse Represents a chat completion response returned by model, based on the provided input.
type ExtendedCreateChatCompletionResponse struct {
	// Choices A list of chat completion choices. Can be more than one if `n` is greater than 1.
	Choices []struct {
		// FinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
		// `length` if the maximum number of tokens specified in the request was reached,
		// `content_filter` if content was omitted due to a flag from our content filters,
		// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
		FinishReason ExtendedCreateChatCompletionResponseChoicesFinishReason `json:"finish_reason"`

		// Index The index of the choice in the list of choices.
		Index int `json:"index"`

		// Logprobs Log probability information for the choice.
		Logprobs *struct {
			// Content A list of message content tokens with log probability information.
			Content *[]ChatCompletionTokenLogprob `json:"content"`
		} `json:"logprobs"`

		// Message A chat completion message generated by the model.
		Message ChatCompletionResponseMessage `json:"message"`
	} `json:"choices"`

	// Created The Unix timestamp (in seconds) of when the chat completion was created.
	Created int `json:"created"`

	// Id A unique identifier for the chat completion.
	Id string `json:"id"`

	// Model The model used for the chat completion.
	Model string `json:"model"`

	// Object The object type, which is always `chat.completion`.
	Object ExtendedCreateChatCompletionResponseObject `json:"object"`

	// SystemFingerprint This fingerprint represents the backend configuration that the model runs with.
	//
	// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
	SystemFingerprint *string `json:"system_fingerprint,omitempty"`

	// Usage Usage statistics for the completion request.
	Usage *CompletionUsage `json:"usage,omitempty"`
}

// ExtendedCreateChatCompletionResponseChoicesFinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
// `length` if the maximum number of tokens specified in the request was reached,
// `content_filter` if content was omitted due to a flag from our content filters,
// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
type ExtendedCreateChatCompletionResponseChoicesFinishReason string

// ExtendedCreateChatCompletionResponseObject The object type, which is always `chat.completion`.
type ExtendedCreateChatCompletionResponseObject string

// ExtendedCreateChatCompletionStreamResponse Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
type ExtendedCreateChatCompletionStreamResponse struct {
	// Choices A list of chat completion choices. Can be more than one if `n` is greater than 1.
	Choices []struct {
		// Delta A chat completion delta generated by streamed model responses.
		Delta ChatCompletionStreamResponseDelta `json:"delta"`

		// FinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
		// `length` if the maximum number of tokens specified in the request was reached,
		// `content_filter` if content was omitted due to a flag from our content filters,
		// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
		FinishReason *ExtendedCreateChatCompletionStreamResponseChoicesFinishReason `json:"finish_reason"`

		// Index The index of the choice in the list of choices.
		Index int `json:"index"`

		// Logprobs Log probability information for the choice.
		Logprobs *struct {
			// Content A list of message content tokens with log probability information.
			Content *[]ChatCompletionTokenLogprob `json:"content"`
		} `json:"logprobs"`
	} `json:"choices"`

	// Created The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
	Created int `json:"created"`

	// Id A unique identifier for the chat completion. Each chunk has the same ID.
	Id string `json:"id"`

	// Model The model to generate the completion.
	Model string `json:"model"`

	// Object The object type, which is always `chat.completion.chunk`.
	Object ExtendedCreateChatCompletionStreamResponseObject `json:"object"`

	// SystemFingerprint This fingerprint represents the backend configuration that the model runs with.
	// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
	SystemFingerprint *string `json:"system_fingerprint,omitempty"`

	// Usage Usage statistics for the completion request.
	Usage *CompletionUsage `json:"usage,omitempty"`
}

// ExtendedCreateChatCompletionStreamResponseChoicesFinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
// `length` if the maximum number of tokens specified in the request was reached,
// `content_filter` if content was omitted due to a flag from our content filters,
// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
type ExtendedCreateChatCompletionStreamResponseChoicesFinishReason string

// ExtendedCreateChatCompletionStreamResponseObject The object type, which is always `chat.completion.chunk`.
type ExtendedCreateChatCompletionStreamResponseObject string

// ExtendedCreateCompletionRequest defines model for ExtendedCreateCompletionRequest.
type ExtendedCreateCompletionRequest struct {
	// BestOf Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
	//
	// When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.
	//
	// **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
	BestOf *int `json:"best_of"`

	// Echo Echo back the prompt in addition to the completion
	Echo *bool `json:"echo"`

	// FrequencyPenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
	//
	// [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
	FrequencyPenalty *float32 `json:"frequency_penalty"`

	// LogitBias Modify the likelihood of specified tokens appearing in the completion.
	//
	// Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
	//
	// As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
	LogitBias *map[string]int `json:"logit_bias"`

	// Logprobs Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
	//
	// The maximum value for `logprobs` is 5.
	Logprobs *int `json:"logprobs"`

	// MaxTokens The maximum number of [tokens](/tokenizer) that can be generated in the completion.
	//
	// The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
	MaxTokens *int `json:"max_tokens"`

	// Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
	Model ExtendedCreateCompletionRequest_Model `json:"model"`

	// N How many completions to generate for each prompt.
	//
	// **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
	N *int `json:"n"`

	// PresencePenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	//
	// [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
	PresencePenalty *float32 `json:"presence_penalty"`

	// Prompt The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
	//
	// Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
	Prompt *ExtendedCreateCompletionRequest_Prompt `json:"prompt"`

	// Seed If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
	//
	// Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
	Seed *int `json:"seed"`

	// Stop Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
	Stop *ExtendedCreateCompletionRequest_Stop `json:"stop"`

	// Stream Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
	Stream *bool `json:"stream"`

	// Suffix The suffix that comes after a completion of inserted text.
	//
	// This parameter is only supported for `gpt-3.5-turbo-instruct`.
	Suffix *string `json:"suffix"`

	// Temperature What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	//
	// We generally recommend altering this or `top_p` but not both.
	Temperature *float32 `json:"temperature"`

	// TopP An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	//
	// We generally recommend altering this or `temperature` but not both.
	TopP *float32 `json:"top_p"`

	// User A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User *string `json:"user,omitempty"`
}

// ExtendedCreateCompletionRequestModel0 defines model for .
type ExtendedCreateCompletionRequestModel0 = string

// ExtendedCreateCompletionRequestModel1 defines model for ExtendedCreateCompletionRequest.Model.1.
type ExtendedCreateCompletionRequestModel1 string

// ExtendedCreateCompletionRequest_Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
type ExtendedCreateCompletionRequest_Model struct {
	union json.RawMessage
}

// ExtendedCreateCompletionRequestPrompt0 defines model for .
type ExtendedCreateCompletionRequestPrompt0 = string

// ExtendedCreateCompletionRequestPrompt1 defines model for .
type ExtendedCreateCompletionRequestPrompt1 = []string

// ExtendedCreateCompletionRequestPrompt2 defines model for .
type ExtendedCreateCompletionRequestPrompt2 = []int

// ExtendedCreateCompletionRequestPrompt3 defines model for .
type ExtendedCreateCompletionRequestPrompt3 = [][]int

// ExtendedCreateCompletionRequest_Prompt The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
//
// Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
type ExtendedCreateCompletionRequest_Prompt struct {
	union json.RawMessage
}

// ExtendedCreateCompletionRequestStop0 defines model for .
type ExtendedCreateCompletionRequestStop0 = string

// ExtendedCreateCompletionRequestStop1 defines model for .
type ExtendedCreateCompletionRequestStop1 = []string

// ExtendedCreateCompletionRequest_Stop Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
type ExtendedCreateCompletionRequest_Stop struct {
	union json.RawMessage
}

// ExtendedCreateCompletionResponse Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).
type ExtendedCreateCompletionResponse struct {
	// Choices The list of completion choices the model generated for the input prompt.
	Choices []struct {
		// FinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
		// `length` if the maximum number of tokens specified in the request was reached,
		// or `content_filter` if content was omitted due to a flag from our content filters.
		FinishReason ExtendedCreateCompletionResponseChoicesFinishReason `json:"finish_reason"`
		Index        int                                                 `json:"index"`
		Logprobs     *struct {
			TextOffset    *[]int                `json:"text_offset,omitempty"`
			TokenLogprobs *[]float32            `json:"token_logprobs,omitempty"`
			Tokens        *[]string             `json:"tokens,omitempty"`
			TopLogprobs   *[]map[string]float32 `json:"top_logprobs,omitempty"`
		} `json:"logprobs"`
		Text string `json:"text"`
	} `json:"choices"`

	// Created The Unix timestamp (in seconds) of when the completion was created.
	Created int `json:"created"`

	// Id A unique identifier for the completion.
	Id string `json:"id"`

	// Model The model used for completion.
	Model string `json:"model"`

	// Object The object type, which is always "text_completion"
	Object ExtendedCreateCompletionResponseObject `json:"object"`

	// SystemFingerprint This fingerprint represents the backend configuration that the model runs with.
	//
	// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
	SystemFingerprint *string `json:"system_fingerprint,omitempty"`

	// Usage Usage statistics for the completion request.
	Usage *CompletionUsage `json:"usage,omitempty"`
}

// ExtendedCreateCompletionResponseChoicesFinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
// `length` if the maximum number of tokens specified in the request was reached,
// or `content_filter` if content was omitted due to a flag from our content filters.
type ExtendedCreateCompletionResponseChoicesFinishReason string

// ExtendedCreateCompletionResponseObject The object type, which is always "text_completion"
type ExtendedCreateCompletionResponseObject string

// ExtendedCreateEmbeddingRequest defines model for ExtendedCreateEmbeddingRequest.
type ExtendedCreateEmbeddingRequest struct {
	// Dimensions The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
	Dimensions *int `json:"dimensions,omitempty"`

	// EncodingFormat The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
	EncodingFormat *ExtendedCreateEmbeddingRequestEncodingFormat `json:"encoding_format,omitempty"`

	// Input Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
	Input ExtendedCreateEmbeddingRequest_Input `json:"input"`

	// Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
	Model ExtendedCreateEmbeddingRequest_Model `json:"model"`

	// User A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User *string `json:"user,omitempty"`
}

// ExtendedCreateEmbeddingRequestEncodingFormat The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
type ExtendedCreateEmbeddingRequestEncodingFormat string

// ExtendedCreateEmbeddingRequestInput0 The string that will be turned into an embedding.
type ExtendedCreateEmbeddingRequestInput0 = string

// ExtendedCreateEmbeddingRequestInput1 The array of strings that will be turned into an embedding.
type ExtendedCreateEmbeddingRequestInput1 = []string

// ExtendedCreateEmbeddingRequestInput2 The array of integers that will be turned into an embedding.
type ExtendedCreateEmbeddingRequestInput2 = []int

// ExtendedCreateEmbeddingRequestInput3 The array of arrays containing integers that will be turned into an embedding.
type ExtendedCreateEmbeddingRequestInput3 = [][]int

// ExtendedCreateEmbeddingRequest_Input Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
type ExtendedCreateEmbeddingRequest_Input struct {
	union json.RawMessage
}

// ExtendedCreateEmbeddingRequestModel0 defines model for .
type ExtendedCreateEmbeddingRequestModel0 = string

// ExtendedCreateEmbeddingRequestModel1 defines model for ExtendedCreateEmbeddingRequest.Model.1.
type ExtendedCreateEmbeddingRequestModel1 string

// ExtendedCreateEmbeddingRequest_Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
type ExtendedCreateEmbeddingRequest_Model struct {
	union json.RawMessage
}

// ExtendedCreateEmbeddingResponse defines model for ExtendedCreateEmbeddingResponse.
type ExtendedCreateEmbeddingResponse struct {
	// Data The list of embeddings generated by the model.
	Data []Embedding `json:"data"`

	// Model The name of the model used to generate the embedding.
	Model string `json:"model"`

	// Object The object type, which is always "list".
	Object ExtendedCreateEmbeddingResponseObject `json:"object"`

	// Usage The usage information for the request.
	Usage struct {
		// PromptTokens The number of tokens used by the prompt.
		PromptTokens int `json:"prompt_tokens"`

		// TotalTokens The total number of tokens used by the request.
		TotalTokens int `json:"total_tokens"`
	} `json:"usage"`
}

// ExtendedCreateEmbeddingResponseObject The object type, which is always "list".
type ExtendedCreateEmbeddingResponseObject string

// ExtendedCreateFileRequest defines model for ExtendedCreateFileRequest.
type ExtendedCreateFileRequest struct {
	// File The File object (not file name) to be uploaded.
	File openapi_types.File `json:"file"`

	// Purpose The intended purpose of the uploaded file.
	//
	// Use "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tuning) and "assistants" for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning.
	Purpose ExtendedCreateFileRequestPurpose `json:"purpose"`
}

// ExtendedCreateFileRequestPurpose The intended purpose of the uploaded file.
//
// Use "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tuning) and "assistants" for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning.
type ExtendedCreateFileRequestPurpose string

// ExtendedCreateFineTuningJobRequest defines model for ExtendedCreateFineTuningJobRequest.
type ExtendedCreateFineTuningJobRequest struct {
	// Hyperparameters The hyperparameters used for the fine-tuning job.
	Hyperparameters *struct {
		// BatchSize Number of examples in each batch. A larger batch size means that model parameters
		// are updated less frequently, but with lower variance.
		BatchSize *ExtendedCreateFineTuningJobRequest_Hyperparameters_BatchSize `json:"batch_size,omitempty"`

		// LearningRateMultiplier Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
		// overfitting.
		LearningRateMultiplier *ExtendedCreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier `json:"learning_rate_multiplier,omitempty"`

		// NEpochs The number of epochs to train the model for. An epoch refers to one full cycle
		// through the training dataset.
		NEpochs *ExtendedCreateFineTuningJobRequest_Hyperparameters_NEpochs `json:"n_epochs,omitempty"`
	} `json:"hyperparameters,omitempty"`

	// Model The name of the model to fine-tune. You can select one of the
	// [supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned).
	Model ExtendedCreateFineTuningJobRequest_Model `json:"model"`

	// Suffix A string of up to 18 characters that will be added to your fine-tuned model name.
	//
	// For example, a `suffix` of "custom-model-name" would produce a model name like `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`.
	Suffix *string `json:"suffix"`

	// TrainingFile The ID of an uploaded file that contains training data.
	//
	// See [upload file](/docs/api-reference/files/upload) for how to upload a file.
	//
	// Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.
	//
	// See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
	TrainingFile string `json:"training_file"`

	// ValidationFile The ID of an uploaded file that contains validation data.
	//
	// If you provide this file, the data is used to generate validation
	// metrics periodically during fine-tuning. These metrics can be viewed in
	// the fine-tuning results file.
	// The same data should not be present in both train and validation files.
	//
	// Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.
	//
	// See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
	ValidationFile *string `json:"validation_file"`
}

// ExtendedCreateFineTuningJobRequestHyperparametersBatchSize0 defines model for ExtendedCreateFineTuningJobRequest.Hyperparameters.BatchSize.0.
type ExtendedCreateFineTuningJobRequestHyperparametersBatchSize0 string

// ExtendedCreateFineTuningJobRequestHyperparametersBatchSize1 defines model for .
type ExtendedCreateFineTuningJobRequestHyperparametersBatchSize1 = int

// ExtendedCreateFineTuningJobRequest_Hyperparameters_BatchSize Number of examples in each batch. A larger batch size means that model parameters
// are updated less frequently, but with lower variance.
type ExtendedCreateFineTuningJobRequest_Hyperparameters_BatchSize struct {
	union json.RawMessage
}

// ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 defines model for ExtendedCreateFineTuningJobRequest.Hyperparameters.LearningRateMultiplier.0.
type ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 string

// ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1 defines model for .
type ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1 = float32

// ExtendedCreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
// overfitting.
type ExtendedCreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier struct {
	union json.RawMessage
}

// ExtendedCreateFineTuningJobRequestHyperparametersNEpochs0 defines model for ExtendedCreateFineTuningJobRequest.Hyperparameters.NEpochs.0.
type ExtendedCreateFineTuningJobRequestHyperparametersNEpochs0 string

// ExtendedCreateFineTuningJobRequestHyperparametersNEpochs1 defines model for .
type ExtendedCreateFineTuningJobRequestHyperparametersNEpochs1 = int

// ExtendedCreateFineTuningJobRequest_Hyperparameters_NEpochs The number of epochs to train the model for. An epoch refers to one full cycle
// through the training dataset.
type ExtendedCreateFineTuningJobRequest_Hyperparameters_NEpochs struct {
	union json.RawMessage
}

// ExtendedCreateFineTuningJobRequestModel0 defines model for .
type ExtendedCreateFineTuningJobRequestModel0 = string

// ExtendedCreateFineTuningJobRequestModel1 defines model for ExtendedCreateFineTuningJobRequest.Model.1.
type ExtendedCreateFineTuningJobRequestModel1 string

// ExtendedCreateFineTuningJobRequest_Model The name of the model to fine-tune. You can select one of the
// [supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned).
type ExtendedCreateFineTuningJobRequest_Model struct {
	union json.RawMessage
}

// ExtendedCreateImageEditRequest defines model for ExtendedCreateImageEditRequest.
type ExtendedCreateImageEditRequest struct {
	// Image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
	Image openapi_types.File `json:"image"`

	// Mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
	Mask *openapi_types.File `json:"mask,omitempty"`

	// Model The model to use for image generation. Only `dall-e-2` is supported at this time.
	Model *ExtendedCreateImageEditRequest_Model `json:"model"`

	// N The number of images to generate. Must be between 1 and 10.
	N *int `json:"n"`

	// Prompt A text description of the desired image(s). The maximum length is 1000 characters.
	Prompt string `json:"prompt"`

	// ResponseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
	ResponseFormat *ExtendedCreateImageEditRequestResponseFormat `json:"response_format"`

	// Size The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
	Size *ExtendedCreateImageEditRequestSize `json:"size"`

	// User A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User *string `json:"user,omitempty"`
}

// ExtendedCreateImageEditRequestModel0 defines model for .
type ExtendedCreateImageEditRequestModel0 = string

// ExtendedCreateImageEditRequestModel1 defines model for ExtendedCreateImageEditRequest.Model.1.
type ExtendedCreateImageEditRequestModel1 string

// ExtendedCreateImageEditRequest_Model The model to use for image generation. Only `dall-e-2` is supported at this time.
type ExtendedCreateImageEditRequest_Model struct {
	union json.RawMessage
}

// ExtendedCreateImageEditRequestResponseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
type ExtendedCreateImageEditRequestResponseFormat string

// ExtendedCreateImageEditRequestSize The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
type ExtendedCreateImageEditRequestSize string

// ExtendedCreateImageRequest defines model for ExtendedCreateImageRequest.
type ExtendedCreateImageRequest struct {
	// Model The model to use for image generation.
	Model *ExtendedCreateImageRequest_Model `json:"model"`

	// N The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
	N *int `json:"n"`

	// Prompt A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
	Prompt string `json:"prompt"`

	// Quality The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
	Quality *ExtendedCreateImageRequestQuality `json:"quality,omitempty"`

	// ResponseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
	ResponseFormat *ExtendedCreateImageRequestResponseFormat `json:"response_format"`

	// Size The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
	Size *ExtendedCreateImageRequestSize `json:"size"`

	// Style The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
	Style *ExtendedCreateImageRequestStyle `json:"style"`

	// User A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User *string `json:"user,omitempty"`
}

// ExtendedCreateImageRequestModel0 defines model for .
type ExtendedCreateImageRequestModel0 = string

// ExtendedCreateImageRequestModel1 defines model for ExtendedCreateImageRequest.Model.1.
type ExtendedCreateImageRequestModel1 string

// ExtendedCreateImageRequest_Model The model to use for image generation.
type ExtendedCreateImageRequest_Model struct {
	union json.RawMessage
}

// ExtendedCreateImageRequestQuality The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
type ExtendedCreateImageRequestQuality string

// ExtendedCreateImageRequestResponseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
type ExtendedCreateImageRequestResponseFormat string

// ExtendedCreateImageRequestSize The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
type ExtendedCreateImageRequestSize string

// ExtendedCreateImageRequestStyle The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
type ExtendedCreateImageRequestStyle string

// ExtendedCreateImageVariationRequest defines model for ExtendedCreateImageVariationRequest.
type ExtendedCreateImageVariationRequest struct {
	// Image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
	Image openapi_types.File `json:"image"`

	// Model The model to use for image generation. Only `dall-e-2` is supported at this time.
	Model *ExtendedCreateImageVariationRequest_Model `json:"model"`

	// N The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
	N *int `json:"n"`

	// ResponseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
	ResponseFormat *ExtendedCreateImageVariationRequestResponseFormat `json:"response_format"`

	// Size The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
	Size *ExtendedCreateImageVariationRequestSize `json:"size"`

	// User A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User *string `json:"user,omitempty"`
}

// ExtendedCreateImageVariationRequestModel0 defines model for .
type ExtendedCreateImageVariationRequestModel0 = string

// ExtendedCreateImageVariationRequestModel1 defines model for ExtendedCreateImageVariationRequest.Model.1.
type ExtendedCreateImageVariationRequestModel1 string

// ExtendedCreateImageVariationRequest_Model The model to use for image generation. Only `dall-e-2` is supported at this time.
type ExtendedCreateImageVariationRequest_Model struct {
	union json.RawMessage
}

// ExtendedCreateImageVariationRequestResponseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
type ExtendedCreateImageVariationRequestResponseFormat string

// ExtendedCreateImageVariationRequestSize The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
type ExtendedCreateImageVariationRequestSize string

// ExtendedCreateMessageRequest defines model for ExtendedCreateMessageRequest.
type ExtendedCreateMessageRequest struct {
	// Content The content of the message.
	Content string `json:"content"`

	// FileIds A list of [File](/docs/api-reference/files) IDs that the message should use. There can be a maximum of 10 files attached to a message. Useful for tools like `retrieval` and `code_interpreter` that can access and use files.
	FileIds *[]string `json:"file_ids,omitempty"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Role The role of the entity that is creating the message. Currently only `user` is supported.
	Role ExtendedCreateMessageRequestRole `json:"role"`
}

// ExtendedCreateMessageRequestRole The role of the entity that is creating the message. Currently only `user` is supported.
type ExtendedCreateMessageRequestRole string

// ExtendedCreateModerationRequest defines model for ExtendedCreateModerationRequest.
type ExtendedCreateModerationRequest struct {
	// Input The input text to classify
	Input ExtendedCreateModerationRequest_Input `json:"input"`

	// Model Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.
	//
	// The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.
	Model *ExtendedCreateModerationRequest_Model `json:"model,omitempty"`
}

// ExtendedCreateModerationRequestInput0 defines model for .
type ExtendedCreateModerationRequestInput0 = string

// ExtendedCreateModerationRequestInput1 defines model for .
type ExtendedCreateModerationRequestInput1 = []string

// ExtendedCreateModerationRequest_Input The input text to classify
type ExtendedCreateModerationRequest_Input struct {
	union json.RawMessage
}

// ExtendedCreateModerationRequestModel0 defines model for .
type ExtendedCreateModerationRequestModel0 = string

// ExtendedCreateModerationRequestModel1 defines model for ExtendedCreateModerationRequest.Model.1.
type ExtendedCreateModerationRequestModel1 string

// ExtendedCreateModerationRequest_Model Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.
//
// The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.
type ExtendedCreateModerationRequest_Model struct {
	union json.RawMessage
}

// ExtendedCreateModerationResponse Represents if a given text input is potentially harmful.
type ExtendedCreateModerationResponse struct {
	// Id The unique identifier for the moderation request.
	Id string `json:"id"`

	// Model The model used to generate the moderation results.
	Model string `json:"model"`

	// Results A list of moderation objects.
	Results []struct {
		// Categories A list of the categories, and whether they are flagged or not.
		Categories struct {
			// Harassment Content that expresses, incites, or promotes harassing language towards any target.
			Harassment bool `json:"harassment"`

			// Harassmentthreatening Harassment content that also includes violence or serious harm towards any target.
			Harassmentthreatening bool `json:"harassment/threatening"`

			// Hate Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.
			Hate bool `json:"hate"`

			// Hatethreatening Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
			Hatethreatening bool `json:"hate/threatening"`

			// SelfHarm Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
			SelfHarm bool `json:"self-harm"`

			// SelfHarminstructions Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.
			SelfHarminstructions bool `json:"self-harm/instructions"`

			// SelfHarmintent Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.
			SelfHarmintent bool `json:"self-harm/intent"`

			// Sexual Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).
			Sexual bool `json:"sexual"`

			// Sexualminors Sexual content that includes an individual who is under 18 years old.
			Sexualminors bool `json:"sexual/minors"`

			// Violence Content that depicts death, violence, or physical injury.
			Violence bool `json:"violence"`

			// Violencegraphic Content that depicts death, violence, or physical injury in graphic detail.
			Violencegraphic bool `json:"violence/graphic"`
		} `json:"categories"`

		// CategoryScores A list of the categories along with their scores as predicted by model.
		CategoryScores struct {
			// Harassment The score for the category 'harassment'.
			Harassment float32 `json:"harassment"`

			// Harassmentthreatening The score for the category 'harassment/threatening'.
			Harassmentthreatening float32 `json:"harassment/threatening"`

			// Hate The score for the category 'hate'.
			Hate float32 `json:"hate"`

			// Hatethreatening The score for the category 'hate/threatening'.
			Hatethreatening float32 `json:"hate/threatening"`

			// SelfHarm The score for the category 'self-harm'.
			SelfHarm float32 `json:"self-harm"`

			// SelfHarminstructions The score for the category 'self-harm/instructions'.
			SelfHarminstructions float32 `json:"self-harm/instructions"`

			// SelfHarmintent The score for the category 'self-harm/intent'.
			SelfHarmintent float32 `json:"self-harm/intent"`

			// Sexual The score for the category 'sexual'.
			Sexual float32 `json:"sexual"`

			// Sexualminors The score for the category 'sexual/minors'.
			Sexualminors float32 `json:"sexual/minors"`

			// Violence The score for the category 'violence'.
			Violence float32 `json:"violence"`

			// Violencegraphic The score for the category 'violence/graphic'.
			Violencegraphic float32 `json:"violence/graphic"`
		} `json:"category_scores"`

		// Flagged Whether any of the below categories are flagged.
		Flagged bool `json:"flagged"`
	} `json:"results"`
}

// ExtendedCreateRunRequest defines model for ExtendedCreateRunRequest.
type ExtendedCreateRunRequest struct {
	// AdditionalInstructions Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
	AdditionalInstructions *string `json:"additional_instructions"`

	// AssistantId The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
	AssistantId string `json:"assistant_id"`

	// Instructions Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
	Instructions *string `json:"instructions"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Model The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
	Model *string `json:"model"`

	// Stream If true, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a data: [DONE] message.
	Stream *bool `json:"stream"`

	// Tools Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
	Tools *[]ExtendedCreateRunRequest_Tools_Item `json:"tools"`
}

// ExtendedCreateRunRequest_Tools_Item defines model for ExtendedCreateRunRequest.tools.Item.
type ExtendedCreateRunRequest_Tools_Item struct {
	union json.RawMessage
}

// ExtendedCreateSpeechRequest defines model for ExtendedCreateSpeechRequest.
type ExtendedCreateSpeechRequest struct {
	// Input The text to generate audio for. The maximum length is 4096 characters.
	Input string `json:"input"`

	// Model One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd`
	Model ExtendedCreateSpeechRequest_Model `json:"model"`

	// ResponseFormat The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
	ResponseFormat *ExtendedCreateSpeechRequestResponseFormat `json:"response_format,omitempty"`

	// Speed The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
	Speed *float32 `json:"speed,omitempty"`

	// Voice The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
	Voice ExtendedCreateSpeechRequestVoice `json:"voice"`
}

// ExtendedCreateSpeechRequestModel0 defines model for .
type ExtendedCreateSpeechRequestModel0 = string

// ExtendedCreateSpeechRequestModel1 defines model for ExtendedCreateSpeechRequest.Model.1.
type ExtendedCreateSpeechRequestModel1 string

// ExtendedCreateSpeechRequest_Model One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd`
type ExtendedCreateSpeechRequest_Model struct {
	union json.RawMessage
}

// ExtendedCreateSpeechRequestResponseFormat The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
type ExtendedCreateSpeechRequestResponseFormat string

// ExtendedCreateSpeechRequestVoice The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
type ExtendedCreateSpeechRequestVoice string

// ExtendedCreateThreadAndRunRequest defines model for ExtendedCreateThreadAndRunRequest.
type ExtendedCreateThreadAndRunRequest struct {
	// AssistantId The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
	AssistantId string `json:"assistant_id"`

	// Instructions Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
	Instructions *string `json:"instructions"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Model The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
	Model *string `json:"model"`

	// Stream If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
	Stream *bool                `json:"stream"`
	Thread *CreateThreadRequest `json:"thread,omitempty"`

	// Tools Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
	Tools *[]ExtendedCreateThreadAndRunRequest_Tools_Item `json:"tools"`
}

// ExtendedCreateThreadAndRunRequest_Tools_Item defines model for ExtendedCreateThreadAndRunRequest.tools.Item.
type ExtendedCreateThreadAndRunRequest_Tools_Item struct {
	union json.RawMessage
}

// ExtendedCreateThreadRequest defines model for ExtendedCreateThreadRequest.
type ExtendedCreateThreadRequest struct {
	// Messages A list of [messages](/docs/api-reference/messages) to start the thread with.
	Messages *[]CreateMessageRequest `json:"messages,omitempty"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`
}

// ExtendedCreateTranscriptionRequest defines model for ExtendedCreateTranscriptionRequest.
type ExtendedCreateTranscriptionRequest struct {
	// File The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
	File openapi_types.File `json:"file"`

	// Language The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.
	Language *string `json:"language,omitempty"`

	// Model ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.
	Model ExtendedCreateTranscriptionRequest_Model `json:"model"`

	// Prompt An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
	Prompt *string `json:"prompt,omitempty"`

	// ResponseFormat The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
	ResponseFormat *ExtendedCreateTranscriptionRequestResponseFormat `json:"response_format,omitempty"`

	// Temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
	Temperature *float32 `json:"temperature,omitempty"`

	// TimestampGranularities The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.
	TimestampGranularities *[]ExtendedCreateTranscriptionRequestTimestampGranularities `json:"timestamp_granularities[],omitempty"`
}

// ExtendedCreateTranscriptionRequestModel0 defines model for .
type ExtendedCreateTranscriptionRequestModel0 = string

// ExtendedCreateTranscriptionRequestModel1 defines model for ExtendedCreateTranscriptionRequest.Model.1.
type ExtendedCreateTranscriptionRequestModel1 string

// ExtendedCreateTranscriptionRequest_Model ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.
type ExtendedCreateTranscriptionRequest_Model struct {
	union json.RawMessage
}

// ExtendedCreateTranscriptionRequestResponseFormat The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
type ExtendedCreateTranscriptionRequestResponseFormat string

// ExtendedCreateTranscriptionRequestTimestampGranularities defines model for ExtendedCreateTranscriptionRequest.TimestampGranularities.
type ExtendedCreateTranscriptionRequestTimestampGranularities string

// ExtendedCreateTranscriptionResponseJson Represents a transcription response returned by model, based on the provided input.
type ExtendedCreateTranscriptionResponseJson struct {
	// Text The transcribed text.
	Text string `json:"text"`
}

// ExtendedCreateTranscriptionResponseVerboseJson Represents a verbose json transcription response returned by model, based on the provided input.
type ExtendedCreateTranscriptionResponseVerboseJson struct {
	// Duration The duration of the input audio.
	Duration string `json:"duration"`

	// Language The language of the input audio.
	Language string `json:"language"`

	// Segments Segments of the transcribed text and their corresponding details.
	Segments *[]TranscriptionSegment `json:"segments,omitempty"`

	// Text The transcribed text.
	Text string `json:"text"`

	// Words Extracted words and their corresponding timestamps.
	Words *[]TranscriptionWord `json:"words,omitempty"`
}

// ExtendedCreateTranslationRequest defines model for ExtendedCreateTranslationRequest.
type ExtendedCreateTranslationRequest struct {
	// File The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
	File openapi_types.File `json:"file"`

	// Model ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.
	Model ExtendedCreateTranslationRequest_Model `json:"model"`

	// Prompt An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.
	Prompt *string `json:"prompt,omitempty"`

	// ResponseFormat The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
	ResponseFormat *string `json:"response_format,omitempty"`

	// Temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
	Temperature *float32 `json:"temperature,omitempty"`
}

// ExtendedCreateTranslationRequestModel0 defines model for .
type ExtendedCreateTranslationRequestModel0 = string

// ExtendedCreateTranslationRequestModel1 defines model for ExtendedCreateTranslationRequest.Model.1.
type ExtendedCreateTranslationRequestModel1 string

// ExtendedCreateTranslationRequest_Model ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.
type ExtendedCreateTranslationRequest_Model struct {
	union json.RawMessage
}

// ExtendedCreateTranslationResponseJson defines model for ExtendedCreateTranslationResponseJson.
type ExtendedCreateTranslationResponseJson struct {
	Text string `json:"text"`
}

// ExtendedCreateTranslationResponseVerboseJson defines model for ExtendedCreateTranslationResponseVerboseJson.
type ExtendedCreateTranslationResponseVerboseJson struct {
	// Duration The duration of the input audio.
	Duration string `json:"duration"`

	// Language The language of the output translation (always `english`).
	Language string `json:"language"`

	// Segments Segments of the translated text and their corresponding details.
	Segments *[]TranscriptionSegment `json:"segments,omitempty"`

	// Text The translated text.
	Text string `json:"text"`
}

// ExtendedDeleteAssistantFileResponse Deletes the association between the assistant and the file, but does not delete the [File](/docs/api-reference/files) object itself.
type ExtendedDeleteAssistantFileResponse struct {
	Deleted bool                                      `json:"deleted"`
	Id      string                                    `json:"id"`
	Object  ExtendedDeleteAssistantFileResponseObject `json:"object"`
}

// ExtendedDeleteAssistantFileResponseObject defines model for ExtendedDeleteAssistantFileResponse.Object.
type ExtendedDeleteAssistantFileResponseObject string

// ExtendedDeleteAssistantResponse defines model for ExtendedDeleteAssistantResponse.
type ExtendedDeleteAssistantResponse struct {
	Deleted bool                                  `json:"deleted"`
	Id      string                                `json:"id"`
	Object  ExtendedDeleteAssistantResponseObject `json:"object"`
}

// ExtendedDeleteAssistantResponseObject defines model for ExtendedDeleteAssistantResponse.Object.
type ExtendedDeleteAssistantResponseObject string

// ExtendedDeleteFileResponse defines model for ExtendedDeleteFileResponse.
type ExtendedDeleteFileResponse struct {
	Deleted bool                             `json:"deleted"`
	Id      string                           `json:"id"`
	Object  ExtendedDeleteFileResponseObject `json:"object"`
}

// ExtendedDeleteFileResponseObject defines model for ExtendedDeleteFileResponse.Object.
type ExtendedDeleteFileResponseObject string

// ExtendedDeleteMessageResponse defines model for ExtendedDeleteMessageResponse.
type ExtendedDeleteMessageResponse struct {
	Deleted bool                                `json:"deleted"`
	Id      string                              `json:"id"`
	Object  ExtendedDeleteMessageResponseObject `json:"object"`
}

// ExtendedDeleteMessageResponseObject defines model for ExtendedDeleteMessageResponse.Object.
type ExtendedDeleteMessageResponseObject string

// ExtendedDeleteModelResponse defines model for ExtendedDeleteModelResponse.
type ExtendedDeleteModelResponse struct {
	Deleted bool   `json:"deleted"`
	Id      string `json:"id"`
	Object  string `json:"object"`
}

// ExtendedDeleteThreadResponse defines model for ExtendedDeleteThreadResponse.
type ExtendedDeleteThreadResponse struct {
	Deleted bool                               `json:"deleted"`
	Id      string                             `json:"id"`
	Object  ExtendedDeleteThreadResponseObject `json:"object"`
}

// ExtendedDeleteThreadResponseObject defines model for ExtendedDeleteThreadResponse.Object.
type ExtendedDeleteThreadResponseObject string

// ExtendedDoneEvent Occurs when a stream ends.
type ExtendedDoneEvent struct {
	Data  ExtendedDoneEventData  `json:"data"`
	Event ExtendedDoneEventEvent `json:"event"`
}

// ExtendedDoneEventData defines model for ExtendedDoneEvent.Data.
type ExtendedDoneEventData string

// ExtendedDoneEventEvent defines model for ExtendedDoneEvent.Event.
type ExtendedDoneEventEvent string

// ExtendedEmbedding Represents an embedding vector returned by embedding endpoint.
type ExtendedEmbedding struct {
	// Embedding The embedding vector, which is a list of floats or a base64 encoded string, depending on the requested return type. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).
	Embedding ExtendedEmbedding_Embedding `json:"embedding"`

	// Index The index of the embedding in the list of embeddings.
	Index int `json:"index"`

	// Object The object type, which is always "embedding".
	Object ExtendedEmbeddingObject `json:"object"`
}

// ExtendedEmbeddingEmbedding0 defines model for .
type ExtendedEmbeddingEmbedding0 = []float32

// ExtendedEmbeddingEmbedding1 defines model for .
type ExtendedEmbeddingEmbedding1 = string

// ExtendedEmbedding_Embedding The embedding vector, which is a list of floats or a base64 encoded string, depending on the requested return type. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).
type ExtendedEmbedding_Embedding struct {
	union json.RawMessage
}

// ExtendedEmbeddingObject The object type, which is always "embedding".
type ExtendedEmbeddingObject string

// ExtendedError defines model for ExtendedError.
type ExtendedError struct {
	Code    *string `json:"code"`
	Message string  `json:"message"`
	Param   *string `json:"param"`
	Type    string  `json:"type"`
}

// ExtendedErrorEvent Occurs when an [error](/docs/guides/error-codes/api-errors) occurs. This can happen due to an internal server error or a timeout.
type ExtendedErrorEvent struct {
	Data  Error                   `json:"data"`
	Event ExtendedErrorEventEvent `json:"event"`
}

// ExtendedErrorEventEvent defines model for ExtendedErrorEvent.Event.
type ExtendedErrorEventEvent string

// ExtendedErrorResponse defines model for ExtendedErrorResponse.
type ExtendedErrorResponse struct {
	Error Error `json:"error"`
}

// ExtendedFineTuningJob The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.
type ExtendedFineTuningJob struct {
	// CreatedAt The Unix timestamp (in seconds) for when the fine-tuning job was created.
	CreatedAt int `json:"created_at"`

	// Error For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
	Error *struct {
		// Code A machine-readable error code.
		Code string `json:"code"`

		// Message A human-readable error message.
		Message string `json:"message"`

		// Param The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.
		Param *string `json:"param"`
	} `json:"error"`

	// FineTunedModel The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
	FineTunedModel *string `json:"fine_tuned_model"`

	// FinishedAt The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
	FinishedAt *int `json:"finished_at"`

	// Hyperparameters The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
	Hyperparameters struct {
		// NEpochs The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
		// "auto" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
		NEpochs ExtendedFineTuningJob_Hyperparameters_NEpochs `json:"n_epochs"`
	} `json:"hyperparameters"`

	// Id The object identifier, which can be referenced in the API endpoints.
	Id string `json:"id"`

	// Model The base model that is being fine-tuned.
	Model string `json:"model"`

	// Object The object type, which is always "fine_tuning.job".
	Object ExtendedFineTuningJobObject `json:"object"`

	// OrganizationId The organization that owns the fine-tuning job.
	OrganizationId string `json:"organization_id"`

	// ResultFiles The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
	ResultFiles []string `json:"result_files"`

	// Status The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
	Status ExtendedFineTuningJobStatus `json:"status"`

	// TrainedTokens The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
	TrainedTokens *int `json:"trained_tokens"`

	// TrainingFile The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
	TrainingFile string `json:"training_file"`

	// ValidationFile The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
	ValidationFile *string `json:"validation_file"`
}

// ExtendedFineTuningJobHyperparametersNEpochs0 defines model for ExtendedFineTuningJob.Hyperparameters.NEpochs.0.
type ExtendedFineTuningJobHyperparametersNEpochs0 string

// ExtendedFineTuningJobHyperparametersNEpochs1 defines model for .
type ExtendedFineTuningJobHyperparametersNEpochs1 = int

// ExtendedFineTuningJob_Hyperparameters_NEpochs The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
// "auto" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
type ExtendedFineTuningJob_Hyperparameters_NEpochs struct {
	union json.RawMessage
}

// ExtendedFineTuningJobObject The object type, which is always "fine_tuning.job".
type ExtendedFineTuningJobObject string

// ExtendedFineTuningJobStatus The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
type ExtendedFineTuningJobStatus string

// ExtendedFineTuningJobEvent Fine-tuning job event object
type ExtendedFineTuningJobEvent struct {
	CreatedAt int                              `json:"created_at"`
	Id        string                           `json:"id"`
	Level     ExtendedFineTuningJobEventLevel  `json:"level"`
	Message   string                           `json:"message"`
	Object    ExtendedFineTuningJobEventObject `json:"object"`
}

// ExtendedFineTuningJobEventLevel defines model for ExtendedFineTuningJobEvent.Level.
type ExtendedFineTuningJobEventLevel string

// ExtendedFineTuningJobEventObject defines model for ExtendedFineTuningJobEvent.Object.
type ExtendedFineTuningJobEventObject string

// ExtendedFunctionObject defines model for ExtendedFunctionObject.
type ExtendedFunctionObject struct {
	// Description A description of what the function does, used by the model to choose when and how to call the function.
	Description *string `json:"description,omitempty"`

	// Name The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
	Name string `json:"name"`

	// Parameters The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
	//
	// Omitting `parameters` defines a function with an empty parameter list.
	Parameters *FunctionParameters `json:"parameters"`
}

// ExtendedFunctionParameters The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
//
// Omitting `parameters` defines a function with an empty parameter list.
type ExtendedFunctionParameters map[string]interface{}

// ExtendedImage Represents the url or the content of an image generated by the OpenAI API.
type ExtendedImage struct {
	// B64Json The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
	B64Json *string `json:"b64_json,omitempty"`

	// RevisedPrompt The prompt that was used to generate the image, if there was any revision to the prompt.
	RevisedPrompt *string `json:"revised_prompt,omitempty"`

	// Url The URL of the generated image, if `response_format` is `url` (default).
	Url *string `json:"url,omitempty"`
}

// ExtendedImagesResponse defines model for ExtendedImagesResponse.
type ExtendedImagesResponse struct {
	Created int     `json:"created"`
	Data    []Image `json:"data"`
}

// ExtendedListAssistantFilesResponse defines model for ExtendedListAssistantFilesResponse.
type ExtendedListAssistantFilesResponse struct {
	Data    []AssistantFileObject `json:"data"`
	FirstId string                `json:"first_id"`
	HasMore bool                  `json:"has_more"`
	LastId  string                `json:"last_id"`
	Object  string                `json:"object"`
}

// ExtendedListAssistantsResponse defines model for ExtendedListAssistantsResponse.
type ExtendedListAssistantsResponse struct {
	Data    []AssistantObject `json:"data"`
	FirstId string            `json:"first_id"`
	HasMore bool              `json:"has_more"`
	LastId  string            `json:"last_id"`
	Object  string            `json:"object"`
}

// ExtendedListFilesResponse defines model for ExtendedListFilesResponse.
type ExtendedListFilesResponse struct {
	Data   []OpenAIFile                    `json:"data"`
	Object ExtendedListFilesResponseObject `json:"object"`
}

// ExtendedListFilesResponseObject defines model for ExtendedListFilesResponse.Object.
type ExtendedListFilesResponseObject string

// ExtendedListFineTuningJobEventsResponse defines model for ExtendedListFineTuningJobEventsResponse.
type ExtendedListFineTuningJobEventsResponse struct {
	Data   []FineTuningJobEvent                          `json:"data"`
	Object ExtendedListFineTuningJobEventsResponseObject `json:"object"`
}

// ExtendedListFineTuningJobEventsResponseObject defines model for ExtendedListFineTuningJobEventsResponse.Object.
type ExtendedListFineTuningJobEventsResponseObject string

// ExtendedListMessageFilesResponse defines model for ExtendedListMessageFilesResponse.
type ExtendedListMessageFilesResponse struct {
	Data    []MessageFileObject `json:"data"`
	FirstId string              `json:"first_id"`
	HasMore bool                `json:"has_more"`
	LastId  string              `json:"last_id"`
	Object  string              `json:"object"`
}

// ExtendedListMessagesResponse defines model for ExtendedListMessagesResponse.
type ExtendedListMessagesResponse struct {
	Data    []MessageObject `json:"data"`
	FirstId string          `json:"first_id"`
	HasMore bool            `json:"has_more"`
	LastId  string          `json:"last_id"`
	Object  string          `json:"object"`
}

// ExtendedListModelsResponse defines model for ExtendedListModelsResponse.
type ExtendedListModelsResponse struct {
	Data   []Model                          `json:"data"`
	Object ExtendedListModelsResponseObject `json:"object"`
}

// ExtendedListModelsResponseObject defines model for ExtendedListModelsResponse.Object.
type ExtendedListModelsResponseObject string

// ExtendedListPaginatedFineTuningJobsResponse defines model for ExtendedListPaginatedFineTuningJobsResponse.
type ExtendedListPaginatedFineTuningJobsResponse struct {
	Data    []FineTuningJob                                   `json:"data"`
	HasMore bool                                              `json:"has_more"`
	Object  ExtendedListPaginatedFineTuningJobsResponseObject `json:"object"`
}

// ExtendedListPaginatedFineTuningJobsResponseObject defines model for ExtendedListPaginatedFineTuningJobsResponse.Object.
type ExtendedListPaginatedFineTuningJobsResponseObject string

// ExtendedListRunStepsResponse defines model for ExtendedListRunStepsResponse.
type ExtendedListRunStepsResponse struct {
	Data    []RunStepObject `json:"data"`
	FirstId string          `json:"first_id"`
	HasMore bool            `json:"has_more"`
	LastId  string          `json:"last_id"`
	Object  string          `json:"object"`
}

// ExtendedListRunsResponse defines model for ExtendedListRunsResponse.
type ExtendedListRunsResponse struct {
	Data    []RunObject `json:"data"`
	FirstId string      `json:"first_id"`
	HasMore bool        `json:"has_more"`
	LastId  string      `json:"last_id"`
	Object  string      `json:"object"`
}

// ExtendedListThreadsResponse defines model for ExtendedListThreadsResponse.
type ExtendedListThreadsResponse struct {
	Data    []ThreadObject `json:"data"`
	FirstId string         `json:"first_id"`
	HasMore bool           `json:"has_more"`
	LastId  string         `json:"last_id"`
	Object  string         `json:"object"`
}

// ExtendedMessageContentImageFileObject References an image [File](/docs/api-reference/files) in the content of a message.
type ExtendedMessageContentImageFileObject struct {
	ImageFile struct {
		// FileId The [File](/docs/api-reference/files) ID of the image in the message content.
		FileId string `json:"file_id"`
	} `json:"image_file"`

	// Type Always `image_file`.
	Type ExtendedMessageContentImageFileObjectType `json:"type"`
}

// ExtendedMessageContentImageFileObjectType Always `image_file`.
type ExtendedMessageContentImageFileObjectType string

// ExtendedMessageContentTextAnnotationsFileCitationObject A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "retrieval" tool to search files.
type ExtendedMessageContentTextAnnotationsFileCitationObject struct {
	EndIndex     int `json:"end_index"`
	FileCitation struct {
		// FileId The ID of the specific File the citation is from.
		FileId string `json:"file_id"`

		// Quote The specific quote in the file.
		Quote string `json:"quote"`
	} `json:"file_citation"`
	StartIndex int `json:"start_index"`

	// Text The text in the message content that needs to be replaced.
	Text string `json:"text"`

	// Type Always `file_citation`.
	Type ExtendedMessageContentTextAnnotationsFileCitationObjectType `json:"type"`
}

// ExtendedMessageContentTextAnnotationsFileCitationObjectType Always `file_citation`.
type ExtendedMessageContentTextAnnotationsFileCitationObjectType string

// ExtendedMessageContentTextAnnotationsFilePathObject A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
type ExtendedMessageContentTextAnnotationsFilePathObject struct {
	EndIndex int `json:"end_index"`
	FilePath struct {
		// FileId The ID of the file that was generated.
		FileId string `json:"file_id"`
	} `json:"file_path"`
	StartIndex int `json:"start_index"`

	// Text The text in the message content that needs to be replaced.
	Text string `json:"text"`

	// Type Always `file_path`.
	Type ExtendedMessageContentTextAnnotationsFilePathObjectType `json:"type"`
}

// ExtendedMessageContentTextAnnotationsFilePathObjectType Always `file_path`.
type ExtendedMessageContentTextAnnotationsFilePathObjectType string

// ExtendedMessageContentTextObject The text content that is part of a message.
type ExtendedMessageContentTextObject struct {
	Text struct {
		Annotations []ExtendedMessageContentTextObject_Text_Annotations_Item `json:"annotations"`

		// Value The data that makes up the text.
		Value string `json:"value"`
	} `json:"text"`

	// Type Always `text`.
	Type ExtendedMessageContentTextObjectType `json:"type"`
}

// ExtendedMessageContentTextObject_Text_Annotations_Item defines model for ExtendedMessageContentTextObject.Text.Annotations.Item.
type ExtendedMessageContentTextObject_Text_Annotations_Item struct {
	union json.RawMessage
}

// ExtendedMessageContentTextObjectType Always `text`.
type ExtendedMessageContentTextObjectType string

// ExtendedMessageDeltaContentImageFileObject References an image [File](/docs/api-reference/files) in the content of a message.
type ExtendedMessageDeltaContentImageFileObject struct {
	ImageFile *struct {
		// FileId The [File](/docs/api-reference/files) ID of the image in the message content.
		FileId *string `json:"file_id,omitempty"`
	} `json:"image_file,omitempty"`

	// Index The index of the content part in the message.
	Index int `json:"index"`

	// Type Always `image_file`.
	Type ExtendedMessageDeltaContentImageFileObjectType `json:"type"`
}

// ExtendedMessageDeltaContentImageFileObjectType Always `image_file`.
type ExtendedMessageDeltaContentImageFileObjectType string

// ExtendedMessageDeltaContentTextAnnotationsFileCitationObject A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "retrieval" tool to search files.
type ExtendedMessageDeltaContentTextAnnotationsFileCitationObject struct {
	EndIndex     *int `json:"end_index,omitempty"`
	FileCitation *struct {
		// FileId The ID of the specific File the citation is from.
		FileId *string `json:"file_id,omitempty"`

		// Quote The specific quote in the file.
		Quote *string `json:"quote,omitempty"`
	} `json:"file_citation,omitempty"`

	// Index The index of the annotation in the text content part.
	Index      int  `json:"index"`
	StartIndex *int `json:"start_index,omitempty"`

	// Text The text in the message content that needs to be replaced.
	Text *string `json:"text,omitempty"`

	// Type Always `file_citation`.
	Type ExtendedMessageDeltaContentTextAnnotationsFileCitationObjectType `json:"type"`
}

// ExtendedMessageDeltaContentTextAnnotationsFileCitationObjectType Always `file_citation`.
type ExtendedMessageDeltaContentTextAnnotationsFileCitationObjectType string

// ExtendedMessageDeltaContentTextAnnotationsFilePathObject A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
type ExtendedMessageDeltaContentTextAnnotationsFilePathObject struct {
	EndIndex *int `json:"end_index,omitempty"`
	FilePath *struct {
		// FileId The ID of the file that was generated.
		FileId *string `json:"file_id,omitempty"`
	} `json:"file_path,omitempty"`

	// Index The index of the annotation in the text content part.
	Index      int  `json:"index"`
	StartIndex *int `json:"start_index,omitempty"`

	// Text The text in the message content that needs to be replaced.
	Text *string `json:"text,omitempty"`

	// Type Always `file_path`.
	Type ExtendedMessageDeltaContentTextAnnotationsFilePathObjectType `json:"type"`
}

// ExtendedMessageDeltaContentTextAnnotationsFilePathObjectType Always `file_path`.
type ExtendedMessageDeltaContentTextAnnotationsFilePathObjectType string

// ExtendedMessageDeltaContentTextObject The text content that is part of a message.
type ExtendedMessageDeltaContentTextObject struct {
	// Index The index of the content part in the message.
	Index int `json:"index"`
	Text  *struct {
		Annotations *[]ExtendedMessageDeltaContentTextObject_Text_Annotations_Item `json:"annotations,omitempty"`

		// Value The data that makes up the text.
		Value *string `json:"value,omitempty"`
	} `json:"text,omitempty"`

	// Type Always `text`.
	Type ExtendedMessageDeltaContentTextObjectType `json:"type"`
}

// ExtendedMessageDeltaContentTextObject_Text_Annotations_Item defines model for ExtendedMessageDeltaContentTextObject.Text.Annotations.Item.
type ExtendedMessageDeltaContentTextObject_Text_Annotations_Item struct {
	union json.RawMessage
}

// ExtendedMessageDeltaContentTextObjectType Always `text`.
type ExtendedMessageDeltaContentTextObjectType string

// ExtendedMessageDeltaObject Represents a message delta i.e. any changed fields on a message during streaming.
type ExtendedMessageDeltaObject struct {
	// Delta The delta containing the fields that have changed on the Message.
	Delta struct {
		// Content The content of the message in array of text and/or images.
		Content *[]ExtendedMessageDeltaObject_Delta_Content_Item `json:"content,omitempty"`

		// FileIds A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
		FileIds *[]string `json:"file_ids,omitempty"`

		// Role The entity that produced the message. One of `user` or `assistant`.
		Role *ExtendedMessageDeltaObjectDeltaRole `json:"role,omitempty"`
	} `json:"delta"`

	// Id The identifier of the message, which can be referenced in API endpoints.
	Id string `json:"id"`

	// Object The object type, which is always `thread.message.delta`.
	Object ExtendedMessageDeltaObjectObject `json:"object"`
}

// ExtendedMessageDeltaObject_Delta_Content_Item defines model for ExtendedMessageDeltaObject.Delta.Content.Item.
type ExtendedMessageDeltaObject_Delta_Content_Item struct {
	union json.RawMessage
}

// ExtendedMessageDeltaObjectDeltaRole The entity that produced the message. One of `user` or `assistant`.
type ExtendedMessageDeltaObjectDeltaRole string

// ExtendedMessageDeltaObjectObject The object type, which is always `thread.message.delta`.
type ExtendedMessageDeltaObjectObject string

// ExtendedMessageFileObject A list of files attached to a `message`.
type ExtendedMessageFileObject struct {
	// CreatedAt The Unix timestamp (in seconds) for when the message file was created.
	CreatedAt int `json:"created_at"`

	// Id The identifier, which can be referenced in API endpoints.
	Id string `json:"id"`

	// MessageId The ID of the [message](/docs/api-reference/messages) that the [File](/docs/api-reference/files) is attached to.
	MessageId string `json:"message_id"`

	// Object The object type, which is always `thread.message.file`.
	Object ExtendedMessageFileObjectObject `json:"object"`
}

// ExtendedMessageFileObjectObject The object type, which is always `thread.message.file`.
type ExtendedMessageFileObjectObject string

// ExtendedMessageObject Represents a message within a [thread](/docs/api-reference/threads).
type ExtendedMessageObject struct {
	// AssistantId If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
	AssistantId *string `json:"assistant_id"`

	// CompletedAt The Unix timestamp (in seconds) for when the message was completed.
	CompletedAt *int `json:"completed_at"`

	// Content The content of the message in array of text and/or images.
	Content []ExtendedMessageObject_Content_Item `json:"content"`

	// CreatedAt The Unix timestamp (in seconds) for when the message was created.
	CreatedAt int `json:"created_at"`

	// FileIds A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
	FileIds []string `json:"file_ids"`

	// Id The identifier, which can be referenced in API endpoints.
	Id string `json:"id"`

	// IncompleteAt The Unix timestamp (in seconds) for when the message was completed.
	IncompleteAt *int `json:"incomplete_at"`

	// IncompleteDetails On an incomplete message, details about why the message is incomplete.
	IncompleteDetails *struct {
		Reason *string `json:"reason,omitempty"`
	} `json:"incomplete_details"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Object The object type, which is always `thread.message`.
	Object ExtendedMessageObjectObject `json:"object"`

	// Role The entity that produced the message. One of `user` or `assistant`.
	Role ExtendedMessageObjectRole `json:"role"`

	// RunId If applicable, the ID of the [run](/docs/api-reference/runs) associated with the authoring of this message.
	RunId *string `json:"run_id"`

	// Status The status of the message, which can be either in_progress, incomplete, or completed.
	Status ExtendedMessageObjectStatus `json:"status"`

	// ThreadId The [thread](/docs/api-reference/threads) ID that this message belongs to.
	ThreadId string `json:"thread_id"`
}

// ExtendedMessageObject_Content_Item defines model for ExtendedMessageObject.content.Item.
type ExtendedMessageObject_Content_Item struct {
	union json.RawMessage
}

// ExtendedMessageObjectObject The object type, which is always `thread.message`.
type ExtendedMessageObjectObject string

// ExtendedMessageObjectRole The entity that produced the message. One of `user` or `assistant`.
type ExtendedMessageObjectRole string

// ExtendedMessageObjectStatus The status of the message, which can be either in_progress, incomplete, or completed.
type ExtendedMessageObjectStatus string

// ExtendedMessageStreamEvent defines model for ExtendedMessageStreamEvent.
type ExtendedMessageStreamEvent struct {
	union json.RawMessage
}

// ExtendedMessageStreamEvent0 Occurs when a [message](/docs/api-reference/messages/object) is created.
type ExtendedMessageStreamEvent0 struct {
	// Data Represents a message within a [thread](/docs/api-reference/threads).
	Data  MessageObject                    `json:"data"`
	Event ExtendedMessageStreamEvent0Event `json:"event"`
}

// ExtendedMessageStreamEvent0Event defines model for ExtendedMessageStreamEvent.0.Event.
type ExtendedMessageStreamEvent0Event string

// ExtendedMessageStreamEvent1 Occurs when a [message](/docs/api-reference/messages/object) moves to an `in_progress` state.
type ExtendedMessageStreamEvent1 struct {
	// Data Represents a message within a [thread](/docs/api-reference/threads).
	Data  MessageObject                    `json:"data"`
	Event ExtendedMessageStreamEvent1Event `json:"event"`
}

// ExtendedMessageStreamEvent1Event defines model for ExtendedMessageStreamEvent.1.Event.
type ExtendedMessageStreamEvent1Event string

// ExtendedMessageStreamEvent2 Occurs when parts of a [Message](/docs/api-reference/messages/object) are being streamed.
type ExtendedMessageStreamEvent2 struct {
	// Data Represents a message delta i.e. any changed fields on a message during streaming.
	Data  MessageDeltaObject               `json:"data"`
	Event ExtendedMessageStreamEvent2Event `json:"event"`
}

// ExtendedMessageStreamEvent2Event defines model for ExtendedMessageStreamEvent.2.Event.
type ExtendedMessageStreamEvent2Event string

// ExtendedMessageStreamEvent3 Occurs when a [message](/docs/api-reference/messages/object) is completed.
type ExtendedMessageStreamEvent3 struct {
	// Data Represents a message within a [thread](/docs/api-reference/threads).
	Data  MessageObject                    `json:"data"`
	Event ExtendedMessageStreamEvent3Event `json:"event"`
}

// ExtendedMessageStreamEvent3Event defines model for ExtendedMessageStreamEvent.3.Event.
type ExtendedMessageStreamEvent3Event string

// ExtendedMessageStreamEvent4 Occurs when a [message](/docs/api-reference/messages/object) ends before it is completed.
type ExtendedMessageStreamEvent4 struct {
	// Data Represents a message within a [thread](/docs/api-reference/threads).
	Data  MessageObject                    `json:"data"`
	Event ExtendedMessageStreamEvent4Event `json:"event"`
}

// ExtendedMessageStreamEvent4Event defines model for ExtendedMessageStreamEvent.4.Event.
type ExtendedMessageStreamEvent4Event string

// ExtendedModel Describes an OpenAI model offering that can be used with the API.
type ExtendedModel struct {
	// Created The Unix timestamp (in seconds) when the model was created.
	Created int `json:"created"`

	// Id The model identifier, which can be referenced in the API endpoints.
	Id string `json:"id"`

	// Object The object type, which is always "model".
	Object ExtendedModelObject `json:"object"`

	// OwnedBy The organization that owns the model.
	OwnedBy string `json:"owned_by"`
}

// ExtendedModelObject The object type, which is always "model".
type ExtendedModelObject string

// ExtendedModifyAssistantRequest defines model for ExtendedModifyAssistantRequest.
type ExtendedModifyAssistantRequest struct {
	// Description The description of the assistant. The maximum length is 512 characters.
	Description *string `json:"description"`

	// FileIds A list of [File](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. If a file was previously attached to the list but does not show up in the list, it will be deleted from the assistant.
	FileIds *[]string `json:"file_ids,omitempty"`

	// GptscriptTools A list of gptscript tools available to the assistant.
	GptscriptTools *[]string `json:"gptscript_tools,omitempty"`

	// Instructions The system instructions that the assistant uses. The maximum length is 32768 characters.
	Instructions *string `json:"instructions"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
	Model *ExtendedModifyAssistantRequest_Model `json:"model,omitempty"`

	// Name The name of the assistant. The maximum length is 256 characters.
	Name *string `json:"name"`

	// Tools A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
	Tools *[]ExtendedModifyAssistantRequest_Tools_Item `json:"tools,omitempty"`
}

// ExtendedModifyAssistantRequestModel0 defines model for .
type ExtendedModifyAssistantRequestModel0 = string

// ExtendedModifyAssistantRequest_Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
type ExtendedModifyAssistantRequest_Model struct {
	union json.RawMessage
}

// ExtendedModifyAssistantRequest_Tools_Item defines model for ExtendedModifyAssistantRequest.tools.Item.
type ExtendedModifyAssistantRequest_Tools_Item struct {
	union json.RawMessage
}

// ExtendedModifyMessageRequest defines model for ExtendedModifyMessageRequest.
type ExtendedModifyMessageRequest struct {
	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`
}

// ExtendedModifyRunRequest defines model for ExtendedModifyRunRequest.
type ExtendedModifyRunRequest struct {
	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`
}

// ExtendedModifyThreadRequest defines model for ExtendedModifyThreadRequest.
type ExtendedModifyThreadRequest struct {
	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`
}

// ExtendedOpenAIFile The `File` object represents a document that has been uploaded to OpenAI.
type ExtendedOpenAIFile struct {
	// Bytes The size of the file, in bytes.
	Bytes int `json:"bytes"`

	// CreatedAt The Unix timestamp (in seconds) for when the file was created.
	CreatedAt int `json:"created_at"`

	// Filename The name of the file.
	Filename string `json:"filename"`

	// Id The file identifier, which can be referenced in the API endpoints.
	Id string `json:"id"`

	// Object The object type, which is always `file`.
	Object ExtendedOpenAIFileObject `json:"object"`

	// Purpose The intended purpose of the file. Supported values are `fine-tune`, `fine-tune-results`, `assistants`, and `assistants_output`.
	Purpose ExtendedOpenAIFilePurpose `json:"purpose"`

	// Status Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
	// Deprecated:
	Status ExtendedOpenAIFileStatus `json:"status"`

	// StatusDetails Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
	// Deprecated:
	StatusDetails *string `json:"status_details,omitempty"`
}

// ExtendedOpenAIFileObject The object type, which is always `file`.
type ExtendedOpenAIFileObject string

// ExtendedOpenAIFilePurpose The intended purpose of the file. Supported values are `fine-tune`, `fine-tune-results`, `assistants`, and `assistants_output`.
type ExtendedOpenAIFilePurpose string

// ExtendedOpenAIFileStatus Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
type ExtendedOpenAIFileStatus string

// ExtendedRunCompletionUsage Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
type ExtendedRunCompletionUsage struct {
	// CompletionTokens Number of completion tokens used over the course of the run.
	CompletionTokens int `json:"completion_tokens"`

	// PromptTokens Number of prompt tokens used over the course of the run.
	PromptTokens int `json:"prompt_tokens"`

	// TotalTokens Total number of tokens used (prompt + completion).
	TotalTokens int `json:"total_tokens"`
}

// ExtendedRunObject Represents an execution run on a [thread](/docs/api-reference/threads).
type ExtendedRunObject struct {
	// AssistantId The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
	AssistantId string `json:"assistant_id"`

	// CancelledAt The Unix timestamp (in seconds) for when the run was cancelled.
	CancelledAt *int `json:"cancelled_at"`

	// CompletedAt The Unix timestamp (in seconds) for when the run was completed.
	CompletedAt *int `json:"completed_at"`

	// CreatedAt The Unix timestamp (in seconds) for when the run was created.
	CreatedAt int `json:"created_at"`

	// ExpiresAt The Unix timestamp (in seconds) for when the run will expire.
	ExpiresAt *int `json:"expires_at"`

	// FailedAt The Unix timestamp (in seconds) for when the run failed.
	FailedAt *int `json:"failed_at"`

	// FileIds The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
	FileIds []string `json:"file_ids"`

	// Id The identifier, which can be referenced in API endpoints.
	Id string `json:"id"`

	// Instructions The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
	Instructions string `json:"instructions"`

	// LastError The last error associated with this run. Will be `null` if there are no errors.
	LastError *struct {
		// Code One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
		Code ExtendedRunObjectLastErrorCode `json:"code"`

		// Message A human-readable description of the error.
		Message string `json:"message"`
	} `json:"last_error"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Model The model that the [assistant](/docs/api-reference/assistants) used for this run.
	Model string `json:"model"`

	// Object The object type, which is always `thread.run`.
	Object ExtendedRunObjectObject `json:"object"`

	// RequiredAction Details on the action required to continue the run. Will be `null` if no action is required.
	RequiredAction *struct {
		// SubmitToolOutputs Details on the tool outputs needed for this run to continue.
		SubmitToolOutputs struct {
			// ToolCalls A list of the relevant tool calls.
			ToolCalls []RunToolCallObject `json:"tool_calls"`
		} `json:"submit_tool_outputs"`

		// Type For now, this is always `submit_tool_outputs`.
		Type ExtendedRunObjectRequiredActionType `json:"type"`
	} `json:"required_action"`

	// StartedAt The Unix timestamp (in seconds) for when the run was started.
	StartedAt *int `json:"started_at"`

	// Status The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
	Status ExtendedRunObjectStatus `json:"status"`

	// ThreadId The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
	ThreadId string `json:"thread_id"`

	// Tools The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
	Tools []ExtendedRunObject_Tools_Item `json:"tools"`

	// Usage Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
	Usage *RunCompletionUsage `json:"usage"`
}

// ExtendedRunObjectLastErrorCode One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
type ExtendedRunObjectLastErrorCode string

// ExtendedRunObjectObject The object type, which is always `thread.run`.
type ExtendedRunObjectObject string

// ExtendedRunObjectRequiredActionType For now, this is always `submit_tool_outputs`.
type ExtendedRunObjectRequiredActionType string

// ExtendedRunObjectStatus The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
type ExtendedRunObjectStatus string

// ExtendedRunObject_Tools_Item defines model for ExtendedRunObject.tools.Item.
type ExtendedRunObject_Tools_Item struct {
	union json.RawMessage
}

// ExtendedRunStepCompletionUsage Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.
type ExtendedRunStepCompletionUsage struct {
	// CompletionTokens Number of completion tokens used over the course of the run step.
	CompletionTokens int `json:"completion_tokens"`

	// PromptTokens Number of prompt tokens used over the course of the run step.
	PromptTokens int `json:"prompt_tokens"`

	// TotalTokens Total number of tokens used (prompt + completion).
	TotalTokens int `json:"total_tokens"`
}

// ExtendedRunStepDeltaObject Represents a run step delta i.e. any changed fields on a run step during streaming.
type ExtendedRunStepDeltaObject struct {
	// Delta The delta containing the fields that have changed on the run step.
	Delta struct {
		// StepDetails The details of the run step.
		StepDetails *ExtendedRunStepDeltaObject_Delta_StepDetails `json:"step_details,omitempty"`
	} `json:"delta"`

	// Id The identifier of the run step, which can be referenced in API endpoints.
	Id string `json:"id"`

	// Object The object type, which is always `thread.run.step.delta`.
	Object ExtendedRunStepDeltaObjectObject `json:"object"`
}

// ExtendedRunStepDeltaObject_Delta_StepDetails The details of the run step.
type ExtendedRunStepDeltaObject_Delta_StepDetails struct {
	union json.RawMessage
}

// ExtendedRunStepDeltaObjectObject The object type, which is always `thread.run.step.delta`.
type ExtendedRunStepDeltaObjectObject string

// ExtendedRunStepDeltaStepDetailsMessageCreationObject Details of the message creation by the run step.
type ExtendedRunStepDeltaStepDetailsMessageCreationObject struct {
	MessageCreation *struct {
		// MessageId The ID of the message that was created by this run step.
		MessageId *string `json:"message_id,omitempty"`
	} `json:"message_creation,omitempty"`

	// Type Always `message_creation`.
	Type ExtendedRunStepDeltaStepDetailsMessageCreationObjectType `json:"type"`
}

// ExtendedRunStepDeltaStepDetailsMessageCreationObjectType Always `message_creation`.
type ExtendedRunStepDeltaStepDetailsMessageCreationObjectType string

// ExtendedRunStepDeltaStepDetailsToolCallsCodeObject Details of the Code Interpreter tool call the run step was involved in.
type ExtendedRunStepDeltaStepDetailsToolCallsCodeObject struct {
	// CodeInterpreter The Code Interpreter tool call definition.
	CodeInterpreter *struct {
		// Input The input to the Code Interpreter tool call.
		Input *string `json:"input,omitempty"`

		// Outputs The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
		Outputs *[]ExtendedRunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item `json:"outputs,omitempty"`
	} `json:"code_interpreter,omitempty"`

	// Id The ID of the tool call.
	Id *string `json:"id,omitempty"`

	// Index The index of the tool call in the tool calls array.
	Index int `json:"index"`

	// Type The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
	Type ExtendedRunStepDeltaStepDetailsToolCallsCodeObjectType `json:"type"`
}

// ExtendedRunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item defines model for ExtendedRunStepDeltaStepDetailsToolCallsCodeObject.CodeInterpreter.Outputs.Item.
type ExtendedRunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item struct {
	union json.RawMessage
}

// ExtendedRunStepDeltaStepDetailsToolCallsCodeObjectType The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
type ExtendedRunStepDeltaStepDetailsToolCallsCodeObjectType string

// ExtendedRunStepDeltaStepDetailsToolCallsCodeOutputImageObject defines model for ExtendedRunStepDeltaStepDetailsToolCallsCodeOutputImageObject.
type ExtendedRunStepDeltaStepDetailsToolCallsCodeOutputImageObject struct {
	Image *struct {
		// FileId The [file](/docs/api-reference/files) ID of the image.
		FileId *string `json:"file_id,omitempty"`
	} `json:"image,omitempty"`

	// Index The index of the output in the outputs array.
	Index int `json:"index"`

	// Type Always `image`.
	Type ExtendedRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType `json:"type"`
}

// ExtendedRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType Always `image`.
type ExtendedRunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType string

// ExtendedRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject Text output from the Code Interpreter tool call as part of a run step.
type ExtendedRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject struct {
	// Index The index of the output in the outputs array.
	Index int `json:"index"`

	// Logs The text output from the Code Interpreter tool call.
	Logs *string `json:"logs,omitempty"`

	// Type Always `logs`.
	Type ExtendedRunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType `json:"type"`
}

// ExtendedRunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType Always `logs`.
type ExtendedRunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType string

// ExtendedRunStepDeltaStepDetailsToolCallsFunctionObject defines model for ExtendedRunStepDeltaStepDetailsToolCallsFunctionObject.
type ExtendedRunStepDeltaStepDetailsToolCallsFunctionObject struct {
	// Function The definition of the function that was called.
	Function *struct {
		// Arguments The arguments passed to the function.
		Arguments *string `json:"arguments,omitempty"`

		// Name The name of the function.
		Name *string `json:"name,omitempty"`

		// Output The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
		Output *string `json:"output"`
	} `json:"function,omitempty"`

	// Id The ID of the tool call object.
	Id *string `json:"id,omitempty"`

	// Index The index of the tool call in the tool calls array.
	Index int `json:"index"`

	// Type The type of tool call. This is always going to be `function` for this type of tool call.
	Type ExtendedRunStepDeltaStepDetailsToolCallsFunctionObjectType `json:"type"`
}

// ExtendedRunStepDeltaStepDetailsToolCallsFunctionObjectType The type of tool call. This is always going to be `function` for this type of tool call.
type ExtendedRunStepDeltaStepDetailsToolCallsFunctionObjectType string

// ExtendedRunStepDeltaStepDetailsToolCallsObject Details of the tool call.
type ExtendedRunStepDeltaStepDetailsToolCallsObject struct {
	// ToolCalls An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`.
	ToolCalls *[]ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item `json:"tool_calls,omitempty"`

	// Type Always `tool_calls`.
	Type ExtendedRunStepDeltaStepDetailsToolCallsObjectType `json:"type"`
}

// ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item defines model for ExtendedRunStepDeltaStepDetailsToolCallsObject.tool_calls.Item.
type ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item struct {
	union json.RawMessage
}

// ExtendedRunStepDeltaStepDetailsToolCallsObjectType Always `tool_calls`.
type ExtendedRunStepDeltaStepDetailsToolCallsObjectType string

// ExtendedRunStepDeltaStepDetailsToolCallsRetrievalObject defines model for ExtendedRunStepDeltaStepDetailsToolCallsRetrievalObject.
type ExtendedRunStepDeltaStepDetailsToolCallsRetrievalObject struct {
	// Id The ID of the tool call object.
	Id *string `json:"id,omitempty"`

	// Index The index of the tool call in the tool calls array.
	Index int `json:"index"`

	// Retrieval For now, this is always going to be an empty object.
	Retrieval *map[string]interface{} `json:"retrieval,omitempty"`

	// Type The type of tool call. This is always going to be `retrieval` for this type of tool call.
	Type ExtendedRunStepDeltaStepDetailsToolCallsRetrievalObjectType `json:"type"`
}

// ExtendedRunStepDeltaStepDetailsToolCallsRetrievalObjectType The type of tool call. This is always going to be `retrieval` for this type of tool call.
type ExtendedRunStepDeltaStepDetailsToolCallsRetrievalObjectType string

// ExtendedRunStepDetailsMessageCreationObject Details of the message creation by the run step.
type ExtendedRunStepDetailsMessageCreationObject struct {
	MessageCreation struct {
		// MessageId The ID of the message that was created by this run step.
		MessageId string `json:"message_id"`
	} `json:"message_creation"`

	// Type Always `message_creation`.
	Type ExtendedRunStepDetailsMessageCreationObjectType `json:"type"`
}

// ExtendedRunStepDetailsMessageCreationObjectType Always `message_creation`.
type ExtendedRunStepDetailsMessageCreationObjectType string

// ExtendedRunStepDetailsToolCallsCodeObject Details of the Code Interpreter tool call the run step was involved in.
type ExtendedRunStepDetailsToolCallsCodeObject struct {
	// CodeInterpreter The Code Interpreter tool call definition.
	CodeInterpreter struct {
		// Input The input to the Code Interpreter tool call.
		Input string `json:"input"`

		// Outputs The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
		Outputs []ExtendedRunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item `json:"outputs"`
	} `json:"code_interpreter"`

	// Id The ID of the tool call.
	Id string `json:"id"`

	// Type The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
	Type ExtendedRunStepDetailsToolCallsCodeObjectType `json:"type"`
}

// ExtendedRunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item defines model for ExtendedRunStepDetailsToolCallsCodeObject.CodeInterpreter.Outputs.Item.
type ExtendedRunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item struct {
	union json.RawMessage
}

// ExtendedRunStepDetailsToolCallsCodeObjectType The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
type ExtendedRunStepDetailsToolCallsCodeObjectType string

// ExtendedRunStepDetailsToolCallsCodeOutputImageObject defines model for ExtendedRunStepDetailsToolCallsCodeOutputImageObject.
type ExtendedRunStepDetailsToolCallsCodeOutputImageObject struct {
	Image struct {
		// FileId The [file](/docs/api-reference/files) ID of the image.
		FileId string `json:"file_id"`
	} `json:"image"`

	// Type Always `image`.
	Type ExtendedRunStepDetailsToolCallsCodeOutputImageObjectType `json:"type"`
}

// ExtendedRunStepDetailsToolCallsCodeOutputImageObjectType Always `image`.
type ExtendedRunStepDetailsToolCallsCodeOutputImageObjectType string

// ExtendedRunStepDetailsToolCallsCodeOutputLogsObject Text output from the Code Interpreter tool call as part of a run step.
type ExtendedRunStepDetailsToolCallsCodeOutputLogsObject struct {
	// Logs The text output from the Code Interpreter tool call.
	Logs string `json:"logs"`

	// Type Always `logs`.
	Type ExtendedRunStepDetailsToolCallsCodeOutputLogsObjectType `json:"type"`
}

// ExtendedRunStepDetailsToolCallsCodeOutputLogsObjectType Always `logs`.
type ExtendedRunStepDetailsToolCallsCodeOutputLogsObjectType string

// ExtendedRunStepDetailsToolCallsFunctionObject defines model for ExtendedRunStepDetailsToolCallsFunctionObject.
type ExtendedRunStepDetailsToolCallsFunctionObject struct {
	// Function The definition of the function that was called.
	Function struct {
		// Arguments The arguments passed to the function.
		Arguments string `json:"arguments"`

		// Name The name of the function.
		Name string `json:"name"`

		// Output The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
		Output *string `json:"output"`
	} `json:"function"`

	// Id The ID of the tool call object.
	Id string `json:"id"`

	// Type The type of tool call. This is always going to be `function` for this type of tool call.
	Type ExtendedRunStepDetailsToolCallsFunctionObjectType `json:"type"`
}

// ExtendedRunStepDetailsToolCallsFunctionObjectType The type of tool call. This is always going to be `function` for this type of tool call.
type ExtendedRunStepDetailsToolCallsFunctionObjectType string

// ExtendedRunStepDetailsToolCallsObject Details of the tool call.
type ExtendedRunStepDetailsToolCallsObject struct {
	// ToolCalls An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`.
	ToolCalls []ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item `json:"tool_calls"`

	// Type Always `tool_calls`.
	Type ExtendedRunStepDetailsToolCallsObjectType `json:"type"`
}

// ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item defines model for ExtendedRunStepDetailsToolCallsObject.tool_calls.Item.
type ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item struct {
	union json.RawMessage
}

// ExtendedRunStepDetailsToolCallsObjectType Always `tool_calls`.
type ExtendedRunStepDetailsToolCallsObjectType string

// ExtendedRunStepDetailsToolCallsRetrievalObject defines model for ExtendedRunStepDetailsToolCallsRetrievalObject.
type ExtendedRunStepDetailsToolCallsRetrievalObject struct {
	// Id The ID of the tool call object.
	Id string `json:"id"`

	// Retrieval For now, this is always going to be an empty object.
	Retrieval map[string]interface{} `json:"retrieval"`

	// Type The type of tool call. This is always going to be `retrieval` for this type of tool call.
	Type ExtendedRunStepDetailsToolCallsRetrievalObjectType `json:"type"`
}

// ExtendedRunStepDetailsToolCallsRetrievalObjectType The type of tool call. This is always going to be `retrieval` for this type of tool call.
type ExtendedRunStepDetailsToolCallsRetrievalObjectType string

// ExtendedRunStepObject Represents a step in execution of a run.
type ExtendedRunStepObject struct {
	// AssistantId The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
	AssistantId string `json:"assistant_id"`

	// CancelledAt The Unix timestamp (in seconds) for when the run step was cancelled.
	CancelledAt *int `json:"cancelled_at"`

	// CompletedAt The Unix timestamp (in seconds) for when the run step completed.
	CompletedAt *int `json:"completed_at"`

	// CreatedAt The Unix timestamp (in seconds) for when the run step was created.
	CreatedAt int `json:"created_at"`

	// ExpiredAt The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
	ExpiredAt *int `json:"expired_at"`

	// FailedAt The Unix timestamp (in seconds) for when the run step failed.
	FailedAt *int `json:"failed_at"`

	// Id The identifier of the run step, which can be referenced in API endpoints.
	Id string `json:"id"`

	// LastError The last error associated with this run step. Will be `null` if there are no errors.
	LastError *struct {
		// Code One of `server_error` or `rate_limit_exceeded`.
		Code ExtendedRunStepObjectLastErrorCode `json:"code"`

		// Message A human-readable description of the error.
		Message string `json:"message"`
	} `json:"last_error"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Object The object type, which is always `thread.run.step`.
	Object ExtendedRunStepObjectObject `json:"object"`

	// RunId The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
	RunId string `json:"run_id"`

	// Status The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
	Status ExtendedRunStepObjectStatus `json:"status"`

	// StepDetails The details of the run step.
	StepDetails ExtendedRunStepObject_StepDetails `json:"step_details"`

	// ThreadId The ID of the [thread](/docs/api-reference/threads) that was run.
	ThreadId string `json:"thread_id"`

	// Type The type of run step, which can be either `message_creation` or `tool_calls`.
	Type ExtendedRunStepObjectType `json:"type"`

	// Usage Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.
	Usage *RunStepCompletionUsage `json:"usage"`
}

// ExtendedRunStepObjectLastErrorCode One of `server_error` or `rate_limit_exceeded`.
type ExtendedRunStepObjectLastErrorCode string

// ExtendedRunStepObjectObject The object type, which is always `thread.run.step`.
type ExtendedRunStepObjectObject string

// ExtendedRunStepObjectStatus The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
type ExtendedRunStepObjectStatus string

// ExtendedRunStepObject_StepDetails The details of the run step.
type ExtendedRunStepObject_StepDetails struct {
	union json.RawMessage
}

// ExtendedRunStepObjectType The type of run step, which can be either `message_creation` or `tool_calls`.
type ExtendedRunStepObjectType string

// ExtendedRunStepStreamEvent defines model for ExtendedRunStepStreamEvent.
type ExtendedRunStepStreamEvent struct {
	union json.RawMessage
}

// ExtendedRunStepStreamEvent0 Occurs when a [run step](/docs/api-reference/runs/step-object) is created.
type ExtendedRunStepStreamEvent0 struct {
	// Data Represents a step in execution of a run.
	Data  RunStepObject                    `json:"data"`
	Event ExtendedRunStepStreamEvent0Event `json:"event"`
}

// ExtendedRunStepStreamEvent0Event defines model for ExtendedRunStepStreamEvent.0.Event.
type ExtendedRunStepStreamEvent0Event string

// ExtendedRunStepStreamEvent1 Occurs when a [run step](/docs/api-reference/runs/step-object) moves to an `in_progress` state.
type ExtendedRunStepStreamEvent1 struct {
	// Data Represents a step in execution of a run.
	Data  RunStepObject                    `json:"data"`
	Event ExtendedRunStepStreamEvent1Event `json:"event"`
}

// ExtendedRunStepStreamEvent1Event defines model for ExtendedRunStepStreamEvent.1.Event.
type ExtendedRunStepStreamEvent1Event string

// ExtendedRunStepStreamEvent2 Occurs when parts of a [run step](/docs/api-reference/runs/step-object) are being streamed.
type ExtendedRunStepStreamEvent2 struct {
	// Data Represents a run step delta i.e. any changed fields on a run step during streaming.
	Data  RunStepDeltaObject               `json:"data"`
	Event ExtendedRunStepStreamEvent2Event `json:"event"`
}

// ExtendedRunStepStreamEvent2Event defines model for ExtendedRunStepStreamEvent.2.Event.
type ExtendedRunStepStreamEvent2Event string

// ExtendedRunStepStreamEvent3 Occurs when a [run step](/docs/api-reference/runs/step-object) is completed.
type ExtendedRunStepStreamEvent3 struct {
	// Data Represents a step in execution of a run.
	Data  RunStepObject                    `json:"data"`
	Event ExtendedRunStepStreamEvent3Event `json:"event"`
}

// ExtendedRunStepStreamEvent3Event defines model for ExtendedRunStepStreamEvent.3.Event.
type ExtendedRunStepStreamEvent3Event string

// ExtendedRunStepStreamEvent4 Occurs when a [run step](/docs/api-reference/runs/step-object) fails.
type ExtendedRunStepStreamEvent4 struct {
	// Data Represents a step in execution of a run.
	Data  RunStepObject                    `json:"data"`
	Event ExtendedRunStepStreamEvent4Event `json:"event"`
}

// ExtendedRunStepStreamEvent4Event defines model for ExtendedRunStepStreamEvent.4.Event.
type ExtendedRunStepStreamEvent4Event string

// ExtendedRunStepStreamEvent5 Occurs when a [run step](/docs/api-reference/runs/step-object) is cancelled.
type ExtendedRunStepStreamEvent5 struct {
	// Data Represents a step in execution of a run.
	Data  RunStepObject                    `json:"data"`
	Event ExtendedRunStepStreamEvent5Event `json:"event"`
}

// ExtendedRunStepStreamEvent5Event defines model for ExtendedRunStepStreamEvent.5.Event.
type ExtendedRunStepStreamEvent5Event string

// ExtendedRunStepStreamEvent6 Occurs when a [run step](/docs/api-reference/runs/step-object) expires.
type ExtendedRunStepStreamEvent6 struct {
	// Data Represents a step in execution of a run.
	Data  RunStepObject                    `json:"data"`
	Event ExtendedRunStepStreamEvent6Event `json:"event"`
}

// ExtendedRunStepStreamEvent6Event defines model for ExtendedRunStepStreamEvent.6.Event.
type ExtendedRunStepStreamEvent6Event string

// ExtendedRunStreamEvent defines model for ExtendedRunStreamEvent.
type ExtendedRunStreamEvent struct {
	union json.RawMessage
}

// ExtendedRunStreamEvent0 Occurs when a new [run](/docs/api-reference/runs/object) is created.
type ExtendedRunStreamEvent0 struct {
	// Data Represents an execution run on a [thread](/docs/api-reference/threads).
	Data  RunObject                    `json:"data"`
	Event ExtendedRunStreamEvent0Event `json:"event"`
}

// ExtendedRunStreamEvent0Event defines model for ExtendedRunStreamEvent.0.Event.
type ExtendedRunStreamEvent0Event string

// ExtendedRunStreamEvent1 Occurs when a [run](/docs/api-reference/runs/object) moves to a `queued` status.
type ExtendedRunStreamEvent1 struct {
	// Data Represents an execution run on a [thread](/docs/api-reference/threads).
	Data  RunObject                    `json:"data"`
	Event ExtendedRunStreamEvent1Event `json:"event"`
}

// ExtendedRunStreamEvent1Event defines model for ExtendedRunStreamEvent.1.Event.
type ExtendedRunStreamEvent1Event string

// ExtendedRunStreamEvent2 Occurs when a [run](/docs/api-reference/runs/object) moves to an `in_progress` status.
type ExtendedRunStreamEvent2 struct {
	// Data Represents an execution run on a [thread](/docs/api-reference/threads).
	Data  RunObject                    `json:"data"`
	Event ExtendedRunStreamEvent2Event `json:"event"`
}

// ExtendedRunStreamEvent2Event defines model for ExtendedRunStreamEvent.2.Event.
type ExtendedRunStreamEvent2Event string

// ExtendedRunStreamEvent3 Occurs when a [run](/docs/api-reference/runs/object) moves to a `requires_action` status.
type ExtendedRunStreamEvent3 struct {
	// Data Represents an execution run on a [thread](/docs/api-reference/threads).
	Data  RunObject                    `json:"data"`
	Event ExtendedRunStreamEvent3Event `json:"event"`
}

// ExtendedRunStreamEvent3Event defines model for ExtendedRunStreamEvent.3.Event.
type ExtendedRunStreamEvent3Event string

// ExtendedRunStreamEvent4 Occurs when a [run](/docs/api-reference/runs/object) is completed.
type ExtendedRunStreamEvent4 struct {
	// Data Represents an execution run on a [thread](/docs/api-reference/threads).
	Data  RunObject                    `json:"data"`
	Event ExtendedRunStreamEvent4Event `json:"event"`
}

// ExtendedRunStreamEvent4Event defines model for ExtendedRunStreamEvent.4.Event.
type ExtendedRunStreamEvent4Event string

// ExtendedRunStreamEvent5 Occurs when a [run](/docs/api-reference/runs/object) fails.
type ExtendedRunStreamEvent5 struct {
	// Data Represents an execution run on a [thread](/docs/api-reference/threads).
	Data  RunObject                    `json:"data"`
	Event ExtendedRunStreamEvent5Event `json:"event"`
}

// ExtendedRunStreamEvent5Event defines model for ExtendedRunStreamEvent.5.Event.
type ExtendedRunStreamEvent5Event string

// ExtendedRunStreamEvent6 Occurs when a [run](/docs/api-reference/runs/object) moves to a `cancelling` status.
type ExtendedRunStreamEvent6 struct {
	// Data Represents an execution run on a [thread](/docs/api-reference/threads).
	Data  RunObject                    `json:"data"`
	Event ExtendedRunStreamEvent6Event `json:"event"`
}

// ExtendedRunStreamEvent6Event defines model for ExtendedRunStreamEvent.6.Event.
type ExtendedRunStreamEvent6Event string

// ExtendedRunStreamEvent7 Occurs when a [run](/docs/api-reference/runs/object) is cancelled.
type ExtendedRunStreamEvent7 struct {
	// Data Represents an execution run on a [thread](/docs/api-reference/threads).
	Data  RunObject                    `json:"data"`
	Event ExtendedRunStreamEvent7Event `json:"event"`
}

// ExtendedRunStreamEvent7Event defines model for ExtendedRunStreamEvent.7.Event.
type ExtendedRunStreamEvent7Event string

// ExtendedRunStreamEvent8 Occurs when a [run](/docs/api-reference/runs/object) expires.
type ExtendedRunStreamEvent8 struct {
	// Data Represents an execution run on a [thread](/docs/api-reference/threads).
	Data  RunObject                    `json:"data"`
	Event ExtendedRunStreamEvent8Event `json:"event"`
}

// ExtendedRunStreamEvent8Event defines model for ExtendedRunStreamEvent.8.Event.
type ExtendedRunStreamEvent8Event string

// ExtendedRunToolCallObject Tool call objects
type ExtendedRunToolCallObject struct {
	// Function The function definition.
	Function struct {
		// Arguments The arguments that the model expects you to pass to the function.
		Arguments string `json:"arguments"`

		// Name The name of the function.
		Name string `json:"name"`
	} `json:"function"`

	// Id The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.
	Id string `json:"id"`

	// Type The type of tool call the output is required for. For now, this is always `function`.
	Type ExtendedRunToolCallObjectType `json:"type"`
}

// ExtendedRunToolCallObjectType The type of tool call the output is required for. For now, this is always `function`.
type ExtendedRunToolCallObjectType string

// ExtendedSubmitToolOutputsRunRequest defines model for ExtendedSubmitToolOutputsRunRequest.
type ExtendedSubmitToolOutputsRunRequest struct {
	// Stream If true, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a data: [DONE] message.
	Stream *bool `json:"stream"`

	// ToolOutputs A list of tools for which the outputs are being submitted.
	ToolOutputs []struct {
		// Output The output of the tool call to be submitted to continue the run.
		Output *string `json:"output,omitempty"`

		// ToolCallId The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
		ToolCallId *string `json:"tool_call_id,omitempty"`
	} `json:"tool_outputs"`
}

// ExtendedThreadObject Represents a thread that contains [messages](/docs/api-reference/messages).
type ExtendedThreadObject struct {
	// CreatedAt The Unix timestamp (in seconds) for when the thread was created.
	CreatedAt int `json:"created_at"`

	// Id The identifier, which can be referenced in API endpoints.
	Id string `json:"id"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Object The object type, which is always `thread`.
	Object ExtendedThreadObjectObject `json:"object"`
}

// ExtendedThreadObjectObject The object type, which is always `thread`.
type ExtendedThreadObjectObject string

// ExtendedThreadStreamEvent defines model for ExtendedThreadStreamEvent.
type ExtendedThreadStreamEvent struct {
	union json.RawMessage
}

// ExtendedThreadStreamEvent0 Occurs when a new [thread](/docs/api-reference/threads/object) is created.
type ExtendedThreadStreamEvent0 struct {
	// Data Represents a thread that contains [messages](/docs/api-reference/messages).
	Data  ThreadObject                    `json:"data"`
	Event ExtendedThreadStreamEvent0Event `json:"event"`
}

// ExtendedThreadStreamEvent0Event defines model for ExtendedThreadStreamEvent.0.Event.
type ExtendedThreadStreamEvent0Event string

// ExtendedTranscriptionSegment defines model for ExtendedTranscriptionSegment.
type ExtendedTranscriptionSegment struct {
	// AvgLogprob Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
	AvgLogprob float32 `json:"avg_logprob"`

	// CompressionRatio Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
	CompressionRatio float32 `json:"compression_ratio"`

	// End End time of the segment in seconds.
	End float32 `json:"end"`

	// Id Unique identifier of the segment.
	Id int `json:"id"`

	// NoSpeechProb Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
	NoSpeechProb float32 `json:"no_speech_prob"`

	// Seek Seek offset of the segment.
	Seek int `json:"seek"`

	// Start Start time of the segment in seconds.
	Start float32 `json:"start"`

	// Temperature Temperature parameter used for generating the segment.
	Temperature float32 `json:"temperature"`

	// Text Text content of the segment.
	Text string `json:"text"`

	// Tokens Array of token IDs for the text content.
	Tokens []int `json:"tokens"`
}

// ExtendedTranscriptionWord defines model for ExtendedTranscriptionWord.
type ExtendedTranscriptionWord struct {
	// End End time of the word in seconds.
	End float32 `json:"end"`

	// Start Start time of the word in seconds.
	Start float32 `json:"start"`

	// Word The text content of the word.
	Word string `json:"word"`
}

// FineTuningJob The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.
type FineTuningJob struct {
	// CreatedAt The Unix timestamp (in seconds) for when the fine-tuning job was created.
	CreatedAt int `json:"created_at"`

	// Error For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
	Error *struct {
		// Code A machine-readable error code.
		Code string `json:"code"`

		// Message A human-readable error message.
		Message string `json:"message"`

		// Param The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.
		Param *string `json:"param"`
	} `json:"error"`

	// FineTunedModel The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
	FineTunedModel *string `json:"fine_tuned_model"`

	// FinishedAt The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
	FinishedAt *int `json:"finished_at"`

	// Hyperparameters The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
	Hyperparameters struct {
		// NEpochs The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
		// "auto" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
		NEpochs FineTuningJob_Hyperparameters_NEpochs `json:"n_epochs"`
	} `json:"hyperparameters"`

	// Id The object identifier, which can be referenced in the API endpoints.
	Id string `json:"id"`

	// Model The base model that is being fine-tuned.
	Model string `json:"model"`

	// Object The object type, which is always "fine_tuning.job".
	Object FineTuningJobObject `json:"object"`

	// OrganizationId The organization that owns the fine-tuning job.
	OrganizationId string `json:"organization_id"`

	// ResultFiles The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
	ResultFiles []string `json:"result_files"`

	// Status The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
	Status FineTuningJobStatus `json:"status"`

	// TrainedTokens The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
	TrainedTokens *int `json:"trained_tokens"`

	// TrainingFile The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
	TrainingFile string `json:"training_file"`

	// ValidationFile The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
	ValidationFile *string `json:"validation_file"`
}

// FineTuningJobHyperparametersNEpochs0 defines model for FineTuningJob.Hyperparameters.NEpochs.0.
type FineTuningJobHyperparametersNEpochs0 string

// FineTuningJobHyperparametersNEpochs1 defines model for .
type FineTuningJobHyperparametersNEpochs1 = int

// FineTuningJob_Hyperparameters_NEpochs The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
// "auto" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
type FineTuningJob_Hyperparameters_NEpochs struct {
	union json.RawMessage
}

// FineTuningJobObject The object type, which is always "fine_tuning.job".
type FineTuningJobObject string

// FineTuningJobStatus The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
type FineTuningJobStatus string

// FineTuningJobEvent Fine-tuning job event object
type FineTuningJobEvent struct {
	CreatedAt int                      `json:"created_at"`
	Id        string                   `json:"id"`
	Level     FineTuningJobEventLevel  `json:"level"`
	Message   string                   `json:"message"`
	Object    FineTuningJobEventObject `json:"object"`
}

// FineTuningJobEventLevel defines model for FineTuningJobEvent.Level.
type FineTuningJobEventLevel string

// FineTuningJobEventObject defines model for FineTuningJobEvent.Object.
type FineTuningJobEventObject string

// FunctionObject defines model for FunctionObject.
type FunctionObject struct {
	// Description A description of what the function does, used by the model to choose when and how to call the function.
	Description *string `json:"description,omitempty"`

	// Name The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
	Name string `json:"name"`

	// Parameters The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
	//
	// Omitting `parameters` defines a function with an empty parameter list.
	Parameters *FunctionParameters `json:"parameters"`
}

// FunctionParameters The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
//
// Omitting `parameters` defines a function with an empty parameter list.
type FunctionParameters map[string]interface{}

// Image Represents the url or the content of an image generated by the OpenAI API.
type Image struct {
	// B64Json The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
	B64Json *string `json:"b64_json,omitempty"`

	// RevisedPrompt The prompt that was used to generate the image, if there was any revision to the prompt.
	RevisedPrompt *string `json:"revised_prompt,omitempty"`

	// Url The URL of the generated image, if `response_format` is `url` (default).
	Url *string `json:"url,omitempty"`
}

// ImagesResponse defines model for ImagesResponse.
type ImagesResponse struct {
	Created int     `json:"created"`
	Data    []Image `json:"data"`
}

// ListAssistantFilesResponse defines model for ListAssistantFilesResponse.
type ListAssistantFilesResponse struct {
	Data    []AssistantFileObject `json:"data"`
	FirstId string                `json:"first_id"`
	HasMore bool                  `json:"has_more"`
	LastId  string                `json:"last_id"`
	Object  string                `json:"object"`
}

// ListAssistantsResponse defines model for ListAssistantsResponse.
type ListAssistantsResponse struct {
	Data    []AssistantObject `json:"data"`
	FirstId string            `json:"first_id"`
	HasMore bool              `json:"has_more"`
	LastId  string            `json:"last_id"`
	Object  string            `json:"object"`
}

// ListFilesResponse defines model for ListFilesResponse.
type ListFilesResponse struct {
	Data   []OpenAIFile            `json:"data"`
	Object ListFilesResponseObject `json:"object"`
}

// ListFilesResponseObject defines model for ListFilesResponse.Object.
type ListFilesResponseObject string

// ListFineTuningJobEventsResponse defines model for ListFineTuningJobEventsResponse.
type ListFineTuningJobEventsResponse struct {
	Data   []FineTuningJobEvent                  `json:"data"`
	Object ListFineTuningJobEventsResponseObject `json:"object"`
}

// ListFineTuningJobEventsResponseObject defines model for ListFineTuningJobEventsResponse.Object.
type ListFineTuningJobEventsResponseObject string

// ListMessageFilesResponse defines model for ListMessageFilesResponse.
type ListMessageFilesResponse struct {
	Data    []MessageFileObject `json:"data"`
	FirstId string              `json:"first_id"`
	HasMore bool                `json:"has_more"`
	LastId  string              `json:"last_id"`
	Object  string              `json:"object"`
}

// ListMessagesResponse defines model for ListMessagesResponse.
type ListMessagesResponse struct {
	Data    []MessageObject `json:"data"`
	FirstId string          `json:"first_id"`
	HasMore bool            `json:"has_more"`
	LastId  string          `json:"last_id"`
	Object  string          `json:"object"`
}

// ListModelsResponse defines model for ListModelsResponse.
type ListModelsResponse struct {
	Data   []Model                  `json:"data"`
	Object ListModelsResponseObject `json:"object"`
}

// ListModelsResponseObject defines model for ListModelsResponse.Object.
type ListModelsResponseObject string

// ListPaginatedFineTuningJobsResponse defines model for ListPaginatedFineTuningJobsResponse.
type ListPaginatedFineTuningJobsResponse struct {
	Data    []FineTuningJob                           `json:"data"`
	HasMore bool                                      `json:"has_more"`
	Object  ListPaginatedFineTuningJobsResponseObject `json:"object"`
}

// ListPaginatedFineTuningJobsResponseObject defines model for ListPaginatedFineTuningJobsResponse.Object.
type ListPaginatedFineTuningJobsResponseObject string

// ListRunStepsResponse defines model for ListRunStepsResponse.
type ListRunStepsResponse struct {
	Data    []RunStepObject `json:"data"`
	FirstId string          `json:"first_id"`
	HasMore bool            `json:"has_more"`
	LastId  string          `json:"last_id"`
	Object  string          `json:"object"`
}

// ListRunsResponse defines model for ListRunsResponse.
type ListRunsResponse struct {
	Data    []RunObject `json:"data"`
	FirstId string      `json:"first_id"`
	HasMore bool        `json:"has_more"`
	LastId  string      `json:"last_id"`
	Object  string      `json:"object"`
}

// ListThreadsResponse defines model for ListThreadsResponse.
type ListThreadsResponse struct {
	Data    []ThreadObject `json:"data"`
	FirstId string         `json:"first_id"`
	HasMore bool           `json:"has_more"`
	LastId  string         `json:"last_id"`
	Object  string         `json:"object"`
}

// MessageContentImageFileObject References an image [File](/docs/api-reference/files) in the content of a message.
type MessageContentImageFileObject struct {
	ImageFile struct {
		// FileId The [File](/docs/api-reference/files) ID of the image in the message content.
		FileId string `json:"file_id"`
	} `json:"image_file"`

	// Type Always `image_file`.
	Type MessageContentImageFileObjectType `json:"type"`
}

// MessageContentImageFileObjectType Always `image_file`.
type MessageContentImageFileObjectType string

// MessageContentTextAnnotationsFileCitationObject A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "retrieval" tool to search files.
type MessageContentTextAnnotationsFileCitationObject struct {
	EndIndex     int `json:"end_index"`
	FileCitation struct {
		// FileId The ID of the specific File the citation is from.
		FileId string `json:"file_id"`

		// Quote The specific quote in the file.
		Quote string `json:"quote"`
	} `json:"file_citation"`
	StartIndex int `json:"start_index"`

	// Text The text in the message content that needs to be replaced.
	Text string `json:"text"`

	// Type Always `file_citation`.
	Type MessageContentTextAnnotationsFileCitationObjectType `json:"type"`
}

// MessageContentTextAnnotationsFileCitationObjectType Always `file_citation`.
type MessageContentTextAnnotationsFileCitationObjectType string

// MessageContentTextAnnotationsFilePathObject A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
type MessageContentTextAnnotationsFilePathObject struct {
	EndIndex int `json:"end_index"`
	FilePath struct {
		// FileId The ID of the file that was generated.
		FileId string `json:"file_id"`
	} `json:"file_path"`
	StartIndex int `json:"start_index"`

	// Text The text in the message content that needs to be replaced.
	Text string `json:"text"`

	// Type Always `file_path`.
	Type MessageContentTextAnnotationsFilePathObjectType `json:"type"`
}

// MessageContentTextAnnotationsFilePathObjectType Always `file_path`.
type MessageContentTextAnnotationsFilePathObjectType string

// MessageContentTextObject The text content that is part of a message.
type MessageContentTextObject struct {
	Text struct {
		Annotations []MessageContentTextObject_Text_Annotations_Item `json:"annotations"`

		// Value The data that makes up the text.
		Value string `json:"value"`
	} `json:"text"`

	// Type Always `text`.
	Type MessageContentTextObjectType `json:"type"`
}

// MessageContentTextObject_Text_Annotations_Item defines model for MessageContentTextObject.Text.Annotations.Item.
type MessageContentTextObject_Text_Annotations_Item struct {
	union json.RawMessage
}

// MessageContentTextObjectType Always `text`.
type MessageContentTextObjectType string

// MessageDeltaContentImageFileObject References an image [File](/docs/api-reference/files) in the content of a message.
type MessageDeltaContentImageFileObject struct {
	ImageFile *struct {
		// FileId The [File](/docs/api-reference/files) ID of the image in the message content.
		FileId *string `json:"file_id,omitempty"`
	} `json:"image_file,omitempty"`

	// Index The index of the content part in the message.
	Index int `json:"index"`

	// Type Always `image_file`.
	Type MessageDeltaContentImageFileObjectType `json:"type"`
}

// MessageDeltaContentImageFileObjectType Always `image_file`.
type MessageDeltaContentImageFileObjectType string

// MessageDeltaContentTextAnnotationsFileCitationObject A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "retrieval" tool to search files.
type MessageDeltaContentTextAnnotationsFileCitationObject struct {
	EndIndex     *int `json:"end_index,omitempty"`
	FileCitation *struct {
		// FileId The ID of the specific File the citation is from.
		FileId *string `json:"file_id,omitempty"`

		// Quote The specific quote in the file.
		Quote *string `json:"quote,omitempty"`
	} `json:"file_citation,omitempty"`

	// Index The index of the annotation in the text content part.
	Index      int  `json:"index"`
	StartIndex *int `json:"start_index,omitempty"`

	// Text The text in the message content that needs to be replaced.
	Text *string `json:"text,omitempty"`

	// Type Always `file_citation`.
	Type MessageDeltaContentTextAnnotationsFileCitationObjectType `json:"type"`
}

// MessageDeltaContentTextAnnotationsFileCitationObjectType Always `file_citation`.
type MessageDeltaContentTextAnnotationsFileCitationObjectType string

// MessageDeltaContentTextAnnotationsFilePathObject A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
type MessageDeltaContentTextAnnotationsFilePathObject struct {
	EndIndex *int `json:"end_index,omitempty"`
	FilePath *struct {
		// FileId The ID of the file that was generated.
		FileId *string `json:"file_id,omitempty"`
	} `json:"file_path,omitempty"`

	// Index The index of the annotation in the text content part.
	Index      int  `json:"index"`
	StartIndex *int `json:"start_index,omitempty"`

	// Text The text in the message content that needs to be replaced.
	Text *string `json:"text,omitempty"`

	// Type Always `file_path`.
	Type MessageDeltaContentTextAnnotationsFilePathObjectType `json:"type"`
}

// MessageDeltaContentTextAnnotationsFilePathObjectType Always `file_path`.
type MessageDeltaContentTextAnnotationsFilePathObjectType string

// MessageDeltaContentTextObject The text content that is part of a message.
type MessageDeltaContentTextObject struct {
	// Index The index of the content part in the message.
	Index int `json:"index"`
	Text  *struct {
		Annotations *[]MessageDeltaContentTextObject_Text_Annotations_Item `json:"annotations,omitempty"`

		// Value The data that makes up the text.
		Value *string `json:"value,omitempty"`
	} `json:"text,omitempty"`

	// Type Always `text`.
	Type MessageDeltaContentTextObjectType `json:"type"`
}

// MessageDeltaContentTextObject_Text_Annotations_Item defines model for MessageDeltaContentTextObject.Text.Annotations.Item.
type MessageDeltaContentTextObject_Text_Annotations_Item struct {
	union json.RawMessage
}

// MessageDeltaContentTextObjectType Always `text`.
type MessageDeltaContentTextObjectType string

// MessageDeltaObject Represents a message delta i.e. any changed fields on a message during streaming.
type MessageDeltaObject struct {
	// Delta The delta containing the fields that have changed on the Message.
	Delta struct {
		// Content The content of the message in array of text and/or images.
		Content *[]MessageDeltaObject_Delta_Content_Item `json:"content,omitempty"`

		// FileIds A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
		FileIds *[]string `json:"file_ids,omitempty"`

		// Role The entity that produced the message. One of `user` or `assistant`.
		Role *MessageDeltaObjectDeltaRole `json:"role,omitempty"`
	} `json:"delta"`

	// Id The identifier of the message, which can be referenced in API endpoints.
	Id string `json:"id"`

	// Object The object type, which is always `thread.message.delta`.
	Object MessageDeltaObjectObject `json:"object"`
}

// MessageDeltaObject_Delta_Content_Item defines model for MessageDeltaObject.Delta.Content.Item.
type MessageDeltaObject_Delta_Content_Item struct {
	union json.RawMessage
}

// MessageDeltaObjectDeltaRole The entity that produced the message. One of `user` or `assistant`.
type MessageDeltaObjectDeltaRole string

// MessageDeltaObjectObject The object type, which is always `thread.message.delta`.
type MessageDeltaObjectObject string

// MessageFileObject A list of files attached to a `message`.
type MessageFileObject struct {
	// CreatedAt The Unix timestamp (in seconds) for when the message file was created.
	CreatedAt int `json:"created_at"`

	// Id The identifier, which can be referenced in API endpoints.
	Id string `json:"id"`

	// MessageId The ID of the [message](/docs/api-reference/messages) that the [File](/docs/api-reference/files) is attached to.
	MessageId string `json:"message_id"`

	// Object The object type, which is always `thread.message.file`.
	Object MessageFileObjectObject `json:"object"`
}

// MessageFileObjectObject The object type, which is always `thread.message.file`.
type MessageFileObjectObject string

// MessageObject Represents a message within a [thread](/docs/api-reference/threads).
type MessageObject struct {
	// AssistantId If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
	AssistantId *string `json:"assistant_id"`

	// CompletedAt The Unix timestamp (in seconds) for when the message was completed.
	CompletedAt *int `json:"completed_at"`

	// Content The content of the message in array of text and/or images.
	Content []MessageObject_Content_Item `json:"content"`

	// CreatedAt The Unix timestamp (in seconds) for when the message was created.
	CreatedAt int `json:"created_at"`

	// FileIds A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
	FileIds []string `json:"file_ids"`

	// Id The identifier, which can be referenced in API endpoints.
	Id string `json:"id"`

	// IncompleteAt The Unix timestamp (in seconds) for when the message was marked as incomplete.
	IncompleteAt *int `json:"incomplete_at"`

	// IncompleteDetails On an incomplete message, details about why the message is incomplete.
	IncompleteDetails *struct {
		// Reason The reason the message is incomplete.
		Reason MessageObjectIncompleteDetailsReason `json:"reason"`
	} `json:"incomplete_details"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Object The object type, which is always `thread.message`.
	Object MessageObjectObject `json:"object"`

	// Role The entity that produced the message. One of `user` or `assistant`.
	Role MessageObjectRole `json:"role"`

	// RunId If applicable, the ID of the [run](/docs/api-reference/runs) associated with the authoring of this message.
	RunId *string `json:"run_id"`

	// Status The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
	Status MessageObjectStatus `json:"status"`

	// ThreadId The [thread](/docs/api-reference/threads) ID that this message belongs to.
	ThreadId string `json:"thread_id"`
}

// MessageObject_Content_Item defines model for MessageObject.content.Item.
type MessageObject_Content_Item struct {
	union json.RawMessage
}

// MessageObjectIncompleteDetailsReason The reason the message is incomplete.
type MessageObjectIncompleteDetailsReason string

// MessageObjectObject The object type, which is always `thread.message`.
type MessageObjectObject string

// MessageObjectRole The entity that produced the message. One of `user` or `assistant`.
type MessageObjectRole string

// MessageObjectStatus The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
type MessageObjectStatus string

// MessageStreamEvent defines model for MessageStreamEvent.
type MessageStreamEvent struct {
	union json.RawMessage
}

// MessageStreamEvent0 Occurs when a [message](/docs/api-reference/messages/object) is created.
type MessageStreamEvent0 struct {
	// Data Represents a message within a [thread](/docs/api-reference/threads).
	Data  MessageObject            `json:"data"`
	Event MessageStreamEvent0Event `json:"event"`
}

// MessageStreamEvent0Event defines model for MessageStreamEvent.0.Event.
type MessageStreamEvent0Event string

// MessageStreamEvent1 Occurs when a [message](/docs/api-reference/messages/object) moves to an `in_progress` state.
type MessageStreamEvent1 struct {
	// Data Represents a message within a [thread](/docs/api-reference/threads).
	Data  MessageObject            `json:"data"`
	Event MessageStreamEvent1Event `json:"event"`
}

// MessageStreamEvent1Event defines model for MessageStreamEvent.1.Event.
type MessageStreamEvent1Event string

// MessageStreamEvent2 Occurs when parts of a [Message](/docs/api-reference/messages/object) are being streamed.
type MessageStreamEvent2 struct {
	// Data Represents a message delta i.e. any changed fields on a message during streaming.
	Data  MessageDeltaObject       `json:"data"`
	Event MessageStreamEvent2Event `json:"event"`
}

// MessageStreamEvent2Event defines model for MessageStreamEvent.2.Event.
type MessageStreamEvent2Event string

// MessageStreamEvent3 Occurs when a [message](/docs/api-reference/messages/object) is completed.
type MessageStreamEvent3 struct {
	// Data Represents a message within a [thread](/docs/api-reference/threads).
	Data  MessageObject            `json:"data"`
	Event MessageStreamEvent3Event `json:"event"`
}

// MessageStreamEvent3Event defines model for MessageStreamEvent.3.Event.
type MessageStreamEvent3Event string

// MessageStreamEvent4 Occurs when a [message](/docs/api-reference/messages/object) ends before it is completed.
type MessageStreamEvent4 struct {
	// Data Represents a message within a [thread](/docs/api-reference/threads).
	Data  MessageObject            `json:"data"`
	Event MessageStreamEvent4Event `json:"event"`
}

// MessageStreamEvent4Event defines model for MessageStreamEvent.4.Event.
type MessageStreamEvent4Event string

// Model Describes an OpenAI model offering that can be used with the API.
type Model struct {
	// Created The Unix timestamp (in seconds) when the model was created.
	Created int `json:"created"`

	// Id The model identifier, which can be referenced in the API endpoints.
	Id string `json:"id"`

	// Object The object type, which is always "model".
	Object ModelObject `json:"object"`

	// OwnedBy The organization that owns the model.
	OwnedBy string `json:"owned_by"`
}

// ModelObject The object type, which is always "model".
type ModelObject string

// ModifyAssistantRequest defines model for ModifyAssistantRequest.
type ModifyAssistantRequest struct {
	// Description The description of the assistant. The maximum length is 512 characters.
	Description *string `json:"description"`

	// FileIds A list of [File](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. If a file was previously attached to the list but does not show up in the list, it will be deleted from the assistant.
	FileIds *[]string `json:"file_ids,omitempty"`

	// Instructions The system instructions that the assistant uses. The maximum length is 32768 characters.
	Instructions *string `json:"instructions"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
	Model *ModifyAssistantRequest_Model `json:"model,omitempty"`

	// Name The name of the assistant. The maximum length is 256 characters.
	Name *string `json:"name"`

	// Tools A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
	Tools *[]ModifyAssistantRequest_Tools_Item `json:"tools,omitempty"`
}

// ModifyAssistantRequestModel0 defines model for .
type ModifyAssistantRequestModel0 = string

// ModifyAssistantRequest_Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
type ModifyAssistantRequest_Model struct {
	union json.RawMessage
}

// ModifyAssistantRequest_Tools_Item defines model for ModifyAssistantRequest.tools.Item.
type ModifyAssistantRequest_Tools_Item struct {
	union json.RawMessage
}

// ModifyMessageRequest defines model for ModifyMessageRequest.
type ModifyMessageRequest struct {
	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`
}

// ModifyRunRequest defines model for ModifyRunRequest.
type ModifyRunRequest struct {
	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`
}

// ModifyThreadRequest defines model for ModifyThreadRequest.
type ModifyThreadRequest struct {
	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`
}

// OpenAIFile The `File` object represents a document that has been uploaded to OpenAI.
type OpenAIFile struct {
	// Bytes The size of the file, in bytes.
	Bytes int `json:"bytes"`

	// CreatedAt The Unix timestamp (in seconds) for when the file was created.
	CreatedAt int `json:"created_at"`

	// Filename The name of the file.
	Filename string `json:"filename"`

	// Id The file identifier, which can be referenced in the API endpoints.
	Id string `json:"id"`

	// Object The object type, which is always `file`.
	Object OpenAIFileObject `json:"object"`

	// Purpose The intended purpose of the file. Supported values are `fine-tune`, `fine-tune-results`, `assistants`, and `assistants_output`.
	Purpose OpenAIFilePurpose `json:"purpose"`

	// Status Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
	// Deprecated:
	Status OpenAIFileStatus `json:"status"`

	// StatusDetails Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
	// Deprecated:
	StatusDetails *string `json:"status_details,omitempty"`
}

// OpenAIFileObject The object type, which is always `file`.
type OpenAIFileObject string

// OpenAIFilePurpose The intended purpose of the file. Supported values are `fine-tune`, `fine-tune-results`, `assistants`, and `assistants_output`.
type OpenAIFilePurpose string

// OpenAIFileStatus Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
type OpenAIFileStatus string

// RunCompletionUsage Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
type RunCompletionUsage struct {
	// CompletionTokens Number of completion tokens used over the course of the run.
	CompletionTokens int `json:"completion_tokens"`

	// PromptTokens Number of prompt tokens used over the course of the run.
	PromptTokens int `json:"prompt_tokens"`

	// TotalTokens Total number of tokens used (prompt + completion).
	TotalTokens int `json:"total_tokens"`
}

// RunObject Represents an execution run on a [thread](/docs/api-reference/threads).
type RunObject struct {
	// AssistantId The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
	AssistantId string `json:"assistant_id"`

	// CancelledAt The Unix timestamp (in seconds) for when the run was cancelled.
	CancelledAt *int `json:"cancelled_at"`

	// CompletedAt The Unix timestamp (in seconds) for when the run was completed.
	CompletedAt *int `json:"completed_at"`

	// CreatedAt The Unix timestamp (in seconds) for when the run was created.
	CreatedAt int `json:"created_at"`

	// ExpiresAt The Unix timestamp (in seconds) for when the run will expire.
	ExpiresAt *int `json:"expires_at"`

	// FailedAt The Unix timestamp (in seconds) for when the run failed.
	FailedAt *int `json:"failed_at"`

	// FileIds The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
	FileIds []string `json:"file_ids"`

	// Id The identifier, which can be referenced in API endpoints.
	Id string `json:"id"`

	// Instructions The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
	Instructions string `json:"instructions"`

	// LastError The last error associated with this run. Will be `null` if there are no errors.
	LastError *struct {
		// Code One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
		Code RunObjectLastErrorCode `json:"code"`

		// Message A human-readable description of the error.
		Message string `json:"message"`
	} `json:"last_error"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Model The model that the [assistant](/docs/api-reference/assistants) used for this run.
	Model string `json:"model"`

	// Object The object type, which is always `thread.run`.
	Object RunObjectObject `json:"object"`

	// RequiredAction Details on the action required to continue the run. Will be `null` if no action is required.
	RequiredAction *struct {
		// SubmitToolOutputs Details on the tool outputs needed for this run to continue.
		SubmitToolOutputs struct {
			// ToolCalls A list of the relevant tool calls.
			ToolCalls []RunToolCallObject `json:"tool_calls"`
		} `json:"submit_tool_outputs"`

		// Type For now, this is always `submit_tool_outputs`.
		Type RunObjectRequiredActionType `json:"type"`
	} `json:"required_action"`

	// StartedAt The Unix timestamp (in seconds) for when the run was started.
	StartedAt *int `json:"started_at"`

	// Status The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
	Status RunObjectStatus `json:"status"`

	// ThreadId The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
	ThreadId string `json:"thread_id"`

	// Tools The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
	Tools []RunObject_Tools_Item `json:"tools"`

	// Usage Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
	Usage *RunCompletionUsage `json:"usage"`
}

// RunObjectLastErrorCode One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
type RunObjectLastErrorCode string

// RunObjectObject The object type, which is always `thread.run`.
type RunObjectObject string

// RunObjectRequiredActionType For now, this is always `submit_tool_outputs`.
type RunObjectRequiredActionType string

// RunObjectStatus The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
type RunObjectStatus string

// RunObject_Tools_Item defines model for RunObject.tools.Item.
type RunObject_Tools_Item struct {
	union json.RawMessage
}

// RunStepCompletionUsage Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.
type RunStepCompletionUsage struct {
	// CompletionTokens Number of completion tokens used over the course of the run step.
	CompletionTokens int `json:"completion_tokens"`

	// PromptTokens Number of prompt tokens used over the course of the run step.
	PromptTokens int `json:"prompt_tokens"`

	// TotalTokens Total number of tokens used (prompt + completion).
	TotalTokens int `json:"total_tokens"`
}

// RunStepDeltaObject Represents a run step delta i.e. any changed fields on a run step during streaming.
type RunStepDeltaObject struct {
	// Delta The delta containing the fields that have changed on the run step.
	Delta struct {
		// StepDetails The details of the run step.
		StepDetails *RunStepDeltaObject_Delta_StepDetails `json:"step_details,omitempty"`
	} `json:"delta"`

	// Id The identifier of the run step, which can be referenced in API endpoints.
	Id string `json:"id"`

	// Object The object type, which is always `thread.run.step.delta`.
	Object RunStepDeltaObjectObject `json:"object"`
}

// RunStepDeltaObject_Delta_StepDetails The details of the run step.
type RunStepDeltaObject_Delta_StepDetails struct {
	union json.RawMessage
}

// RunStepDeltaObjectObject The object type, which is always `thread.run.step.delta`.
type RunStepDeltaObjectObject string

// RunStepDeltaStepDetailsMessageCreationObject Details of the message creation by the run step.
type RunStepDeltaStepDetailsMessageCreationObject struct {
	MessageCreation *struct {
		// MessageId The ID of the message that was created by this run step.
		MessageId *string `json:"message_id,omitempty"`
	} `json:"message_creation,omitempty"`

	// Type Always `message_creation`.
	Type RunStepDeltaStepDetailsMessageCreationObjectType `json:"type"`
}

// RunStepDeltaStepDetailsMessageCreationObjectType Always `message_creation`.
type RunStepDeltaStepDetailsMessageCreationObjectType string

// RunStepDeltaStepDetailsToolCallsCodeObject Details of the Code Interpreter tool call the run step was involved in.
type RunStepDeltaStepDetailsToolCallsCodeObject struct {
	// CodeInterpreter The Code Interpreter tool call definition.
	CodeInterpreter *struct {
		// Input The input to the Code Interpreter tool call.
		Input *string `json:"input,omitempty"`

		// Outputs The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
		Outputs *[]RunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item `json:"outputs,omitempty"`
	} `json:"code_interpreter,omitempty"`

	// Id The ID of the tool call.
	Id *string `json:"id,omitempty"`

	// Index The index of the tool call in the tool calls array.
	Index int `json:"index"`

	// Type The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
	Type RunStepDeltaStepDetailsToolCallsCodeObjectType `json:"type"`
}

// RunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item defines model for RunStepDeltaStepDetailsToolCallsCodeObject.CodeInterpreter.Outputs.Item.
type RunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item struct {
	union json.RawMessage
}

// RunStepDeltaStepDetailsToolCallsCodeObjectType The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
type RunStepDeltaStepDetailsToolCallsCodeObjectType string

// RunStepDeltaStepDetailsToolCallsCodeOutputImageObject defines model for RunStepDeltaStepDetailsToolCallsCodeOutputImageObject.
type RunStepDeltaStepDetailsToolCallsCodeOutputImageObject struct {
	Image *struct {
		// FileId The [file](/docs/api-reference/files) ID of the image.
		FileId *string `json:"file_id,omitempty"`
	} `json:"image,omitempty"`

	// Index The index of the output in the outputs array.
	Index int `json:"index"`

	// Type Always `image`.
	Type RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType `json:"type"`
}

// RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType Always `image`.
type RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectType string

// RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject Text output from the Code Interpreter tool call as part of a run step.
type RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject struct {
	// Index The index of the output in the outputs array.
	Index int `json:"index"`

	// Logs The text output from the Code Interpreter tool call.
	Logs *string `json:"logs,omitempty"`

	// Type Always `logs`.
	Type RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType `json:"type"`
}

// RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType Always `logs`.
type RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType string

// RunStepDeltaStepDetailsToolCallsFunctionObject defines model for RunStepDeltaStepDetailsToolCallsFunctionObject.
type RunStepDeltaStepDetailsToolCallsFunctionObject struct {
	// Function The definition of the function that was called.
	Function *struct {
		// Arguments The arguments passed to the function.
		Arguments *string `json:"arguments,omitempty"`

		// Name The name of the function.
		Name *string `json:"name,omitempty"`

		// Output The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
		Output *string `json:"output"`
	} `json:"function,omitempty"`

	// Id The ID of the tool call object.
	Id *string `json:"id,omitempty"`

	// Index The index of the tool call in the tool calls array.
	Index int `json:"index"`

	// Type The type of tool call. This is always going to be `function` for this type of tool call.
	Type RunStepDeltaStepDetailsToolCallsFunctionObjectType `json:"type"`
}

// RunStepDeltaStepDetailsToolCallsFunctionObjectType The type of tool call. This is always going to be `function` for this type of tool call.
type RunStepDeltaStepDetailsToolCallsFunctionObjectType string

// RunStepDeltaStepDetailsToolCallsObject Details of the tool call.
type RunStepDeltaStepDetailsToolCallsObject struct {
	// ToolCalls An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`.
	ToolCalls *[]RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item `json:"tool_calls,omitempty"`

	// Type Always `tool_calls`.
	Type RunStepDeltaStepDetailsToolCallsObjectType `json:"type"`
}

// RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item defines model for RunStepDeltaStepDetailsToolCallsObject.tool_calls.Item.
type RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item struct {
	union json.RawMessage
}

// RunStepDeltaStepDetailsToolCallsObjectType Always `tool_calls`.
type RunStepDeltaStepDetailsToolCallsObjectType string

// RunStepDeltaStepDetailsToolCallsRetrievalObject defines model for RunStepDeltaStepDetailsToolCallsRetrievalObject.
type RunStepDeltaStepDetailsToolCallsRetrievalObject struct {
	// Id The ID of the tool call object.
	Id *string `json:"id,omitempty"`

	// Index The index of the tool call in the tool calls array.
	Index int `json:"index"`

	// Retrieval For now, this is always going to be an empty object.
	Retrieval *map[string]interface{} `json:"retrieval,omitempty"`

	// Type The type of tool call. This is always going to be `retrieval` for this type of tool call.
	Type RunStepDeltaStepDetailsToolCallsRetrievalObjectType `json:"type"`
}

// RunStepDeltaStepDetailsToolCallsRetrievalObjectType The type of tool call. This is always going to be `retrieval` for this type of tool call.
type RunStepDeltaStepDetailsToolCallsRetrievalObjectType string

// RunStepDetailsMessageCreationObject Details of the message creation by the run step.
type RunStepDetailsMessageCreationObject struct {
	MessageCreation struct {
		// MessageId The ID of the message that was created by this run step.
		MessageId string `json:"message_id"`
	} `json:"message_creation"`

	// Type Always `message_creation`.
	Type RunStepDetailsMessageCreationObjectType `json:"type"`
}

// RunStepDetailsMessageCreationObjectType Always `message_creation`.
type RunStepDetailsMessageCreationObjectType string

// RunStepDetailsToolCallsCodeObject Details of the Code Interpreter tool call the run step was involved in.
type RunStepDetailsToolCallsCodeObject struct {
	// CodeInterpreter The Code Interpreter tool call definition.
	CodeInterpreter struct {
		// Input The input to the Code Interpreter tool call.
		Input string `json:"input"`

		// Outputs The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
		Outputs []RunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item `json:"outputs"`
	} `json:"code_interpreter"`

	// Id The ID of the tool call.
	Id string `json:"id"`

	// Type The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
	Type RunStepDetailsToolCallsCodeObjectType `json:"type"`
}

// RunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item defines model for RunStepDetailsToolCallsCodeObject.CodeInterpreter.Outputs.Item.
type RunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item struct {
	union json.RawMessage
}

// RunStepDetailsToolCallsCodeObjectType The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
type RunStepDetailsToolCallsCodeObjectType string

// RunStepDetailsToolCallsCodeOutputImageObject defines model for RunStepDetailsToolCallsCodeOutputImageObject.
type RunStepDetailsToolCallsCodeOutputImageObject struct {
	Image struct {
		// FileId The [file](/docs/api-reference/files) ID of the image.
		FileId string `json:"file_id"`
	} `json:"image"`

	// Type Always `image`.
	Type RunStepDetailsToolCallsCodeOutputImageObjectType `json:"type"`
}

// RunStepDetailsToolCallsCodeOutputImageObjectType Always `image`.
type RunStepDetailsToolCallsCodeOutputImageObjectType string

// RunStepDetailsToolCallsCodeOutputLogsObject Text output from the Code Interpreter tool call as part of a run step.
type RunStepDetailsToolCallsCodeOutputLogsObject struct {
	// Logs The text output from the Code Interpreter tool call.
	Logs string `json:"logs"`

	// Type Always `logs`.
	Type RunStepDetailsToolCallsCodeOutputLogsObjectType `json:"type"`
}

// RunStepDetailsToolCallsCodeOutputLogsObjectType Always `logs`.
type RunStepDetailsToolCallsCodeOutputLogsObjectType string

// RunStepDetailsToolCallsFunctionObject defines model for RunStepDetailsToolCallsFunctionObject.
type RunStepDetailsToolCallsFunctionObject struct {
	// Function The definition of the function that was called.
	Function struct {
		// Arguments The arguments passed to the function.
		Arguments string `json:"arguments"`

		// Name The name of the function.
		Name string `json:"name"`

		// Output The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
		Output *string `json:"output"`
	} `json:"function"`

	// Id The ID of the tool call object.
	Id string `json:"id"`

	// Type The type of tool call. This is always going to be `function` for this type of tool call.
	Type RunStepDetailsToolCallsFunctionObjectType `json:"type"`
}

// RunStepDetailsToolCallsFunctionObjectType The type of tool call. This is always going to be `function` for this type of tool call.
type RunStepDetailsToolCallsFunctionObjectType string

// RunStepDetailsToolCallsObject Details of the tool call.
type RunStepDetailsToolCallsObject struct {
	// ToolCalls An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`.
	ToolCalls []RunStepDetailsToolCallsObject_ToolCalls_Item `json:"tool_calls"`

	// Type Always `tool_calls`.
	Type RunStepDetailsToolCallsObjectType `json:"type"`
}

// RunStepDetailsToolCallsObject_ToolCalls_Item defines model for RunStepDetailsToolCallsObject.tool_calls.Item.
type RunStepDetailsToolCallsObject_ToolCalls_Item struct {
	union json.RawMessage
}

// RunStepDetailsToolCallsObjectType Always `tool_calls`.
type RunStepDetailsToolCallsObjectType string

// RunStepDetailsToolCallsRetrievalObject defines model for RunStepDetailsToolCallsRetrievalObject.
type RunStepDetailsToolCallsRetrievalObject struct {
	// Id The ID of the tool call object.
	Id string `json:"id"`

	// Retrieval For now, this is always going to be an empty object.
	Retrieval map[string]interface{} `json:"retrieval"`

	// Type The type of tool call. This is always going to be `retrieval` for this type of tool call.
	Type RunStepDetailsToolCallsRetrievalObjectType `json:"type"`
}

// RunStepDetailsToolCallsRetrievalObjectType The type of tool call. This is always going to be `retrieval` for this type of tool call.
type RunStepDetailsToolCallsRetrievalObjectType string

// RunStepObject Represents a step in execution of a run.
type RunStepObject struct {
	// AssistantId The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
	AssistantId string `json:"assistant_id"`

	// CancelledAt The Unix timestamp (in seconds) for when the run step was cancelled.
	CancelledAt *int `json:"cancelled_at"`

	// CompletedAt The Unix timestamp (in seconds) for when the run step completed.
	CompletedAt *int `json:"completed_at"`

	// CreatedAt The Unix timestamp (in seconds) for when the run step was created.
	CreatedAt int `json:"created_at"`

	// ExpiredAt The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
	ExpiredAt *int `json:"expired_at"`

	// FailedAt The Unix timestamp (in seconds) for when the run step failed.
	FailedAt *int `json:"failed_at"`

	// Id The identifier of the run step, which can be referenced in API endpoints.
	Id string `json:"id"`

	// LastError The last error associated with this run step. Will be `null` if there are no errors.
	LastError *struct {
		// Code One of `server_error` or `rate_limit_exceeded`.
		Code RunStepObjectLastErrorCode `json:"code"`

		// Message A human-readable description of the error.
		Message string `json:"message"`
	} `json:"last_error"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Object The object type, which is always `thread.run.step`.
	Object RunStepObjectObject `json:"object"`

	// RunId The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
	RunId string `json:"run_id"`

	// Status The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
	Status RunStepObjectStatus `json:"status"`

	// StepDetails The details of the run step.
	StepDetails RunStepObject_StepDetails `json:"step_details"`

	// ThreadId The ID of the [thread](/docs/api-reference/threads) that was run.
	ThreadId string `json:"thread_id"`

	// Type The type of run step, which can be either `message_creation` or `tool_calls`.
	Type RunStepObjectType `json:"type"`

	// Usage Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.
	Usage *RunStepCompletionUsage `json:"usage"`
}

// RunStepObjectLastErrorCode One of `server_error` or `rate_limit_exceeded`.
type RunStepObjectLastErrorCode string

// RunStepObjectObject The object type, which is always `thread.run.step`.
type RunStepObjectObject string

// RunStepObjectStatus The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
type RunStepObjectStatus string

// RunStepObject_StepDetails The details of the run step.
type RunStepObject_StepDetails struct {
	union json.RawMessage
}

// RunStepObjectType The type of run step, which can be either `message_creation` or `tool_calls`.
type RunStepObjectType string

// RunStepStreamEvent defines model for RunStepStreamEvent.
type RunStepStreamEvent struct {
	union json.RawMessage
}

// RunStepStreamEvent0 Occurs when a [run step](/docs/api-reference/runs/step-object) is created.
type RunStepStreamEvent0 struct {
	// Data Represents a step in execution of a run.
	Data  RunStepObject            `json:"data"`
	Event RunStepStreamEvent0Event `json:"event"`
}

// RunStepStreamEvent0Event defines model for RunStepStreamEvent.0.Event.
type RunStepStreamEvent0Event string

// RunStepStreamEvent1 Occurs when a [run step](/docs/api-reference/runs/step-object) moves to an `in_progress` state.
type RunStepStreamEvent1 struct {
	// Data Represents a step in execution of a run.
	Data  RunStepObject            `json:"data"`
	Event RunStepStreamEvent1Event `json:"event"`
}

// RunStepStreamEvent1Event defines model for RunStepStreamEvent.1.Event.
type RunStepStreamEvent1Event string

// RunStepStreamEvent2 Occurs when parts of a [run step](/docs/api-reference/runs/step-object) are being streamed.
type RunStepStreamEvent2 struct {
	// Data Represents a run step delta i.e. any changed fields on a run step during streaming.
	Data  RunStepDeltaObject       `json:"data"`
	Event RunStepStreamEvent2Event `json:"event"`
}

// RunStepStreamEvent2Event defines model for RunStepStreamEvent.2.Event.
type RunStepStreamEvent2Event string

// RunStepStreamEvent3 Occurs when a [run step](/docs/api-reference/runs/step-object) is completed.
type RunStepStreamEvent3 struct {
	// Data Represents a step in execution of a run.
	Data  RunStepObject            `json:"data"`
	Event RunStepStreamEvent3Event `json:"event"`
}

// RunStepStreamEvent3Event defines model for RunStepStreamEvent.3.Event.
type RunStepStreamEvent3Event string

// RunStepStreamEvent4 Occurs when a [run step](/docs/api-reference/runs/step-object) fails.
type RunStepStreamEvent4 struct {
	// Data Represents a step in execution of a run.
	Data  RunStepObject            `json:"data"`
	Event RunStepStreamEvent4Event `json:"event"`
}

// RunStepStreamEvent4Event defines model for RunStepStreamEvent.4.Event.
type RunStepStreamEvent4Event string

// RunStepStreamEvent5 Occurs when a [run step](/docs/api-reference/runs/step-object) is cancelled.
type RunStepStreamEvent5 struct {
	// Data Represents a step in execution of a run.
	Data  RunStepObject            `json:"data"`
	Event RunStepStreamEvent5Event `json:"event"`
}

// RunStepStreamEvent5Event defines model for RunStepStreamEvent.5.Event.
type RunStepStreamEvent5Event string

// RunStepStreamEvent6 Occurs when a [run step](/docs/api-reference/runs/step-object) expires.
type RunStepStreamEvent6 struct {
	// Data Represents a step in execution of a run.
	Data  RunStepObject            `json:"data"`
	Event RunStepStreamEvent6Event `json:"event"`
}

// RunStepStreamEvent6Event defines model for RunStepStreamEvent.6.Event.
type RunStepStreamEvent6Event string

// RunStreamEvent defines model for RunStreamEvent.
type RunStreamEvent struct {
	union json.RawMessage
}

// RunStreamEvent0 Occurs when a new [run](/docs/api-reference/runs/object) is created.
type RunStreamEvent0 struct {
	// Data Represents an execution run on a [thread](/docs/api-reference/threads).
	Data  RunObject            `json:"data"`
	Event RunStreamEvent0Event `json:"event"`
}

// RunStreamEvent0Event defines model for RunStreamEvent.0.Event.
type RunStreamEvent0Event string

// RunStreamEvent1 Occurs when a [run](/docs/api-reference/runs/object) moves to a `queued` status.
type RunStreamEvent1 struct {
	// Data Represents an execution run on a [thread](/docs/api-reference/threads).
	Data  RunObject            `json:"data"`
	Event RunStreamEvent1Event `json:"event"`
}

// RunStreamEvent1Event defines model for RunStreamEvent.1.Event.
type RunStreamEvent1Event string

// RunStreamEvent2 Occurs when a [run](/docs/api-reference/runs/object) moves to an `in_progress` status.
type RunStreamEvent2 struct {
	// Data Represents an execution run on a [thread](/docs/api-reference/threads).
	Data  RunObject            `json:"data"`
	Event RunStreamEvent2Event `json:"event"`
}

// RunStreamEvent2Event defines model for RunStreamEvent.2.Event.
type RunStreamEvent2Event string

// RunStreamEvent3 Occurs when a [run](/docs/api-reference/runs/object) moves to a `requires_action` status.
type RunStreamEvent3 struct {
	// Data Represents an execution run on a [thread](/docs/api-reference/threads).
	Data  RunObject            `json:"data"`
	Event RunStreamEvent3Event `json:"event"`
}

// RunStreamEvent3Event defines model for RunStreamEvent.3.Event.
type RunStreamEvent3Event string

// RunStreamEvent4 Occurs when a [run](/docs/api-reference/runs/object) is completed.
type RunStreamEvent4 struct {
	// Data Represents an execution run on a [thread](/docs/api-reference/threads).
	Data  RunObject            `json:"data"`
	Event RunStreamEvent4Event `json:"event"`
}

// RunStreamEvent4Event defines model for RunStreamEvent.4.Event.
type RunStreamEvent4Event string

// RunStreamEvent5 Occurs when a [run](/docs/api-reference/runs/object) fails.
type RunStreamEvent5 struct {
	// Data Represents an execution run on a [thread](/docs/api-reference/threads).
	Data  RunObject            `json:"data"`
	Event RunStreamEvent5Event `json:"event"`
}

// RunStreamEvent5Event defines model for RunStreamEvent.5.Event.
type RunStreamEvent5Event string

// RunStreamEvent6 Occurs when a [run](/docs/api-reference/runs/object) moves to a `cancelling` status.
type RunStreamEvent6 struct {
	// Data Represents an execution run on a [thread](/docs/api-reference/threads).
	Data  RunObject            `json:"data"`
	Event RunStreamEvent6Event `json:"event"`
}

// RunStreamEvent6Event defines model for RunStreamEvent.6.Event.
type RunStreamEvent6Event string

// RunStreamEvent7 Occurs when a [run](/docs/api-reference/runs/object) is cancelled.
type RunStreamEvent7 struct {
	// Data Represents an execution run on a [thread](/docs/api-reference/threads).
	Data  RunObject            `json:"data"`
	Event RunStreamEvent7Event `json:"event"`
}

// RunStreamEvent7Event defines model for RunStreamEvent.7.Event.
type RunStreamEvent7Event string

// RunStreamEvent8 Occurs when a [run](/docs/api-reference/runs/object) expires.
type RunStreamEvent8 struct {
	// Data Represents an execution run on a [thread](/docs/api-reference/threads).
	Data  RunObject            `json:"data"`
	Event RunStreamEvent8Event `json:"event"`
}

// RunStreamEvent8Event defines model for RunStreamEvent.8.Event.
type RunStreamEvent8Event string

// RunToolCallObject Tool call objects
type RunToolCallObject struct {
	// Function The function definition.
	Function struct {
		// Arguments The arguments that the model expects you to pass to the function.
		Arguments string `json:"arguments"`

		// Name The name of the function.
		Name string `json:"name"`
	} `json:"function"`

	// Id The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.
	Id string `json:"id"`

	// Type The type of tool call the output is required for. For now, this is always `function`.
	Type RunToolCallObjectType `json:"type"`
}

// RunToolCallObjectType The type of tool call the output is required for. For now, this is always `function`.
type RunToolCallObjectType string

// SubmitToolOutputsRunRequest defines model for SubmitToolOutputsRunRequest.
type SubmitToolOutputsRunRequest struct {
	// Stream If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
	Stream *bool `json:"stream"`

	// ToolOutputs A list of tools for which the outputs are being submitted.
	ToolOutputs []struct {
		// Output The output of the tool call to be submitted to continue the run.
		Output *string `json:"output,omitempty"`

		// ToolCallId The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
		ToolCallId *string `json:"tool_call_id,omitempty"`
	} `json:"tool_outputs"`
}

// ThreadObject Represents a thread that contains [messages](/docs/api-reference/messages).
type ThreadObject struct {
	// CreatedAt The Unix timestamp (in seconds) for when the thread was created.
	CreatedAt int `json:"created_at"`

	// Id The identifier, which can be referenced in API endpoints.
	Id string `json:"id"`

	// Metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	Metadata *map[string]interface{} `json:"metadata"`

	// Object The object type, which is always `thread`.
	Object ThreadObjectObject `json:"object"`
}

// ThreadObjectObject The object type, which is always `thread`.
type ThreadObjectObject string

// ThreadStreamEvent defines model for ThreadStreamEvent.
type ThreadStreamEvent struct {
	union json.RawMessage
}

// ThreadStreamEvent0 Occurs when a new [thread](/docs/api-reference/threads/object) is created.
type ThreadStreamEvent0 struct {
	// Data Represents a thread that contains [messages](/docs/api-reference/messages).
	Data  ThreadObject            `json:"data"`
	Event ThreadStreamEvent0Event `json:"event"`
}

// ThreadStreamEvent0Event defines model for ThreadStreamEvent.0.Event.
type ThreadStreamEvent0Event string

// TranscriptionSegment defines model for TranscriptionSegment.
type TranscriptionSegment struct {
	// AvgLogprob Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
	AvgLogprob float32 `json:"avg_logprob"`

	// CompressionRatio Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
	CompressionRatio float32 `json:"compression_ratio"`

	// End End time of the segment in seconds.
	End float32 `json:"end"`

	// Id Unique identifier of the segment.
	Id int `json:"id"`

	// NoSpeechProb Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
	NoSpeechProb float32 `json:"no_speech_prob"`

	// Seek Seek offset of the segment.
	Seek int `json:"seek"`

	// Start Start time of the segment in seconds.
	Start float32 `json:"start"`

	// Temperature Temperature parameter used for generating the segment.
	Temperature float32 `json:"temperature"`

	// Text Text content of the segment.
	Text string `json:"text"`

	// Tokens Array of token IDs for the text content.
	Tokens []int `json:"tokens"`
}

// TranscriptionWord defines model for TranscriptionWord.
type TranscriptionWord struct {
	// End End time of the word in seconds.
	End float32 `json:"end"`

	// Start Start time of the word in seconds.
	Start float32 `json:"start"`

	// Word The text content of the word.
	Word string `json:"word"`
}

// XCreateToolRequest defines model for XCreateToolRequest.
type XCreateToolRequest struct {
	// Contents Contents of the tool
	Contents *string `json:"contents"`

	// EnvVars Environment variables
	EnvVars *[]string `json:"env_vars,omitempty"`

	// Subtool The name of the sub tool to use rather than the first tool
	Subtool *string `json:"subtool"`

	// Url URL of the tool
	Url *string `json:"url"`
}

// XDeleteToolResponse defines model for XDeleteToolResponse.
type XDeleteToolResponse struct {
	Deleted bool                      `json:"deleted"`
	Id      string                    `json:"id"`
	Object  XDeleteToolResponseObject `json:"object"`
}

// XDeleteToolResponseObject defines model for XDeleteToolResponse.Object.
type XDeleteToolResponseObject string

// XInspectToolRequest defines model for XInspectToolRequest.
type XInspectToolRequest struct {
	// Subtool The name of the sub tool to use rather than the first tool
	Subtool string `json:"subtool,omitempty"`

	// Url URL of the tool to inspect
	Url string `json:"url"`
}

// XInspectToolResponse defines model for XInspectToolResponse.
type XInspectToolResponse struct {
	// EntryToolId The id of the tool that is the entry point
	EntryToolId string `json:"entry_tool_id"`

	// Exports The exports of the tool
	Exports map[string]interface{} `json:"exports,omitempty"`

	// Name The name of the tool
	Name string `json:"name"`

	// ToolSet The set of tools in the tool
	ToolSet map[string]XToolSetTool `json:"tool_set"`
}

// XListRunStepEventsResponse defines model for XListRunStepEventsResponse.
type XListRunStepEventsResponse struct {
	Data   []XRunStepEventObject `json:"data"`
	Object string                `json:"object"`
}

// XListThreadsResponse defines model for XListThreadsResponse.
type XListThreadsResponse struct {
	Data    []ThreadObject `json:"data"`
	FirstId string         `json:"first_id"`
	HasMore bool           `json:"has_more"`
	LastId  string         `json:"last_id"`
	Object  string         `json:"object"`
}

// XListToolsResponse defines model for XListToolsResponse.
type XListToolsResponse struct {
	Data    []XToolObject `json:"data"`
	FirstId string        `json:"first_id"`
	HasMore bool          `json:"has_more"`
	LastId  string        `json:"last_id"`
	Object  string        `json:"object"`
}

// XModifyToolRequest defines model for XModifyToolRequest.
type XModifyToolRequest struct {
	// Contents Contents of the tool
	Contents *string `json:"contents"`

	// EnvVars Environment variables
	EnvVars *[]string `json:"env_vars,omitempty"`

	// Retool Pull the contents of the tool from the URL to redefine the tool
	Retool *bool `json:"retool,omitempty"`

	// Subtool The name of the sub tool to use rather than the first tool
	Subtool *string `json:"subtool"`

	// Url URL of the tool
	Url *string `json:"url"`
}

// XRunStepEventObject defines model for XRunStepEventObject.
type XRunStepEventObject struct {
	ChatCompletionId   *string `json:"chat_completion_id,omitempty"`
	ChatRequest        any     `json:"chat_request,omitempty"`
	ChatResponse       any     `json:"chat_response,omitempty"`
	ChatResponseCached bool    `json:"chat_response_cached,omitempty"`
	Content            *string `json:"content,omitempty"`
	Err                *string `json:"err,omitempty"`
	Input              *string `json:"input,omitempty"`
	Output             *string `json:"output,omitempty"`
	RunId              string  `json:"run_id"`

	// RunStepId The id of the run step
	RunStepId string `json:"run_step_id"`

	// Time The time of the event
	Time        time.Time `json:"time"`
	ToolResults *int      `json:"tool_results,omitempty"`

	// ToolSubCalls The tool sub calls
	ToolSubCalls map[string]interface{} `json:"tool_sub_calls,omitempty"`
	Type         *string                `json:"type,omitempty"`
}

// XRunToolRequest defines model for XRunToolRequest.
type XRunToolRequest struct {
	// EnvVars Environment variables
	EnvVars []string `json:"env_vars,omitempty"`

	// File The file to run
	File  string `json:"file"`
	Input string `json:"input,omitempty"`

	// Subtool The name of the sub tool to use rather than the first tool
	Subtool string `json:"subtool"`
}

// XToolObject defines model for XToolObject.
type XToolObject struct {
	// Contents Contents of the tool
	Contents *string `json:"contents"`

	// CreatedAt The Unix timestamp (in seconds) for when the assistant file was created.
	CreatedAt int `json:"created_at"`

	// Description Description of the tool
	Description *string `json:"description,omitempty"`

	// EnvVars Environment variables
	EnvVars *[]string `json:"env_vars,omitempty"`

	// Id The id of the tool
	Id string `json:"id"`

	// Name The name of the tool
	Name *string `json:"name,omitempty"`

	// Object The object type, which is always `tool`.
	Object XToolObjectObject `json:"object"`

	// Subtool The name of the sub tool to use rather than the first tool
	Subtool *string `json:"subtool"`

	// Url URL of the tool
	Url *string `json:"url"`
}

// XToolObjectObject The object type, which is always `tool`.
type XToolObjectObject string

// XToolSetTool defines model for XToolSetTool.
type XToolSetTool struct {
	Id *string `json:"id,omitempty"`

	// Instructions The instructions for the tool
	Instructions *string            `json:"instructions,omitempty"`
	LocalTools   *map[string]string `json:"local_tools,omitempty"`
	Source       *struct {
		LineNo   *int    `json:"line_no,omitempty"`
		Location *string `json:"location,omitempty"`
		Repo     *struct {
			// Name The filename of the source in the repo, relative to Path
			Name *string `json:"name,omitempty"`

			// Path The path in the repo of this source. This should refer to a directory and not the actual file
			Path *string `json:"path,omitempty"`

			// Revision The revision of this source
			Revision *string `json:"revision,omitempty"`

			// Root The URL where the VCS repo can be found
			Root *string `json:"root,omitempty"`

			// Vcs VCS The VCS type, such as "git"
			Vcs *string `json:"vcs,omitempty"`
		} `json:"repo,omitempty"`
	} `json:"source,omitempty"`
	ToolMapping *map[string]string `json:"tool_mapping,omitempty"`
	WorkingDir  *string            `json:"working_dir,omitempty"`
}

// ListAssistantsParams defines parameters for ListAssistants.
type ListAssistantsParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
	Order *ListAssistantsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// ListAssistantsParamsOrder defines parameters for ListAssistants.
type ListAssistantsParamsOrder string

// ListAssistantFilesParams defines parameters for ListAssistantFiles.
type ListAssistantFilesParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
	Order *ListAssistantFilesParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// ListAssistantFilesParamsOrder defines parameters for ListAssistantFiles.
type ListAssistantFilesParamsOrder string

// ListFilesParams defines parameters for ListFiles.
type ListFilesParams struct {
	// Purpose Only return files with the given purpose.
	Purpose *string `form:"purpose,omitempty" json:"purpose,omitempty"`
}

// ListPaginatedFineTuningJobsParams defines parameters for ListPaginatedFineTuningJobs.
type ListPaginatedFineTuningJobsParams struct {
	// After Identifier for the last job from the previous pagination request.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Limit Number of fine-tuning jobs to retrieve.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListFineTuningEventsParams defines parameters for ListFineTuningEvents.
type ListFineTuningEventsParams struct {
	// After Identifier for the last event from the previous pagination request.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Limit Number of events to retrieve.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ExtendedListAssistantsParams defines parameters for ExtendedListAssistants.
type ExtendedListAssistantsParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
	Order *ExtendedListAssistantsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// ExtendedListAssistantsParamsOrder defines parameters for ExtendedListAssistants.
type ExtendedListAssistantsParamsOrder string

// ExtendedListAssistantFilesParams defines parameters for ExtendedListAssistantFiles.
type ExtendedListAssistantFilesParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
	Order *ExtendedListAssistantFilesParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// ExtendedListAssistantFilesParamsOrder defines parameters for ExtendedListAssistantFiles.
type ExtendedListAssistantFilesParamsOrder string

// ExtendedListFilesParams defines parameters for ExtendedListFiles.
type ExtendedListFilesParams struct {
	// Purpose Only return files with the given purpose.
	Purpose *string `form:"purpose,omitempty" json:"purpose,omitempty"`
}

// ExtendedListPaginatedFineTuningJobsParams defines parameters for ExtendedListPaginatedFineTuningJobs.
type ExtendedListPaginatedFineTuningJobsParams struct {
	// After Identifier for the last job from the previous pagination request.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Limit Number of fine-tuning jobs to retrieve.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ExtendedListFineTuningEventsParams defines parameters for ExtendedListFineTuningEvents.
type ExtendedListFineTuningEventsParams struct {
	// After Identifier for the last event from the previous pagination request.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Limit Number of events to retrieve.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ExtendedListMessagesParams defines parameters for ExtendedListMessages.
type ExtendedListMessagesParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
	Order *ExtendedListMessagesParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// ExtendedListMessagesParamsOrder defines parameters for ExtendedListMessages.
type ExtendedListMessagesParamsOrder string

// ExtendedListMessageFilesParams defines parameters for ExtendedListMessageFiles.
type ExtendedListMessageFilesParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
	Order *ExtendedListMessageFilesParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// ExtendedListMessageFilesParamsOrder defines parameters for ExtendedListMessageFiles.
type ExtendedListMessageFilesParamsOrder string

// ExtendedListRunsParams defines parameters for ExtendedListRuns.
type ExtendedListRunsParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
	Order *ExtendedListRunsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// ExtendedListRunsParamsOrder defines parameters for ExtendedListRuns.
type ExtendedListRunsParamsOrder string

// ExtendedListRunStepsParams defines parameters for ExtendedListRunSteps.
type ExtendedListRunStepsParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
	Order *ExtendedListRunStepsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// ExtendedListRunStepsParamsOrder defines parameters for ExtendedListRunSteps.
type ExtendedListRunStepsParamsOrder string

// ListThreadsParams defines parameters for ListThreads.
type ListThreadsParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
	Order *ListThreadsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// ListThreadsParamsOrder defines parameters for ListThreads.
type ListThreadsParamsOrder string

// XListRunStepEventsParams defines parameters for XListRunStepEvents.
type XListRunStepEventsParams struct {
	Stream *bool `form:"stream,omitempty" json:"stream,omitempty"`
	Index  *int  `form:"index,omitempty" json:"index,omitempty"`
}

// StreamRunParams defines parameters for StreamRun.
type StreamRunParams struct {
	Index *int `form:"index,omitempty" json:"index,omitempty"`
}

// ListToolsParams defines parameters for ListTools.
type ListToolsParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
	Order *ListToolsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// ListToolsParamsOrder defines parameters for ListTools.
type ListToolsParamsOrder string

// ListMessagesParams defines parameters for ListMessages.
type ListMessagesParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
	Order *ListMessagesParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// ListMessagesParamsOrder defines parameters for ListMessages.
type ListMessagesParamsOrder string

// ListMessageFilesParams defines parameters for ListMessageFiles.
type ListMessageFilesParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
	Order *ListMessageFilesParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// ListMessageFilesParamsOrder defines parameters for ListMessageFiles.
type ListMessageFilesParamsOrder string

// ListRunsParams defines parameters for ListRuns.
type ListRunsParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
	Order *ListRunsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// ListRunsParamsOrder defines parameters for ListRuns.
type ListRunsParamsOrder string

// ListRunStepsParams defines parameters for ListRunSteps.
type ListRunStepsParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
	Order *ListRunStepsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// ListRunStepsParamsOrder defines parameters for ListRunSteps.
type ListRunStepsParamsOrder string

// CreateAssistantJSONRequestBody defines body for CreateAssistant for application/json ContentType.
type CreateAssistantJSONRequestBody = CreateAssistantRequest

// ModifyAssistantJSONRequestBody defines body for ModifyAssistant for application/json ContentType.
type ModifyAssistantJSONRequestBody = ModifyAssistantRequest

// CreateAssistantFileJSONRequestBody defines body for CreateAssistantFile for application/json ContentType.
type CreateAssistantFileJSONRequestBody = CreateAssistantFileRequest

// CreateSpeechJSONRequestBody defines body for CreateSpeech for application/json ContentType.
type CreateSpeechJSONRequestBody = CreateSpeechRequest

// CreateTranscriptionMultipartRequestBody defines body for CreateTranscription for multipart/form-data ContentType.
type CreateTranscriptionMultipartRequestBody = CreateTranscriptionRequest

// CreateTranslationMultipartRequestBody defines body for CreateTranslation for multipart/form-data ContentType.
type CreateTranslationMultipartRequestBody = CreateTranslationRequest

// CreateChatCompletionJSONRequestBody defines body for CreateChatCompletion for application/json ContentType.
type CreateChatCompletionJSONRequestBody = CreateChatCompletionRequest

// CreateCompletionJSONRequestBody defines body for CreateCompletion for application/json ContentType.
type CreateCompletionJSONRequestBody = CreateCompletionRequest

// CreateEmbeddingJSONRequestBody defines body for CreateEmbedding for application/json ContentType.
type CreateEmbeddingJSONRequestBody = CreateEmbeddingRequest

// CreateFileMultipartRequestBody defines body for CreateFile for multipart/form-data ContentType.
type CreateFileMultipartRequestBody = CreateFileRequest

// CreateFineTuningJobJSONRequestBody defines body for CreateFineTuningJob for application/json ContentType.
type CreateFineTuningJobJSONRequestBody = CreateFineTuningJobRequest

// CreateImageEditMultipartRequestBody defines body for CreateImageEdit for multipart/form-data ContentType.
type CreateImageEditMultipartRequestBody = CreateImageEditRequest

// CreateImageJSONRequestBody defines body for CreateImage for application/json ContentType.
type CreateImageJSONRequestBody = CreateImageRequest

// CreateImageVariationMultipartRequestBody defines body for CreateImageVariation for multipart/form-data ContentType.
type CreateImageVariationMultipartRequestBody = CreateImageVariationRequest

// CreateModerationJSONRequestBody defines body for CreateModeration for application/json ContentType.
type CreateModerationJSONRequestBody = CreateModerationRequest

// ExtendedCreateAssistantJSONRequestBody defines body for ExtendedCreateAssistant for application/json ContentType.
type ExtendedCreateAssistantJSONRequestBody = ExtendedCreateAssistantRequest

// ExtendedModifyAssistantJSONRequestBody defines body for ExtendedModifyAssistant for application/json ContentType.
type ExtendedModifyAssistantJSONRequestBody = ExtendedModifyAssistantRequest

// ExtendedCreateAssistantFileJSONRequestBody defines body for ExtendedCreateAssistantFile for application/json ContentType.
type ExtendedCreateAssistantFileJSONRequestBody = ExtendedCreateAssistantFileRequest

// ExtendedCreateSpeechJSONRequestBody defines body for ExtendedCreateSpeech for application/json ContentType.
type ExtendedCreateSpeechJSONRequestBody = ExtendedCreateSpeechRequest

// ExtendedCreateTranscriptionMultipartRequestBody defines body for ExtendedCreateTranscription for multipart/form-data ContentType.
type ExtendedCreateTranscriptionMultipartRequestBody = ExtendedCreateTranscriptionRequest

// ExtendedCreateTranslationMultipartRequestBody defines body for ExtendedCreateTranslation for multipart/form-data ContentType.
type ExtendedCreateTranslationMultipartRequestBody = ExtendedCreateTranslationRequest

// ExtendedCreateChatCompletionJSONRequestBody defines body for ExtendedCreateChatCompletion for application/json ContentType.
type ExtendedCreateChatCompletionJSONRequestBody = ExtendedCreateChatCompletionRequest

// ExtendedCreateCompletionJSONRequestBody defines body for ExtendedCreateCompletion for application/json ContentType.
type ExtendedCreateCompletionJSONRequestBody = ExtendedCreateCompletionRequest

// ExtendedCreateEmbeddingJSONRequestBody defines body for ExtendedCreateEmbedding for application/json ContentType.
type ExtendedCreateEmbeddingJSONRequestBody = ExtendedCreateEmbeddingRequest

// ExtendedCreateFileMultipartRequestBody defines body for ExtendedCreateFile for multipart/form-data ContentType.
type ExtendedCreateFileMultipartRequestBody = ExtendedCreateFileRequest

// ExtendedCreateFineTuningJobJSONRequestBody defines body for ExtendedCreateFineTuningJob for application/json ContentType.
type ExtendedCreateFineTuningJobJSONRequestBody = ExtendedCreateFineTuningJobRequest

// ExtendedCreateImageEditMultipartRequestBody defines body for ExtendedCreateImageEdit for multipart/form-data ContentType.
type ExtendedCreateImageEditMultipartRequestBody = ExtendedCreateImageEditRequest

// ExtendedCreateImageJSONRequestBody defines body for ExtendedCreateImage for application/json ContentType.
type ExtendedCreateImageJSONRequestBody = ExtendedCreateImageRequest

// ExtendedCreateImageVariationMultipartRequestBody defines body for ExtendedCreateImageVariation for multipart/form-data ContentType.
type ExtendedCreateImageVariationMultipartRequestBody = ExtendedCreateImageVariationRequest

// ExtendedCreateModerationJSONRequestBody defines body for ExtendedCreateModeration for application/json ContentType.
type ExtendedCreateModerationJSONRequestBody = ExtendedCreateModerationRequest

// ExtendedCreateThreadJSONRequestBody defines body for ExtendedCreateThread for application/json ContentType.
type ExtendedCreateThreadJSONRequestBody = ExtendedCreateThreadRequest

// ExtendedCreateThreadAndRunJSONRequestBody defines body for ExtendedCreateThreadAndRun for application/json ContentType.
type ExtendedCreateThreadAndRunJSONRequestBody = ExtendedCreateThreadAndRunRequest

// ExtendedModifyThreadJSONRequestBody defines body for ExtendedModifyThread for application/json ContentType.
type ExtendedModifyThreadJSONRequestBody = ExtendedModifyThreadRequest

// ExtendedCreateMessageJSONRequestBody defines body for ExtendedCreateMessage for application/json ContentType.
type ExtendedCreateMessageJSONRequestBody = ExtendedCreateMessageRequest

// ExtendedModifyMessageJSONRequestBody defines body for ExtendedModifyMessage for application/json ContentType.
type ExtendedModifyMessageJSONRequestBody = ExtendedModifyMessageRequest

// ExtendedCreateRunJSONRequestBody defines body for ExtendedCreateRun for application/json ContentType.
type ExtendedCreateRunJSONRequestBody = ExtendedCreateRunRequest

// ExtendedModifyRunJSONRequestBody defines body for ExtendedModifyRun for application/json ContentType.
type ExtendedModifyRunJSONRequestBody = ExtendedModifyRunRequest

// ExtendedSubmitToolOuputsToRunJSONRequestBody defines body for ExtendedSubmitToolOuputsToRun for application/json ContentType.
type ExtendedSubmitToolOuputsToRunJSONRequestBody = ExtendedSubmitToolOutputsRunRequest

// CreateToolJSONRequestBody defines body for CreateTool for application/json ContentType.
type CreateToolJSONRequestBody = XCreateToolRequest

// InspectToolJSONRequestBody defines body for InspectTool for application/json ContentType.
type InspectToolJSONRequestBody = XInspectToolRequest

// RunToolJSONRequestBody defines body for RunTool for application/json ContentType.
type RunToolJSONRequestBody = XRunToolRequest

// ModifyToolJSONRequestBody defines body for ModifyTool for application/json ContentType.
type ModifyToolJSONRequestBody = XModifyToolRequest

// CreateThreadJSONRequestBody defines body for CreateThread for application/json ContentType.
type CreateThreadJSONRequestBody = CreateThreadRequest

// CreateThreadAndRunJSONRequestBody defines body for CreateThreadAndRun for application/json ContentType.
type CreateThreadAndRunJSONRequestBody = CreateThreadAndRunRequest

// ModifyThreadJSONRequestBody defines body for ModifyThread for application/json ContentType.
type ModifyThreadJSONRequestBody = ModifyThreadRequest

// CreateMessageJSONRequestBody defines body for CreateMessage for application/json ContentType.
type CreateMessageJSONRequestBody = CreateMessageRequest

// ModifyMessageJSONRequestBody defines body for ModifyMessage for application/json ContentType.
type ModifyMessageJSONRequestBody = ModifyMessageRequest

// CreateRunJSONRequestBody defines body for CreateRun for application/json ContentType.
type CreateRunJSONRequestBody = CreateRunRequest

// ModifyRunJSONRequestBody defines body for ModifyRun for application/json ContentType.
type ModifyRunJSONRequestBody = ModifyRunRequest

// SubmitToolOuputsToRunJSONRequestBody defines body for SubmitToolOuputsToRun for application/json ContentType.
type SubmitToolOuputsToRunJSONRequestBody = SubmitToolOutputsRunRequest

// AsAssistantToolsCode returns the union data inside the AssistantObject_Tools_Item as a AssistantToolsCode
func (t AssistantObject_Tools_Item) AsAssistantToolsCode() (AssistantToolsCode, error) {
	var body AssistantToolsCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsCode overwrites any union data inside the AssistantObject_Tools_Item as the provided AssistantToolsCode
func (t *AssistantObject_Tools_Item) FromAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsCode performs a merge with any union data inside the AssistantObject_Tools_Item, using the provided AssistantToolsCode
func (t *AssistantObject_Tools_Item) MergeAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsRetrieval returns the union data inside the AssistantObject_Tools_Item as a AssistantToolsRetrieval
func (t AssistantObject_Tools_Item) AsAssistantToolsRetrieval() (AssistantToolsRetrieval, error) {
	var body AssistantToolsRetrieval
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsRetrieval overwrites any union data inside the AssistantObject_Tools_Item as the provided AssistantToolsRetrieval
func (t *AssistantObject_Tools_Item) FromAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsRetrieval performs a merge with any union data inside the AssistantObject_Tools_Item, using the provided AssistantToolsRetrieval
func (t *AssistantObject_Tools_Item) MergeAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsFunction returns the union data inside the AssistantObject_Tools_Item as a AssistantToolsFunction
func (t AssistantObject_Tools_Item) AsAssistantToolsFunction() (AssistantToolsFunction, error) {
	var body AssistantToolsFunction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsFunction overwrites any union data inside the AssistantObject_Tools_Item as the provided AssistantToolsFunction
func (t *AssistantObject_Tools_Item) FromAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsFunction performs a merge with any union data inside the AssistantObject_Tools_Item, using the provided AssistantToolsFunction
func (t *AssistantObject_Tools_Item) MergeAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AssistantObject_Tools_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AssistantObject_Tools_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsThreadStreamEvent returns the union data inside the AssistantStreamEvent as a ThreadStreamEvent
func (t AssistantStreamEvent) AsThreadStreamEvent() (ThreadStreamEvent, error) {
	var body ThreadStreamEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromThreadStreamEvent overwrites any union data inside the AssistantStreamEvent as the provided ThreadStreamEvent
func (t *AssistantStreamEvent) FromThreadStreamEvent(v ThreadStreamEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeThreadStreamEvent performs a merge with any union data inside the AssistantStreamEvent, using the provided ThreadStreamEvent
func (t *AssistantStreamEvent) MergeThreadStreamEvent(v ThreadStreamEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStreamEvent returns the union data inside the AssistantStreamEvent as a RunStreamEvent
func (t AssistantStreamEvent) AsRunStreamEvent() (RunStreamEvent, error) {
	var body RunStreamEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStreamEvent overwrites any union data inside the AssistantStreamEvent as the provided RunStreamEvent
func (t *AssistantStreamEvent) FromRunStreamEvent(v RunStreamEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStreamEvent performs a merge with any union data inside the AssistantStreamEvent, using the provided RunStreamEvent
func (t *AssistantStreamEvent) MergeRunStreamEvent(v RunStreamEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepStreamEvent returns the union data inside the AssistantStreamEvent as a RunStepStreamEvent
func (t AssistantStreamEvent) AsRunStepStreamEvent() (RunStepStreamEvent, error) {
	var body RunStepStreamEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepStreamEvent overwrites any union data inside the AssistantStreamEvent as the provided RunStepStreamEvent
func (t *AssistantStreamEvent) FromRunStepStreamEvent(v RunStepStreamEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepStreamEvent performs a merge with any union data inside the AssistantStreamEvent, using the provided RunStepStreamEvent
func (t *AssistantStreamEvent) MergeRunStepStreamEvent(v RunStepStreamEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageStreamEvent returns the union data inside the AssistantStreamEvent as a MessageStreamEvent
func (t AssistantStreamEvent) AsMessageStreamEvent() (MessageStreamEvent, error) {
	var body MessageStreamEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageStreamEvent overwrites any union data inside the AssistantStreamEvent as the provided MessageStreamEvent
func (t *AssistantStreamEvent) FromMessageStreamEvent(v MessageStreamEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageStreamEvent performs a merge with any union data inside the AssistantStreamEvent, using the provided MessageStreamEvent
func (t *AssistantStreamEvent) MergeMessageStreamEvent(v MessageStreamEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorEvent returns the union data inside the AssistantStreamEvent as a ErrorEvent
func (t AssistantStreamEvent) AsErrorEvent() (ErrorEvent, error) {
	var body ErrorEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorEvent overwrites any union data inside the AssistantStreamEvent as the provided ErrorEvent
func (t *AssistantStreamEvent) FromErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorEvent performs a merge with any union data inside the AssistantStreamEvent, using the provided ErrorEvent
func (t *AssistantStreamEvent) MergeErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDoneEvent returns the union data inside the AssistantStreamEvent as a DoneEvent
func (t AssistantStreamEvent) AsDoneEvent() (DoneEvent, error) {
	var body DoneEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDoneEvent overwrites any union data inside the AssistantStreamEvent as the provided DoneEvent
func (t *AssistantStreamEvent) FromDoneEvent(v DoneEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDoneEvent performs a merge with any union data inside the AssistantStreamEvent, using the provided DoneEvent
func (t *AssistantStreamEvent) MergeDoneEvent(v DoneEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AssistantStreamEvent) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AssistantStreamEvent) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsChatCompletionRequestSystemMessage returns the union data inside the ChatCompletionRequestMessage as a ChatCompletionRequestSystemMessage
func (t ChatCompletionRequestMessage) AsChatCompletionRequestSystemMessage() (ChatCompletionRequestSystemMessage, error) {
	var body ChatCompletionRequestSystemMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestSystemMessage overwrites any union data inside the ChatCompletionRequestMessage as the provided ChatCompletionRequestSystemMessage
func (t *ChatCompletionRequestMessage) FromChatCompletionRequestSystemMessage(v ChatCompletionRequestSystemMessage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestSystemMessage performs a merge with any union data inside the ChatCompletionRequestMessage, using the provided ChatCompletionRequestSystemMessage
func (t *ChatCompletionRequestMessage) MergeChatCompletionRequestSystemMessage(v ChatCompletionRequestSystemMessage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatCompletionRequestUserMessage returns the union data inside the ChatCompletionRequestMessage as a ChatCompletionRequestUserMessage
func (t ChatCompletionRequestMessage) AsChatCompletionRequestUserMessage() (ChatCompletionRequestUserMessage, error) {
	var body ChatCompletionRequestUserMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestUserMessage overwrites any union data inside the ChatCompletionRequestMessage as the provided ChatCompletionRequestUserMessage
func (t *ChatCompletionRequestMessage) FromChatCompletionRequestUserMessage(v ChatCompletionRequestUserMessage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestUserMessage performs a merge with any union data inside the ChatCompletionRequestMessage, using the provided ChatCompletionRequestUserMessage
func (t *ChatCompletionRequestMessage) MergeChatCompletionRequestUserMessage(v ChatCompletionRequestUserMessage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatCompletionRequestAssistantMessage returns the union data inside the ChatCompletionRequestMessage as a ChatCompletionRequestAssistantMessage
func (t ChatCompletionRequestMessage) AsChatCompletionRequestAssistantMessage() (ChatCompletionRequestAssistantMessage, error) {
	var body ChatCompletionRequestAssistantMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestAssistantMessage overwrites any union data inside the ChatCompletionRequestMessage as the provided ChatCompletionRequestAssistantMessage
func (t *ChatCompletionRequestMessage) FromChatCompletionRequestAssistantMessage(v ChatCompletionRequestAssistantMessage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestAssistantMessage performs a merge with any union data inside the ChatCompletionRequestMessage, using the provided ChatCompletionRequestAssistantMessage
func (t *ChatCompletionRequestMessage) MergeChatCompletionRequestAssistantMessage(v ChatCompletionRequestAssistantMessage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatCompletionRequestToolMessage returns the union data inside the ChatCompletionRequestMessage as a ChatCompletionRequestToolMessage
func (t ChatCompletionRequestMessage) AsChatCompletionRequestToolMessage() (ChatCompletionRequestToolMessage, error) {
	var body ChatCompletionRequestToolMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestToolMessage overwrites any union data inside the ChatCompletionRequestMessage as the provided ChatCompletionRequestToolMessage
func (t *ChatCompletionRequestMessage) FromChatCompletionRequestToolMessage(v ChatCompletionRequestToolMessage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestToolMessage performs a merge with any union data inside the ChatCompletionRequestMessage, using the provided ChatCompletionRequestToolMessage
func (t *ChatCompletionRequestMessage) MergeChatCompletionRequestToolMessage(v ChatCompletionRequestToolMessage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatCompletionRequestFunctionMessage returns the union data inside the ChatCompletionRequestMessage as a ChatCompletionRequestFunctionMessage
func (t ChatCompletionRequestMessage) AsChatCompletionRequestFunctionMessage() (ChatCompletionRequestFunctionMessage, error) {
	var body ChatCompletionRequestFunctionMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestFunctionMessage overwrites any union data inside the ChatCompletionRequestMessage as the provided ChatCompletionRequestFunctionMessage
func (t *ChatCompletionRequestMessage) FromChatCompletionRequestFunctionMessage(v ChatCompletionRequestFunctionMessage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestFunctionMessage performs a merge with any union data inside the ChatCompletionRequestMessage, using the provided ChatCompletionRequestFunctionMessage
func (t *ChatCompletionRequestMessage) MergeChatCompletionRequestFunctionMessage(v ChatCompletionRequestFunctionMessage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ChatCompletionRequestMessage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ChatCompletionRequestMessage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsChatCompletionRequestMessageContentPartText returns the union data inside the ChatCompletionRequestMessageContentPart as a ChatCompletionRequestMessageContentPartText
func (t ChatCompletionRequestMessageContentPart) AsChatCompletionRequestMessageContentPartText() (ChatCompletionRequestMessageContentPartText, error) {
	var body ChatCompletionRequestMessageContentPartText
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestMessageContentPartText overwrites any union data inside the ChatCompletionRequestMessageContentPart as the provided ChatCompletionRequestMessageContentPartText
func (t *ChatCompletionRequestMessageContentPart) FromChatCompletionRequestMessageContentPartText(v ChatCompletionRequestMessageContentPartText) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestMessageContentPartText performs a merge with any union data inside the ChatCompletionRequestMessageContentPart, using the provided ChatCompletionRequestMessageContentPartText
func (t *ChatCompletionRequestMessageContentPart) MergeChatCompletionRequestMessageContentPartText(v ChatCompletionRequestMessageContentPartText) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatCompletionRequestMessageContentPartImage returns the union data inside the ChatCompletionRequestMessageContentPart as a ChatCompletionRequestMessageContentPartImage
func (t ChatCompletionRequestMessageContentPart) AsChatCompletionRequestMessageContentPartImage() (ChatCompletionRequestMessageContentPartImage, error) {
	var body ChatCompletionRequestMessageContentPartImage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestMessageContentPartImage overwrites any union data inside the ChatCompletionRequestMessageContentPart as the provided ChatCompletionRequestMessageContentPartImage
func (t *ChatCompletionRequestMessageContentPart) FromChatCompletionRequestMessageContentPartImage(v ChatCompletionRequestMessageContentPartImage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestMessageContentPartImage performs a merge with any union data inside the ChatCompletionRequestMessageContentPart, using the provided ChatCompletionRequestMessageContentPartImage
func (t *ChatCompletionRequestMessageContentPart) MergeChatCompletionRequestMessageContentPartImage(v ChatCompletionRequestMessageContentPartImage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ChatCompletionRequestMessageContentPart) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ChatCompletionRequestMessageContentPart) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsChatCompletionRequestUserMessageContent0 returns the union data inside the ChatCompletionRequestUserMessage_Content as a ChatCompletionRequestUserMessageContent0
func (t ChatCompletionRequestUserMessage_Content) AsChatCompletionRequestUserMessageContent0() (ChatCompletionRequestUserMessageContent0, error) {
	var body ChatCompletionRequestUserMessageContent0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestUserMessageContent0 overwrites any union data inside the ChatCompletionRequestUserMessage_Content as the provided ChatCompletionRequestUserMessageContent0
func (t *ChatCompletionRequestUserMessage_Content) FromChatCompletionRequestUserMessageContent0(v ChatCompletionRequestUserMessageContent0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestUserMessageContent0 performs a merge with any union data inside the ChatCompletionRequestUserMessage_Content, using the provided ChatCompletionRequestUserMessageContent0
func (t *ChatCompletionRequestUserMessage_Content) MergeChatCompletionRequestUserMessageContent0(v ChatCompletionRequestUserMessageContent0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatCompletionRequestUserMessageContent1 returns the union data inside the ChatCompletionRequestUserMessage_Content as a ChatCompletionRequestUserMessageContent1
func (t ChatCompletionRequestUserMessage_Content) AsChatCompletionRequestUserMessageContent1() (ChatCompletionRequestUserMessageContent1, error) {
	var body ChatCompletionRequestUserMessageContent1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestUserMessageContent1 overwrites any union data inside the ChatCompletionRequestUserMessage_Content as the provided ChatCompletionRequestUserMessageContent1
func (t *ChatCompletionRequestUserMessage_Content) FromChatCompletionRequestUserMessageContent1(v ChatCompletionRequestUserMessageContent1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestUserMessageContent1 performs a merge with any union data inside the ChatCompletionRequestUserMessage_Content, using the provided ChatCompletionRequestUserMessageContent1
func (t *ChatCompletionRequestUserMessage_Content) MergeChatCompletionRequestUserMessageContent1(v ChatCompletionRequestUserMessageContent1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ChatCompletionRequestUserMessage_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ChatCompletionRequestUserMessage_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsChatCompletionToolChoiceOption0 returns the union data inside the ChatCompletionToolChoiceOption as a ChatCompletionToolChoiceOption0
func (t ChatCompletionToolChoiceOption) AsChatCompletionToolChoiceOption0() (ChatCompletionToolChoiceOption0, error) {
	var body ChatCompletionToolChoiceOption0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionToolChoiceOption0 overwrites any union data inside the ChatCompletionToolChoiceOption as the provided ChatCompletionToolChoiceOption0
func (t *ChatCompletionToolChoiceOption) FromChatCompletionToolChoiceOption0(v ChatCompletionToolChoiceOption0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionToolChoiceOption0 performs a merge with any union data inside the ChatCompletionToolChoiceOption, using the provided ChatCompletionToolChoiceOption0
func (t *ChatCompletionToolChoiceOption) MergeChatCompletionToolChoiceOption0(v ChatCompletionToolChoiceOption0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatCompletionNamedToolChoice returns the union data inside the ChatCompletionToolChoiceOption as a ChatCompletionNamedToolChoice
func (t ChatCompletionToolChoiceOption) AsChatCompletionNamedToolChoice() (ChatCompletionNamedToolChoice, error) {
	var body ChatCompletionNamedToolChoice
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionNamedToolChoice overwrites any union data inside the ChatCompletionToolChoiceOption as the provided ChatCompletionNamedToolChoice
func (t *ChatCompletionToolChoiceOption) FromChatCompletionNamedToolChoice(v ChatCompletionNamedToolChoice) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionNamedToolChoice performs a merge with any union data inside the ChatCompletionToolChoiceOption, using the provided ChatCompletionNamedToolChoice
func (t *ChatCompletionToolChoiceOption) MergeChatCompletionNamedToolChoice(v ChatCompletionNamedToolChoice) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ChatCompletionToolChoiceOption) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ChatCompletionToolChoiceOption) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateAssistantRequestModel0 returns the union data inside the CreateAssistantRequest_Model as a CreateAssistantRequestModel0
func (t CreateAssistantRequest_Model) AsCreateAssistantRequestModel0() (CreateAssistantRequestModel0, error) {
	var body CreateAssistantRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateAssistantRequestModel0 overwrites any union data inside the CreateAssistantRequest_Model as the provided CreateAssistantRequestModel0
func (t *CreateAssistantRequest_Model) FromCreateAssistantRequestModel0(v CreateAssistantRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateAssistantRequestModel0 performs a merge with any union data inside the CreateAssistantRequest_Model, using the provided CreateAssistantRequestModel0
func (t *CreateAssistantRequest_Model) MergeCreateAssistantRequestModel0(v CreateAssistantRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateAssistantRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateAssistantRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAssistantToolsCode returns the union data inside the CreateAssistantRequest_Tools_Item as a AssistantToolsCode
func (t CreateAssistantRequest_Tools_Item) AsAssistantToolsCode() (AssistantToolsCode, error) {
	var body AssistantToolsCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsCode overwrites any union data inside the CreateAssistantRequest_Tools_Item as the provided AssistantToolsCode
func (t *CreateAssistantRequest_Tools_Item) FromAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsCode performs a merge with any union data inside the CreateAssistantRequest_Tools_Item, using the provided AssistantToolsCode
func (t *CreateAssistantRequest_Tools_Item) MergeAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsRetrieval returns the union data inside the CreateAssistantRequest_Tools_Item as a AssistantToolsRetrieval
func (t CreateAssistantRequest_Tools_Item) AsAssistantToolsRetrieval() (AssistantToolsRetrieval, error) {
	var body AssistantToolsRetrieval
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsRetrieval overwrites any union data inside the CreateAssistantRequest_Tools_Item as the provided AssistantToolsRetrieval
func (t *CreateAssistantRequest_Tools_Item) FromAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsRetrieval performs a merge with any union data inside the CreateAssistantRequest_Tools_Item, using the provided AssistantToolsRetrieval
func (t *CreateAssistantRequest_Tools_Item) MergeAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsFunction returns the union data inside the CreateAssistantRequest_Tools_Item as a AssistantToolsFunction
func (t CreateAssistantRequest_Tools_Item) AsAssistantToolsFunction() (AssistantToolsFunction, error) {
	var body AssistantToolsFunction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsFunction overwrites any union data inside the CreateAssistantRequest_Tools_Item as the provided AssistantToolsFunction
func (t *CreateAssistantRequest_Tools_Item) FromAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsFunction performs a merge with any union data inside the CreateAssistantRequest_Tools_Item, using the provided AssistantToolsFunction
func (t *CreateAssistantRequest_Tools_Item) MergeAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateAssistantRequest_Tools_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateAssistantRequest_Tools_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateChatCompletionRequestFunctionCall0 returns the union data inside the CreateChatCompletionRequest_FunctionCall as a CreateChatCompletionRequestFunctionCall0
func (t CreateChatCompletionRequest_FunctionCall) AsCreateChatCompletionRequestFunctionCall0() (CreateChatCompletionRequestFunctionCall0, error) {
	var body CreateChatCompletionRequestFunctionCall0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateChatCompletionRequestFunctionCall0 overwrites any union data inside the CreateChatCompletionRequest_FunctionCall as the provided CreateChatCompletionRequestFunctionCall0
func (t *CreateChatCompletionRequest_FunctionCall) FromCreateChatCompletionRequestFunctionCall0(v CreateChatCompletionRequestFunctionCall0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateChatCompletionRequestFunctionCall0 performs a merge with any union data inside the CreateChatCompletionRequest_FunctionCall, using the provided CreateChatCompletionRequestFunctionCall0
func (t *CreateChatCompletionRequest_FunctionCall) MergeCreateChatCompletionRequestFunctionCall0(v CreateChatCompletionRequestFunctionCall0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatCompletionFunctionCallOption returns the union data inside the CreateChatCompletionRequest_FunctionCall as a ChatCompletionFunctionCallOption
func (t CreateChatCompletionRequest_FunctionCall) AsChatCompletionFunctionCallOption() (ChatCompletionFunctionCallOption, error) {
	var body ChatCompletionFunctionCallOption
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionFunctionCallOption overwrites any union data inside the CreateChatCompletionRequest_FunctionCall as the provided ChatCompletionFunctionCallOption
func (t *CreateChatCompletionRequest_FunctionCall) FromChatCompletionFunctionCallOption(v ChatCompletionFunctionCallOption) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionFunctionCallOption performs a merge with any union data inside the CreateChatCompletionRequest_FunctionCall, using the provided ChatCompletionFunctionCallOption
func (t *CreateChatCompletionRequest_FunctionCall) MergeChatCompletionFunctionCallOption(v ChatCompletionFunctionCallOption) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateChatCompletionRequest_FunctionCall) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateChatCompletionRequest_FunctionCall) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateChatCompletionRequestModel0 returns the union data inside the CreateChatCompletionRequest_Model as a CreateChatCompletionRequestModel0
func (t CreateChatCompletionRequest_Model) AsCreateChatCompletionRequestModel0() (CreateChatCompletionRequestModel0, error) {
	var body CreateChatCompletionRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateChatCompletionRequestModel0 overwrites any union data inside the CreateChatCompletionRequest_Model as the provided CreateChatCompletionRequestModel0
func (t *CreateChatCompletionRequest_Model) FromCreateChatCompletionRequestModel0(v CreateChatCompletionRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateChatCompletionRequestModel0 performs a merge with any union data inside the CreateChatCompletionRequest_Model, using the provided CreateChatCompletionRequestModel0
func (t *CreateChatCompletionRequest_Model) MergeCreateChatCompletionRequestModel0(v CreateChatCompletionRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateChatCompletionRequestModel1 returns the union data inside the CreateChatCompletionRequest_Model as a CreateChatCompletionRequestModel1
func (t CreateChatCompletionRequest_Model) AsCreateChatCompletionRequestModel1() (CreateChatCompletionRequestModel1, error) {
	var body CreateChatCompletionRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateChatCompletionRequestModel1 overwrites any union data inside the CreateChatCompletionRequest_Model as the provided CreateChatCompletionRequestModel1
func (t *CreateChatCompletionRequest_Model) FromCreateChatCompletionRequestModel1(v CreateChatCompletionRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateChatCompletionRequestModel1 performs a merge with any union data inside the CreateChatCompletionRequest_Model, using the provided CreateChatCompletionRequestModel1
func (t *CreateChatCompletionRequest_Model) MergeCreateChatCompletionRequestModel1(v CreateChatCompletionRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateChatCompletionRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateChatCompletionRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateChatCompletionRequestStop0 returns the union data inside the CreateChatCompletionRequest_Stop as a CreateChatCompletionRequestStop0
func (t CreateChatCompletionRequest_Stop) AsCreateChatCompletionRequestStop0() (CreateChatCompletionRequestStop0, error) {
	var body CreateChatCompletionRequestStop0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateChatCompletionRequestStop0 overwrites any union data inside the CreateChatCompletionRequest_Stop as the provided CreateChatCompletionRequestStop0
func (t *CreateChatCompletionRequest_Stop) FromCreateChatCompletionRequestStop0(v CreateChatCompletionRequestStop0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateChatCompletionRequestStop0 performs a merge with any union data inside the CreateChatCompletionRequest_Stop, using the provided CreateChatCompletionRequestStop0
func (t *CreateChatCompletionRequest_Stop) MergeCreateChatCompletionRequestStop0(v CreateChatCompletionRequestStop0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateChatCompletionRequestStop1 returns the union data inside the CreateChatCompletionRequest_Stop as a CreateChatCompletionRequestStop1
func (t CreateChatCompletionRequest_Stop) AsCreateChatCompletionRequestStop1() (CreateChatCompletionRequestStop1, error) {
	var body CreateChatCompletionRequestStop1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateChatCompletionRequestStop1 overwrites any union data inside the CreateChatCompletionRequest_Stop as the provided CreateChatCompletionRequestStop1
func (t *CreateChatCompletionRequest_Stop) FromCreateChatCompletionRequestStop1(v CreateChatCompletionRequestStop1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateChatCompletionRequestStop1 performs a merge with any union data inside the CreateChatCompletionRequest_Stop, using the provided CreateChatCompletionRequestStop1
func (t *CreateChatCompletionRequest_Stop) MergeCreateChatCompletionRequestStop1(v CreateChatCompletionRequestStop1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateChatCompletionRequest_Stop) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateChatCompletionRequest_Stop) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateCompletionRequestModel0 returns the union data inside the CreateCompletionRequest_Model as a CreateCompletionRequestModel0
func (t CreateCompletionRequest_Model) AsCreateCompletionRequestModel0() (CreateCompletionRequestModel0, error) {
	var body CreateCompletionRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCompletionRequestModel0 overwrites any union data inside the CreateCompletionRequest_Model as the provided CreateCompletionRequestModel0
func (t *CreateCompletionRequest_Model) FromCreateCompletionRequestModel0(v CreateCompletionRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCompletionRequestModel0 performs a merge with any union data inside the CreateCompletionRequest_Model, using the provided CreateCompletionRequestModel0
func (t *CreateCompletionRequest_Model) MergeCreateCompletionRequestModel0(v CreateCompletionRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateCompletionRequestModel1 returns the union data inside the CreateCompletionRequest_Model as a CreateCompletionRequestModel1
func (t CreateCompletionRequest_Model) AsCreateCompletionRequestModel1() (CreateCompletionRequestModel1, error) {
	var body CreateCompletionRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCompletionRequestModel1 overwrites any union data inside the CreateCompletionRequest_Model as the provided CreateCompletionRequestModel1
func (t *CreateCompletionRequest_Model) FromCreateCompletionRequestModel1(v CreateCompletionRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCompletionRequestModel1 performs a merge with any union data inside the CreateCompletionRequest_Model, using the provided CreateCompletionRequestModel1
func (t *CreateCompletionRequest_Model) MergeCreateCompletionRequestModel1(v CreateCompletionRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateCompletionRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateCompletionRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateCompletionRequestPrompt0 returns the union data inside the CreateCompletionRequest_Prompt as a CreateCompletionRequestPrompt0
func (t CreateCompletionRequest_Prompt) AsCreateCompletionRequestPrompt0() (CreateCompletionRequestPrompt0, error) {
	var body CreateCompletionRequestPrompt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCompletionRequestPrompt0 overwrites any union data inside the CreateCompletionRequest_Prompt as the provided CreateCompletionRequestPrompt0
func (t *CreateCompletionRequest_Prompt) FromCreateCompletionRequestPrompt0(v CreateCompletionRequestPrompt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCompletionRequestPrompt0 performs a merge with any union data inside the CreateCompletionRequest_Prompt, using the provided CreateCompletionRequestPrompt0
func (t *CreateCompletionRequest_Prompt) MergeCreateCompletionRequestPrompt0(v CreateCompletionRequestPrompt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateCompletionRequestPrompt1 returns the union data inside the CreateCompletionRequest_Prompt as a CreateCompletionRequestPrompt1
func (t CreateCompletionRequest_Prompt) AsCreateCompletionRequestPrompt1() (CreateCompletionRequestPrompt1, error) {
	var body CreateCompletionRequestPrompt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCompletionRequestPrompt1 overwrites any union data inside the CreateCompletionRequest_Prompt as the provided CreateCompletionRequestPrompt1
func (t *CreateCompletionRequest_Prompt) FromCreateCompletionRequestPrompt1(v CreateCompletionRequestPrompt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCompletionRequestPrompt1 performs a merge with any union data inside the CreateCompletionRequest_Prompt, using the provided CreateCompletionRequestPrompt1
func (t *CreateCompletionRequest_Prompt) MergeCreateCompletionRequestPrompt1(v CreateCompletionRequestPrompt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateCompletionRequestPrompt2 returns the union data inside the CreateCompletionRequest_Prompt as a CreateCompletionRequestPrompt2
func (t CreateCompletionRequest_Prompt) AsCreateCompletionRequestPrompt2() (CreateCompletionRequestPrompt2, error) {
	var body CreateCompletionRequestPrompt2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCompletionRequestPrompt2 overwrites any union data inside the CreateCompletionRequest_Prompt as the provided CreateCompletionRequestPrompt2
func (t *CreateCompletionRequest_Prompt) FromCreateCompletionRequestPrompt2(v CreateCompletionRequestPrompt2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCompletionRequestPrompt2 performs a merge with any union data inside the CreateCompletionRequest_Prompt, using the provided CreateCompletionRequestPrompt2
func (t *CreateCompletionRequest_Prompt) MergeCreateCompletionRequestPrompt2(v CreateCompletionRequestPrompt2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateCompletionRequestPrompt3 returns the union data inside the CreateCompletionRequest_Prompt as a CreateCompletionRequestPrompt3
func (t CreateCompletionRequest_Prompt) AsCreateCompletionRequestPrompt3() (CreateCompletionRequestPrompt3, error) {
	var body CreateCompletionRequestPrompt3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCompletionRequestPrompt3 overwrites any union data inside the CreateCompletionRequest_Prompt as the provided CreateCompletionRequestPrompt3
func (t *CreateCompletionRequest_Prompt) FromCreateCompletionRequestPrompt3(v CreateCompletionRequestPrompt3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCompletionRequestPrompt3 performs a merge with any union data inside the CreateCompletionRequest_Prompt, using the provided CreateCompletionRequestPrompt3
func (t *CreateCompletionRequest_Prompt) MergeCreateCompletionRequestPrompt3(v CreateCompletionRequestPrompt3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateCompletionRequest_Prompt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateCompletionRequest_Prompt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateCompletionRequestStop0 returns the union data inside the CreateCompletionRequest_Stop as a CreateCompletionRequestStop0
func (t CreateCompletionRequest_Stop) AsCreateCompletionRequestStop0() (CreateCompletionRequestStop0, error) {
	var body CreateCompletionRequestStop0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCompletionRequestStop0 overwrites any union data inside the CreateCompletionRequest_Stop as the provided CreateCompletionRequestStop0
func (t *CreateCompletionRequest_Stop) FromCreateCompletionRequestStop0(v CreateCompletionRequestStop0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCompletionRequestStop0 performs a merge with any union data inside the CreateCompletionRequest_Stop, using the provided CreateCompletionRequestStop0
func (t *CreateCompletionRequest_Stop) MergeCreateCompletionRequestStop0(v CreateCompletionRequestStop0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateCompletionRequestStop1 returns the union data inside the CreateCompletionRequest_Stop as a CreateCompletionRequestStop1
func (t CreateCompletionRequest_Stop) AsCreateCompletionRequestStop1() (CreateCompletionRequestStop1, error) {
	var body CreateCompletionRequestStop1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCompletionRequestStop1 overwrites any union data inside the CreateCompletionRequest_Stop as the provided CreateCompletionRequestStop1
func (t *CreateCompletionRequest_Stop) FromCreateCompletionRequestStop1(v CreateCompletionRequestStop1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCompletionRequestStop1 performs a merge with any union data inside the CreateCompletionRequest_Stop, using the provided CreateCompletionRequestStop1
func (t *CreateCompletionRequest_Stop) MergeCreateCompletionRequestStop1(v CreateCompletionRequestStop1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateCompletionRequest_Stop) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateCompletionRequest_Stop) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateEmbeddingRequestInput0 returns the union data inside the CreateEmbeddingRequest_Input as a CreateEmbeddingRequestInput0
func (t CreateEmbeddingRequest_Input) AsCreateEmbeddingRequestInput0() (CreateEmbeddingRequestInput0, error) {
	var body CreateEmbeddingRequestInput0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateEmbeddingRequestInput0 overwrites any union data inside the CreateEmbeddingRequest_Input as the provided CreateEmbeddingRequestInput0
func (t *CreateEmbeddingRequest_Input) FromCreateEmbeddingRequestInput0(v CreateEmbeddingRequestInput0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateEmbeddingRequestInput0 performs a merge with any union data inside the CreateEmbeddingRequest_Input, using the provided CreateEmbeddingRequestInput0
func (t *CreateEmbeddingRequest_Input) MergeCreateEmbeddingRequestInput0(v CreateEmbeddingRequestInput0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateEmbeddingRequestInput1 returns the union data inside the CreateEmbeddingRequest_Input as a CreateEmbeddingRequestInput1
func (t CreateEmbeddingRequest_Input) AsCreateEmbeddingRequestInput1() (CreateEmbeddingRequestInput1, error) {
	var body CreateEmbeddingRequestInput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateEmbeddingRequestInput1 overwrites any union data inside the CreateEmbeddingRequest_Input as the provided CreateEmbeddingRequestInput1
func (t *CreateEmbeddingRequest_Input) FromCreateEmbeddingRequestInput1(v CreateEmbeddingRequestInput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateEmbeddingRequestInput1 performs a merge with any union data inside the CreateEmbeddingRequest_Input, using the provided CreateEmbeddingRequestInput1
func (t *CreateEmbeddingRequest_Input) MergeCreateEmbeddingRequestInput1(v CreateEmbeddingRequestInput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateEmbeddingRequestInput2 returns the union data inside the CreateEmbeddingRequest_Input as a CreateEmbeddingRequestInput2
func (t CreateEmbeddingRequest_Input) AsCreateEmbeddingRequestInput2() (CreateEmbeddingRequestInput2, error) {
	var body CreateEmbeddingRequestInput2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateEmbeddingRequestInput2 overwrites any union data inside the CreateEmbeddingRequest_Input as the provided CreateEmbeddingRequestInput2
func (t *CreateEmbeddingRequest_Input) FromCreateEmbeddingRequestInput2(v CreateEmbeddingRequestInput2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateEmbeddingRequestInput2 performs a merge with any union data inside the CreateEmbeddingRequest_Input, using the provided CreateEmbeddingRequestInput2
func (t *CreateEmbeddingRequest_Input) MergeCreateEmbeddingRequestInput2(v CreateEmbeddingRequestInput2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateEmbeddingRequestInput3 returns the union data inside the CreateEmbeddingRequest_Input as a CreateEmbeddingRequestInput3
func (t CreateEmbeddingRequest_Input) AsCreateEmbeddingRequestInput3() (CreateEmbeddingRequestInput3, error) {
	var body CreateEmbeddingRequestInput3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateEmbeddingRequestInput3 overwrites any union data inside the CreateEmbeddingRequest_Input as the provided CreateEmbeddingRequestInput3
func (t *CreateEmbeddingRequest_Input) FromCreateEmbeddingRequestInput3(v CreateEmbeddingRequestInput3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateEmbeddingRequestInput3 performs a merge with any union data inside the CreateEmbeddingRequest_Input, using the provided CreateEmbeddingRequestInput3
func (t *CreateEmbeddingRequest_Input) MergeCreateEmbeddingRequestInput3(v CreateEmbeddingRequestInput3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateEmbeddingRequest_Input) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateEmbeddingRequest_Input) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateEmbeddingRequestModel0 returns the union data inside the CreateEmbeddingRequest_Model as a CreateEmbeddingRequestModel0
func (t CreateEmbeddingRequest_Model) AsCreateEmbeddingRequestModel0() (CreateEmbeddingRequestModel0, error) {
	var body CreateEmbeddingRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateEmbeddingRequestModel0 overwrites any union data inside the CreateEmbeddingRequest_Model as the provided CreateEmbeddingRequestModel0
func (t *CreateEmbeddingRequest_Model) FromCreateEmbeddingRequestModel0(v CreateEmbeddingRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateEmbeddingRequestModel0 performs a merge with any union data inside the CreateEmbeddingRequest_Model, using the provided CreateEmbeddingRequestModel0
func (t *CreateEmbeddingRequest_Model) MergeCreateEmbeddingRequestModel0(v CreateEmbeddingRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateEmbeddingRequestModel1 returns the union data inside the CreateEmbeddingRequest_Model as a CreateEmbeddingRequestModel1
func (t CreateEmbeddingRequest_Model) AsCreateEmbeddingRequestModel1() (CreateEmbeddingRequestModel1, error) {
	var body CreateEmbeddingRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateEmbeddingRequestModel1 overwrites any union data inside the CreateEmbeddingRequest_Model as the provided CreateEmbeddingRequestModel1
func (t *CreateEmbeddingRequest_Model) FromCreateEmbeddingRequestModel1(v CreateEmbeddingRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateEmbeddingRequestModel1 performs a merge with any union data inside the CreateEmbeddingRequest_Model, using the provided CreateEmbeddingRequestModel1
func (t *CreateEmbeddingRequest_Model) MergeCreateEmbeddingRequestModel1(v CreateEmbeddingRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateEmbeddingRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateEmbeddingRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateFineTuningJobRequestHyperparametersBatchSize0 returns the union data inside the CreateFineTuningJobRequest_Hyperparameters_BatchSize as a CreateFineTuningJobRequestHyperparametersBatchSize0
func (t CreateFineTuningJobRequest_Hyperparameters_BatchSize) AsCreateFineTuningJobRequestHyperparametersBatchSize0() (CreateFineTuningJobRequestHyperparametersBatchSize0, error) {
	var body CreateFineTuningJobRequestHyperparametersBatchSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateFineTuningJobRequestHyperparametersBatchSize0 overwrites any union data inside the CreateFineTuningJobRequest_Hyperparameters_BatchSize as the provided CreateFineTuningJobRequestHyperparametersBatchSize0
func (t *CreateFineTuningJobRequest_Hyperparameters_BatchSize) FromCreateFineTuningJobRequestHyperparametersBatchSize0(v CreateFineTuningJobRequestHyperparametersBatchSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateFineTuningJobRequestHyperparametersBatchSize0 performs a merge with any union data inside the CreateFineTuningJobRequest_Hyperparameters_BatchSize, using the provided CreateFineTuningJobRequestHyperparametersBatchSize0
func (t *CreateFineTuningJobRequest_Hyperparameters_BatchSize) MergeCreateFineTuningJobRequestHyperparametersBatchSize0(v CreateFineTuningJobRequestHyperparametersBatchSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateFineTuningJobRequestHyperparametersBatchSize1 returns the union data inside the CreateFineTuningJobRequest_Hyperparameters_BatchSize as a CreateFineTuningJobRequestHyperparametersBatchSize1
func (t CreateFineTuningJobRequest_Hyperparameters_BatchSize) AsCreateFineTuningJobRequestHyperparametersBatchSize1() (CreateFineTuningJobRequestHyperparametersBatchSize1, error) {
	var body CreateFineTuningJobRequestHyperparametersBatchSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateFineTuningJobRequestHyperparametersBatchSize1 overwrites any union data inside the CreateFineTuningJobRequest_Hyperparameters_BatchSize as the provided CreateFineTuningJobRequestHyperparametersBatchSize1
func (t *CreateFineTuningJobRequest_Hyperparameters_BatchSize) FromCreateFineTuningJobRequestHyperparametersBatchSize1(v CreateFineTuningJobRequestHyperparametersBatchSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateFineTuningJobRequestHyperparametersBatchSize1 performs a merge with any union data inside the CreateFineTuningJobRequest_Hyperparameters_BatchSize, using the provided CreateFineTuningJobRequestHyperparametersBatchSize1
func (t *CreateFineTuningJobRequest_Hyperparameters_BatchSize) MergeCreateFineTuningJobRequestHyperparametersBatchSize1(v CreateFineTuningJobRequestHyperparametersBatchSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateFineTuningJobRequest_Hyperparameters_BatchSize) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateFineTuningJobRequest_Hyperparameters_BatchSize) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 returns the union data inside the CreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier as a CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0
func (t CreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier) AsCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0() (CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0, error) {
	var body CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 overwrites any union data inside the CreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier as the provided CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0
func (t *CreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier) FromCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0(v CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 performs a merge with any union data inside the CreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier, using the provided CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0
func (t *CreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier) MergeCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0(v CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1 returns the union data inside the CreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier as a CreateFineTuningJobRequestHyperparametersLearningRateMultiplier1
func (t CreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier) AsCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1() (CreateFineTuningJobRequestHyperparametersLearningRateMultiplier1, error) {
	var body CreateFineTuningJobRequestHyperparametersLearningRateMultiplier1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1 overwrites any union data inside the CreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier as the provided CreateFineTuningJobRequestHyperparametersLearningRateMultiplier1
func (t *CreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier) FromCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1(v CreateFineTuningJobRequestHyperparametersLearningRateMultiplier1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1 performs a merge with any union data inside the CreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier, using the provided CreateFineTuningJobRequestHyperparametersLearningRateMultiplier1
func (t *CreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier) MergeCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1(v CreateFineTuningJobRequestHyperparametersLearningRateMultiplier1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateFineTuningJobRequestHyperparametersNEpochs0 returns the union data inside the CreateFineTuningJobRequest_Hyperparameters_NEpochs as a CreateFineTuningJobRequestHyperparametersNEpochs0
func (t CreateFineTuningJobRequest_Hyperparameters_NEpochs) AsCreateFineTuningJobRequestHyperparametersNEpochs0() (CreateFineTuningJobRequestHyperparametersNEpochs0, error) {
	var body CreateFineTuningJobRequestHyperparametersNEpochs0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateFineTuningJobRequestHyperparametersNEpochs0 overwrites any union data inside the CreateFineTuningJobRequest_Hyperparameters_NEpochs as the provided CreateFineTuningJobRequestHyperparametersNEpochs0
func (t *CreateFineTuningJobRequest_Hyperparameters_NEpochs) FromCreateFineTuningJobRequestHyperparametersNEpochs0(v CreateFineTuningJobRequestHyperparametersNEpochs0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateFineTuningJobRequestHyperparametersNEpochs0 performs a merge with any union data inside the CreateFineTuningJobRequest_Hyperparameters_NEpochs, using the provided CreateFineTuningJobRequestHyperparametersNEpochs0
func (t *CreateFineTuningJobRequest_Hyperparameters_NEpochs) MergeCreateFineTuningJobRequestHyperparametersNEpochs0(v CreateFineTuningJobRequestHyperparametersNEpochs0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateFineTuningJobRequestHyperparametersNEpochs1 returns the union data inside the CreateFineTuningJobRequest_Hyperparameters_NEpochs as a CreateFineTuningJobRequestHyperparametersNEpochs1
func (t CreateFineTuningJobRequest_Hyperparameters_NEpochs) AsCreateFineTuningJobRequestHyperparametersNEpochs1() (CreateFineTuningJobRequestHyperparametersNEpochs1, error) {
	var body CreateFineTuningJobRequestHyperparametersNEpochs1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateFineTuningJobRequestHyperparametersNEpochs1 overwrites any union data inside the CreateFineTuningJobRequest_Hyperparameters_NEpochs as the provided CreateFineTuningJobRequestHyperparametersNEpochs1
func (t *CreateFineTuningJobRequest_Hyperparameters_NEpochs) FromCreateFineTuningJobRequestHyperparametersNEpochs1(v CreateFineTuningJobRequestHyperparametersNEpochs1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateFineTuningJobRequestHyperparametersNEpochs1 performs a merge with any union data inside the CreateFineTuningJobRequest_Hyperparameters_NEpochs, using the provided CreateFineTuningJobRequestHyperparametersNEpochs1
func (t *CreateFineTuningJobRequest_Hyperparameters_NEpochs) MergeCreateFineTuningJobRequestHyperparametersNEpochs1(v CreateFineTuningJobRequestHyperparametersNEpochs1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateFineTuningJobRequest_Hyperparameters_NEpochs) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateFineTuningJobRequest_Hyperparameters_NEpochs) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateFineTuningJobRequestModel0 returns the union data inside the CreateFineTuningJobRequest_Model as a CreateFineTuningJobRequestModel0
func (t CreateFineTuningJobRequest_Model) AsCreateFineTuningJobRequestModel0() (CreateFineTuningJobRequestModel0, error) {
	var body CreateFineTuningJobRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateFineTuningJobRequestModel0 overwrites any union data inside the CreateFineTuningJobRequest_Model as the provided CreateFineTuningJobRequestModel0
func (t *CreateFineTuningJobRequest_Model) FromCreateFineTuningJobRequestModel0(v CreateFineTuningJobRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateFineTuningJobRequestModel0 performs a merge with any union data inside the CreateFineTuningJobRequest_Model, using the provided CreateFineTuningJobRequestModel0
func (t *CreateFineTuningJobRequest_Model) MergeCreateFineTuningJobRequestModel0(v CreateFineTuningJobRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateFineTuningJobRequestModel1 returns the union data inside the CreateFineTuningJobRequest_Model as a CreateFineTuningJobRequestModel1
func (t CreateFineTuningJobRequest_Model) AsCreateFineTuningJobRequestModel1() (CreateFineTuningJobRequestModel1, error) {
	var body CreateFineTuningJobRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateFineTuningJobRequestModel1 overwrites any union data inside the CreateFineTuningJobRequest_Model as the provided CreateFineTuningJobRequestModel1
func (t *CreateFineTuningJobRequest_Model) FromCreateFineTuningJobRequestModel1(v CreateFineTuningJobRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateFineTuningJobRequestModel1 performs a merge with any union data inside the CreateFineTuningJobRequest_Model, using the provided CreateFineTuningJobRequestModel1
func (t *CreateFineTuningJobRequest_Model) MergeCreateFineTuningJobRequestModel1(v CreateFineTuningJobRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateFineTuningJobRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateFineTuningJobRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateImageEditRequestModel0 returns the union data inside the CreateImageEditRequest_Model as a CreateImageEditRequestModel0
func (t CreateImageEditRequest_Model) AsCreateImageEditRequestModel0() (CreateImageEditRequestModel0, error) {
	var body CreateImageEditRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateImageEditRequestModel0 overwrites any union data inside the CreateImageEditRequest_Model as the provided CreateImageEditRequestModel0
func (t *CreateImageEditRequest_Model) FromCreateImageEditRequestModel0(v CreateImageEditRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateImageEditRequestModel0 performs a merge with any union data inside the CreateImageEditRequest_Model, using the provided CreateImageEditRequestModel0
func (t *CreateImageEditRequest_Model) MergeCreateImageEditRequestModel0(v CreateImageEditRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateImageEditRequestModel1 returns the union data inside the CreateImageEditRequest_Model as a CreateImageEditRequestModel1
func (t CreateImageEditRequest_Model) AsCreateImageEditRequestModel1() (CreateImageEditRequestModel1, error) {
	var body CreateImageEditRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateImageEditRequestModel1 overwrites any union data inside the CreateImageEditRequest_Model as the provided CreateImageEditRequestModel1
func (t *CreateImageEditRequest_Model) FromCreateImageEditRequestModel1(v CreateImageEditRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateImageEditRequestModel1 performs a merge with any union data inside the CreateImageEditRequest_Model, using the provided CreateImageEditRequestModel1
func (t *CreateImageEditRequest_Model) MergeCreateImageEditRequestModel1(v CreateImageEditRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateImageEditRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateImageEditRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateImageRequestModel0 returns the union data inside the CreateImageRequest_Model as a CreateImageRequestModel0
func (t CreateImageRequest_Model) AsCreateImageRequestModel0() (CreateImageRequestModel0, error) {
	var body CreateImageRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateImageRequestModel0 overwrites any union data inside the CreateImageRequest_Model as the provided CreateImageRequestModel0
func (t *CreateImageRequest_Model) FromCreateImageRequestModel0(v CreateImageRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateImageRequestModel0 performs a merge with any union data inside the CreateImageRequest_Model, using the provided CreateImageRequestModel0
func (t *CreateImageRequest_Model) MergeCreateImageRequestModel0(v CreateImageRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateImageRequestModel1 returns the union data inside the CreateImageRequest_Model as a CreateImageRequestModel1
func (t CreateImageRequest_Model) AsCreateImageRequestModel1() (CreateImageRequestModel1, error) {
	var body CreateImageRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateImageRequestModel1 overwrites any union data inside the CreateImageRequest_Model as the provided CreateImageRequestModel1
func (t *CreateImageRequest_Model) FromCreateImageRequestModel1(v CreateImageRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateImageRequestModel1 performs a merge with any union data inside the CreateImageRequest_Model, using the provided CreateImageRequestModel1
func (t *CreateImageRequest_Model) MergeCreateImageRequestModel1(v CreateImageRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateImageRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateImageRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateImageVariationRequestModel0 returns the union data inside the CreateImageVariationRequest_Model as a CreateImageVariationRequestModel0
func (t CreateImageVariationRequest_Model) AsCreateImageVariationRequestModel0() (CreateImageVariationRequestModel0, error) {
	var body CreateImageVariationRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateImageVariationRequestModel0 overwrites any union data inside the CreateImageVariationRequest_Model as the provided CreateImageVariationRequestModel0
func (t *CreateImageVariationRequest_Model) FromCreateImageVariationRequestModel0(v CreateImageVariationRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateImageVariationRequestModel0 performs a merge with any union data inside the CreateImageVariationRequest_Model, using the provided CreateImageVariationRequestModel0
func (t *CreateImageVariationRequest_Model) MergeCreateImageVariationRequestModel0(v CreateImageVariationRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateImageVariationRequestModel1 returns the union data inside the CreateImageVariationRequest_Model as a CreateImageVariationRequestModel1
func (t CreateImageVariationRequest_Model) AsCreateImageVariationRequestModel1() (CreateImageVariationRequestModel1, error) {
	var body CreateImageVariationRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateImageVariationRequestModel1 overwrites any union data inside the CreateImageVariationRequest_Model as the provided CreateImageVariationRequestModel1
func (t *CreateImageVariationRequest_Model) FromCreateImageVariationRequestModel1(v CreateImageVariationRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateImageVariationRequestModel1 performs a merge with any union data inside the CreateImageVariationRequest_Model, using the provided CreateImageVariationRequestModel1
func (t *CreateImageVariationRequest_Model) MergeCreateImageVariationRequestModel1(v CreateImageVariationRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateImageVariationRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateImageVariationRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateModerationRequestInput0 returns the union data inside the CreateModerationRequest_Input as a CreateModerationRequestInput0
func (t CreateModerationRequest_Input) AsCreateModerationRequestInput0() (CreateModerationRequestInput0, error) {
	var body CreateModerationRequestInput0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateModerationRequestInput0 overwrites any union data inside the CreateModerationRequest_Input as the provided CreateModerationRequestInput0
func (t *CreateModerationRequest_Input) FromCreateModerationRequestInput0(v CreateModerationRequestInput0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateModerationRequestInput0 performs a merge with any union data inside the CreateModerationRequest_Input, using the provided CreateModerationRequestInput0
func (t *CreateModerationRequest_Input) MergeCreateModerationRequestInput0(v CreateModerationRequestInput0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateModerationRequestInput1 returns the union data inside the CreateModerationRequest_Input as a CreateModerationRequestInput1
func (t CreateModerationRequest_Input) AsCreateModerationRequestInput1() (CreateModerationRequestInput1, error) {
	var body CreateModerationRequestInput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateModerationRequestInput1 overwrites any union data inside the CreateModerationRequest_Input as the provided CreateModerationRequestInput1
func (t *CreateModerationRequest_Input) FromCreateModerationRequestInput1(v CreateModerationRequestInput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateModerationRequestInput1 performs a merge with any union data inside the CreateModerationRequest_Input, using the provided CreateModerationRequestInput1
func (t *CreateModerationRequest_Input) MergeCreateModerationRequestInput1(v CreateModerationRequestInput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateModerationRequest_Input) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateModerationRequest_Input) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateModerationRequestModel0 returns the union data inside the CreateModerationRequest_Model as a CreateModerationRequestModel0
func (t CreateModerationRequest_Model) AsCreateModerationRequestModel0() (CreateModerationRequestModel0, error) {
	var body CreateModerationRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateModerationRequestModel0 overwrites any union data inside the CreateModerationRequest_Model as the provided CreateModerationRequestModel0
func (t *CreateModerationRequest_Model) FromCreateModerationRequestModel0(v CreateModerationRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateModerationRequestModel0 performs a merge with any union data inside the CreateModerationRequest_Model, using the provided CreateModerationRequestModel0
func (t *CreateModerationRequest_Model) MergeCreateModerationRequestModel0(v CreateModerationRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateModerationRequestModel1 returns the union data inside the CreateModerationRequest_Model as a CreateModerationRequestModel1
func (t CreateModerationRequest_Model) AsCreateModerationRequestModel1() (CreateModerationRequestModel1, error) {
	var body CreateModerationRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateModerationRequestModel1 overwrites any union data inside the CreateModerationRequest_Model as the provided CreateModerationRequestModel1
func (t *CreateModerationRequest_Model) FromCreateModerationRequestModel1(v CreateModerationRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateModerationRequestModel1 performs a merge with any union data inside the CreateModerationRequest_Model, using the provided CreateModerationRequestModel1
func (t *CreateModerationRequest_Model) MergeCreateModerationRequestModel1(v CreateModerationRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateModerationRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateModerationRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAssistantToolsCode returns the union data inside the CreateRunRequest_Tools_Item as a AssistantToolsCode
func (t CreateRunRequest_Tools_Item) AsAssistantToolsCode() (AssistantToolsCode, error) {
	var body AssistantToolsCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsCode overwrites any union data inside the CreateRunRequest_Tools_Item as the provided AssistantToolsCode
func (t *CreateRunRequest_Tools_Item) FromAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsCode performs a merge with any union data inside the CreateRunRequest_Tools_Item, using the provided AssistantToolsCode
func (t *CreateRunRequest_Tools_Item) MergeAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsRetrieval returns the union data inside the CreateRunRequest_Tools_Item as a AssistantToolsRetrieval
func (t CreateRunRequest_Tools_Item) AsAssistantToolsRetrieval() (AssistantToolsRetrieval, error) {
	var body AssistantToolsRetrieval
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsRetrieval overwrites any union data inside the CreateRunRequest_Tools_Item as the provided AssistantToolsRetrieval
func (t *CreateRunRequest_Tools_Item) FromAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsRetrieval performs a merge with any union data inside the CreateRunRequest_Tools_Item, using the provided AssistantToolsRetrieval
func (t *CreateRunRequest_Tools_Item) MergeAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsFunction returns the union data inside the CreateRunRequest_Tools_Item as a AssistantToolsFunction
func (t CreateRunRequest_Tools_Item) AsAssistantToolsFunction() (AssistantToolsFunction, error) {
	var body AssistantToolsFunction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsFunction overwrites any union data inside the CreateRunRequest_Tools_Item as the provided AssistantToolsFunction
func (t *CreateRunRequest_Tools_Item) FromAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsFunction performs a merge with any union data inside the CreateRunRequest_Tools_Item, using the provided AssistantToolsFunction
func (t *CreateRunRequest_Tools_Item) MergeAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateRunRequest_Tools_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateRunRequest_Tools_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateSpeechRequestModel0 returns the union data inside the CreateSpeechRequest_Model as a CreateSpeechRequestModel0
func (t CreateSpeechRequest_Model) AsCreateSpeechRequestModel0() (CreateSpeechRequestModel0, error) {
	var body CreateSpeechRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateSpeechRequestModel0 overwrites any union data inside the CreateSpeechRequest_Model as the provided CreateSpeechRequestModel0
func (t *CreateSpeechRequest_Model) FromCreateSpeechRequestModel0(v CreateSpeechRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateSpeechRequestModel0 performs a merge with any union data inside the CreateSpeechRequest_Model, using the provided CreateSpeechRequestModel0
func (t *CreateSpeechRequest_Model) MergeCreateSpeechRequestModel0(v CreateSpeechRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateSpeechRequestModel1 returns the union data inside the CreateSpeechRequest_Model as a CreateSpeechRequestModel1
func (t CreateSpeechRequest_Model) AsCreateSpeechRequestModel1() (CreateSpeechRequestModel1, error) {
	var body CreateSpeechRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateSpeechRequestModel1 overwrites any union data inside the CreateSpeechRequest_Model as the provided CreateSpeechRequestModel1
func (t *CreateSpeechRequest_Model) FromCreateSpeechRequestModel1(v CreateSpeechRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateSpeechRequestModel1 performs a merge with any union data inside the CreateSpeechRequest_Model, using the provided CreateSpeechRequestModel1
func (t *CreateSpeechRequest_Model) MergeCreateSpeechRequestModel1(v CreateSpeechRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateSpeechRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateSpeechRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAssistantToolsCode returns the union data inside the CreateThreadAndRunRequest_Tools_Item as a AssistantToolsCode
func (t CreateThreadAndRunRequest_Tools_Item) AsAssistantToolsCode() (AssistantToolsCode, error) {
	var body AssistantToolsCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsCode overwrites any union data inside the CreateThreadAndRunRequest_Tools_Item as the provided AssistantToolsCode
func (t *CreateThreadAndRunRequest_Tools_Item) FromAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsCode performs a merge with any union data inside the CreateThreadAndRunRequest_Tools_Item, using the provided AssistantToolsCode
func (t *CreateThreadAndRunRequest_Tools_Item) MergeAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsRetrieval returns the union data inside the CreateThreadAndRunRequest_Tools_Item as a AssistantToolsRetrieval
func (t CreateThreadAndRunRequest_Tools_Item) AsAssistantToolsRetrieval() (AssistantToolsRetrieval, error) {
	var body AssistantToolsRetrieval
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsRetrieval overwrites any union data inside the CreateThreadAndRunRequest_Tools_Item as the provided AssistantToolsRetrieval
func (t *CreateThreadAndRunRequest_Tools_Item) FromAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsRetrieval performs a merge with any union data inside the CreateThreadAndRunRequest_Tools_Item, using the provided AssistantToolsRetrieval
func (t *CreateThreadAndRunRequest_Tools_Item) MergeAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsFunction returns the union data inside the CreateThreadAndRunRequest_Tools_Item as a AssistantToolsFunction
func (t CreateThreadAndRunRequest_Tools_Item) AsAssistantToolsFunction() (AssistantToolsFunction, error) {
	var body AssistantToolsFunction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsFunction overwrites any union data inside the CreateThreadAndRunRequest_Tools_Item as the provided AssistantToolsFunction
func (t *CreateThreadAndRunRequest_Tools_Item) FromAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsFunction performs a merge with any union data inside the CreateThreadAndRunRequest_Tools_Item, using the provided AssistantToolsFunction
func (t *CreateThreadAndRunRequest_Tools_Item) MergeAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateThreadAndRunRequest_Tools_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateThreadAndRunRequest_Tools_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateTranscriptionRequestModel0 returns the union data inside the CreateTranscriptionRequest_Model as a CreateTranscriptionRequestModel0
func (t CreateTranscriptionRequest_Model) AsCreateTranscriptionRequestModel0() (CreateTranscriptionRequestModel0, error) {
	var body CreateTranscriptionRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateTranscriptionRequestModel0 overwrites any union data inside the CreateTranscriptionRequest_Model as the provided CreateTranscriptionRequestModel0
func (t *CreateTranscriptionRequest_Model) FromCreateTranscriptionRequestModel0(v CreateTranscriptionRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateTranscriptionRequestModel0 performs a merge with any union data inside the CreateTranscriptionRequest_Model, using the provided CreateTranscriptionRequestModel0
func (t *CreateTranscriptionRequest_Model) MergeCreateTranscriptionRequestModel0(v CreateTranscriptionRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateTranscriptionRequestModel1 returns the union data inside the CreateTranscriptionRequest_Model as a CreateTranscriptionRequestModel1
func (t CreateTranscriptionRequest_Model) AsCreateTranscriptionRequestModel1() (CreateTranscriptionRequestModel1, error) {
	var body CreateTranscriptionRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateTranscriptionRequestModel1 overwrites any union data inside the CreateTranscriptionRequest_Model as the provided CreateTranscriptionRequestModel1
func (t *CreateTranscriptionRequest_Model) FromCreateTranscriptionRequestModel1(v CreateTranscriptionRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateTranscriptionRequestModel1 performs a merge with any union data inside the CreateTranscriptionRequest_Model, using the provided CreateTranscriptionRequestModel1
func (t *CreateTranscriptionRequest_Model) MergeCreateTranscriptionRequestModel1(v CreateTranscriptionRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateTranscriptionRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateTranscriptionRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateTranslationRequestModel0 returns the union data inside the CreateTranslationRequest_Model as a CreateTranslationRequestModel0
func (t CreateTranslationRequest_Model) AsCreateTranslationRequestModel0() (CreateTranslationRequestModel0, error) {
	var body CreateTranslationRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateTranslationRequestModel0 overwrites any union data inside the CreateTranslationRequest_Model as the provided CreateTranslationRequestModel0
func (t *CreateTranslationRequest_Model) FromCreateTranslationRequestModel0(v CreateTranslationRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateTranslationRequestModel0 performs a merge with any union data inside the CreateTranslationRequest_Model, using the provided CreateTranslationRequestModel0
func (t *CreateTranslationRequest_Model) MergeCreateTranslationRequestModel0(v CreateTranslationRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateTranslationRequestModel1 returns the union data inside the CreateTranslationRequest_Model as a CreateTranslationRequestModel1
func (t CreateTranslationRequest_Model) AsCreateTranslationRequestModel1() (CreateTranslationRequestModel1, error) {
	var body CreateTranslationRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateTranslationRequestModel1 overwrites any union data inside the CreateTranslationRequest_Model as the provided CreateTranslationRequestModel1
func (t *CreateTranslationRequest_Model) FromCreateTranslationRequestModel1(v CreateTranslationRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateTranslationRequestModel1 performs a merge with any union data inside the CreateTranslationRequest_Model, using the provided CreateTranslationRequestModel1
func (t *CreateTranslationRequest_Model) MergeCreateTranslationRequestModel1(v CreateTranslationRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateTranslationRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateTranslationRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmbeddingEmbedding0 returns the union data inside the Embedding_Embedding as a EmbeddingEmbedding0
func (t Embedding_Embedding) AsEmbeddingEmbedding0() (EmbeddingEmbedding0, error) {
	var body EmbeddingEmbedding0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmbeddingEmbedding0 overwrites any union data inside the Embedding_Embedding as the provided EmbeddingEmbedding0
func (t *Embedding_Embedding) FromEmbeddingEmbedding0(v EmbeddingEmbedding0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmbeddingEmbedding0 performs a merge with any union data inside the Embedding_Embedding, using the provided EmbeddingEmbedding0
func (t *Embedding_Embedding) MergeEmbeddingEmbedding0(v EmbeddingEmbedding0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEmbeddingEmbedding1 returns the union data inside the Embedding_Embedding as a EmbeddingEmbedding1
func (t Embedding_Embedding) AsEmbeddingEmbedding1() (EmbeddingEmbedding1, error) {
	var body EmbeddingEmbedding1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmbeddingEmbedding1 overwrites any union data inside the Embedding_Embedding as the provided EmbeddingEmbedding1
func (t *Embedding_Embedding) FromEmbeddingEmbedding1(v EmbeddingEmbedding1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmbeddingEmbedding1 performs a merge with any union data inside the Embedding_Embedding, using the provided EmbeddingEmbedding1
func (t *Embedding_Embedding) MergeEmbeddingEmbedding1(v EmbeddingEmbedding1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Embedding_Embedding) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Embedding_Embedding) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAssistantToolsCode returns the union data inside the ExtendedAssistantObject_Tools_Item as a AssistantToolsCode
func (t ExtendedAssistantObject_Tools_Item) AsAssistantToolsCode() (AssistantToolsCode, error) {
	var body AssistantToolsCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsCode overwrites any union data inside the ExtendedAssistantObject_Tools_Item as the provided AssistantToolsCode
func (t *ExtendedAssistantObject_Tools_Item) FromAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsCode performs a merge with any union data inside the ExtendedAssistantObject_Tools_Item, using the provided AssistantToolsCode
func (t *ExtendedAssistantObject_Tools_Item) MergeAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsRetrieval returns the union data inside the ExtendedAssistantObject_Tools_Item as a AssistantToolsRetrieval
func (t ExtendedAssistantObject_Tools_Item) AsAssistantToolsRetrieval() (AssistantToolsRetrieval, error) {
	var body AssistantToolsRetrieval
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsRetrieval overwrites any union data inside the ExtendedAssistantObject_Tools_Item as the provided AssistantToolsRetrieval
func (t *ExtendedAssistantObject_Tools_Item) FromAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsRetrieval performs a merge with any union data inside the ExtendedAssistantObject_Tools_Item, using the provided AssistantToolsRetrieval
func (t *ExtendedAssistantObject_Tools_Item) MergeAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsFunction returns the union data inside the ExtendedAssistantObject_Tools_Item as a AssistantToolsFunction
func (t ExtendedAssistantObject_Tools_Item) AsAssistantToolsFunction() (AssistantToolsFunction, error) {
	var body AssistantToolsFunction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsFunction overwrites any union data inside the ExtendedAssistantObject_Tools_Item as the provided AssistantToolsFunction
func (t *ExtendedAssistantObject_Tools_Item) FromAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsFunction performs a merge with any union data inside the ExtendedAssistantObject_Tools_Item, using the provided AssistantToolsFunction
func (t *ExtendedAssistantObject_Tools_Item) MergeAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedAssistantObject_Tools_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedAssistantObject_Tools_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsThreadStreamEvent returns the union data inside the ExtendedAssistantStreamEvent as a ThreadStreamEvent
func (t ExtendedAssistantStreamEvent) AsThreadStreamEvent() (ThreadStreamEvent, error) {
	var body ThreadStreamEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromThreadStreamEvent overwrites any union data inside the ExtendedAssistantStreamEvent as the provided ThreadStreamEvent
func (t *ExtendedAssistantStreamEvent) FromThreadStreamEvent(v ThreadStreamEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeThreadStreamEvent performs a merge with any union data inside the ExtendedAssistantStreamEvent, using the provided ThreadStreamEvent
func (t *ExtendedAssistantStreamEvent) MergeThreadStreamEvent(v ThreadStreamEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStreamEvent returns the union data inside the ExtendedAssistantStreamEvent as a RunStreamEvent
func (t ExtendedAssistantStreamEvent) AsRunStreamEvent() (RunStreamEvent, error) {
	var body RunStreamEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStreamEvent overwrites any union data inside the ExtendedAssistantStreamEvent as the provided RunStreamEvent
func (t *ExtendedAssistantStreamEvent) FromRunStreamEvent(v RunStreamEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStreamEvent performs a merge with any union data inside the ExtendedAssistantStreamEvent, using the provided RunStreamEvent
func (t *ExtendedAssistantStreamEvent) MergeRunStreamEvent(v RunStreamEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepStreamEvent returns the union data inside the ExtendedAssistantStreamEvent as a RunStepStreamEvent
func (t ExtendedAssistantStreamEvent) AsRunStepStreamEvent() (RunStepStreamEvent, error) {
	var body RunStepStreamEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepStreamEvent overwrites any union data inside the ExtendedAssistantStreamEvent as the provided RunStepStreamEvent
func (t *ExtendedAssistantStreamEvent) FromRunStepStreamEvent(v RunStepStreamEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepStreamEvent performs a merge with any union data inside the ExtendedAssistantStreamEvent, using the provided RunStepStreamEvent
func (t *ExtendedAssistantStreamEvent) MergeRunStepStreamEvent(v RunStepStreamEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageStreamEvent returns the union data inside the ExtendedAssistantStreamEvent as a MessageStreamEvent
func (t ExtendedAssistantStreamEvent) AsMessageStreamEvent() (MessageStreamEvent, error) {
	var body MessageStreamEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageStreamEvent overwrites any union data inside the ExtendedAssistantStreamEvent as the provided MessageStreamEvent
func (t *ExtendedAssistantStreamEvent) FromMessageStreamEvent(v MessageStreamEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageStreamEvent performs a merge with any union data inside the ExtendedAssistantStreamEvent, using the provided MessageStreamEvent
func (t *ExtendedAssistantStreamEvent) MergeMessageStreamEvent(v MessageStreamEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorEvent returns the union data inside the ExtendedAssistantStreamEvent as a ErrorEvent
func (t ExtendedAssistantStreamEvent) AsErrorEvent() (ErrorEvent, error) {
	var body ErrorEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorEvent overwrites any union data inside the ExtendedAssistantStreamEvent as the provided ErrorEvent
func (t *ExtendedAssistantStreamEvent) FromErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorEvent performs a merge with any union data inside the ExtendedAssistantStreamEvent, using the provided ErrorEvent
func (t *ExtendedAssistantStreamEvent) MergeErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDoneEvent returns the union data inside the ExtendedAssistantStreamEvent as a DoneEvent
func (t ExtendedAssistantStreamEvent) AsDoneEvent() (DoneEvent, error) {
	var body DoneEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDoneEvent overwrites any union data inside the ExtendedAssistantStreamEvent as the provided DoneEvent
func (t *ExtendedAssistantStreamEvent) FromDoneEvent(v DoneEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDoneEvent performs a merge with any union data inside the ExtendedAssistantStreamEvent, using the provided DoneEvent
func (t *ExtendedAssistantStreamEvent) MergeDoneEvent(v DoneEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedAssistantStreamEvent) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedAssistantStreamEvent) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsChatCompletionRequestSystemMessage returns the union data inside the ExtendedChatCompletionRequestMessage as a ChatCompletionRequestSystemMessage
func (t ExtendedChatCompletionRequestMessage) AsChatCompletionRequestSystemMessage() (ChatCompletionRequestSystemMessage, error) {
	var body ChatCompletionRequestSystemMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestSystemMessage overwrites any union data inside the ExtendedChatCompletionRequestMessage as the provided ChatCompletionRequestSystemMessage
func (t *ExtendedChatCompletionRequestMessage) FromChatCompletionRequestSystemMessage(v ChatCompletionRequestSystemMessage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestSystemMessage performs a merge with any union data inside the ExtendedChatCompletionRequestMessage, using the provided ChatCompletionRequestSystemMessage
func (t *ExtendedChatCompletionRequestMessage) MergeChatCompletionRequestSystemMessage(v ChatCompletionRequestSystemMessage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatCompletionRequestUserMessage returns the union data inside the ExtendedChatCompletionRequestMessage as a ChatCompletionRequestUserMessage
func (t ExtendedChatCompletionRequestMessage) AsChatCompletionRequestUserMessage() (ChatCompletionRequestUserMessage, error) {
	var body ChatCompletionRequestUserMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestUserMessage overwrites any union data inside the ExtendedChatCompletionRequestMessage as the provided ChatCompletionRequestUserMessage
func (t *ExtendedChatCompletionRequestMessage) FromChatCompletionRequestUserMessage(v ChatCompletionRequestUserMessage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestUserMessage performs a merge with any union data inside the ExtendedChatCompletionRequestMessage, using the provided ChatCompletionRequestUserMessage
func (t *ExtendedChatCompletionRequestMessage) MergeChatCompletionRequestUserMessage(v ChatCompletionRequestUserMessage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatCompletionRequestAssistantMessage returns the union data inside the ExtendedChatCompletionRequestMessage as a ChatCompletionRequestAssistantMessage
func (t ExtendedChatCompletionRequestMessage) AsChatCompletionRequestAssistantMessage() (ChatCompletionRequestAssistantMessage, error) {
	var body ChatCompletionRequestAssistantMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestAssistantMessage overwrites any union data inside the ExtendedChatCompletionRequestMessage as the provided ChatCompletionRequestAssistantMessage
func (t *ExtendedChatCompletionRequestMessage) FromChatCompletionRequestAssistantMessage(v ChatCompletionRequestAssistantMessage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestAssistantMessage performs a merge with any union data inside the ExtendedChatCompletionRequestMessage, using the provided ChatCompletionRequestAssistantMessage
func (t *ExtendedChatCompletionRequestMessage) MergeChatCompletionRequestAssistantMessage(v ChatCompletionRequestAssistantMessage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatCompletionRequestToolMessage returns the union data inside the ExtendedChatCompletionRequestMessage as a ChatCompletionRequestToolMessage
func (t ExtendedChatCompletionRequestMessage) AsChatCompletionRequestToolMessage() (ChatCompletionRequestToolMessage, error) {
	var body ChatCompletionRequestToolMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestToolMessage overwrites any union data inside the ExtendedChatCompletionRequestMessage as the provided ChatCompletionRequestToolMessage
func (t *ExtendedChatCompletionRequestMessage) FromChatCompletionRequestToolMessage(v ChatCompletionRequestToolMessage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestToolMessage performs a merge with any union data inside the ExtendedChatCompletionRequestMessage, using the provided ChatCompletionRequestToolMessage
func (t *ExtendedChatCompletionRequestMessage) MergeChatCompletionRequestToolMessage(v ChatCompletionRequestToolMessage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatCompletionRequestFunctionMessage returns the union data inside the ExtendedChatCompletionRequestMessage as a ChatCompletionRequestFunctionMessage
func (t ExtendedChatCompletionRequestMessage) AsChatCompletionRequestFunctionMessage() (ChatCompletionRequestFunctionMessage, error) {
	var body ChatCompletionRequestFunctionMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestFunctionMessage overwrites any union data inside the ExtendedChatCompletionRequestMessage as the provided ChatCompletionRequestFunctionMessage
func (t *ExtendedChatCompletionRequestMessage) FromChatCompletionRequestFunctionMessage(v ChatCompletionRequestFunctionMessage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestFunctionMessage performs a merge with any union data inside the ExtendedChatCompletionRequestMessage, using the provided ChatCompletionRequestFunctionMessage
func (t *ExtendedChatCompletionRequestMessage) MergeChatCompletionRequestFunctionMessage(v ChatCompletionRequestFunctionMessage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedChatCompletionRequestMessage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedChatCompletionRequestMessage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsChatCompletionRequestMessageContentPartText returns the union data inside the ExtendedChatCompletionRequestMessageContentPart as a ChatCompletionRequestMessageContentPartText
func (t ExtendedChatCompletionRequestMessageContentPart) AsChatCompletionRequestMessageContentPartText() (ChatCompletionRequestMessageContentPartText, error) {
	var body ChatCompletionRequestMessageContentPartText
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestMessageContentPartText overwrites any union data inside the ExtendedChatCompletionRequestMessageContentPart as the provided ChatCompletionRequestMessageContentPartText
func (t *ExtendedChatCompletionRequestMessageContentPart) FromChatCompletionRequestMessageContentPartText(v ChatCompletionRequestMessageContentPartText) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestMessageContentPartText performs a merge with any union data inside the ExtendedChatCompletionRequestMessageContentPart, using the provided ChatCompletionRequestMessageContentPartText
func (t *ExtendedChatCompletionRequestMessageContentPart) MergeChatCompletionRequestMessageContentPartText(v ChatCompletionRequestMessageContentPartText) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatCompletionRequestMessageContentPartImage returns the union data inside the ExtendedChatCompletionRequestMessageContentPart as a ChatCompletionRequestMessageContentPartImage
func (t ExtendedChatCompletionRequestMessageContentPart) AsChatCompletionRequestMessageContentPartImage() (ChatCompletionRequestMessageContentPartImage, error) {
	var body ChatCompletionRequestMessageContentPartImage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestMessageContentPartImage overwrites any union data inside the ExtendedChatCompletionRequestMessageContentPart as the provided ChatCompletionRequestMessageContentPartImage
func (t *ExtendedChatCompletionRequestMessageContentPart) FromChatCompletionRequestMessageContentPartImage(v ChatCompletionRequestMessageContentPartImage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestMessageContentPartImage performs a merge with any union data inside the ExtendedChatCompletionRequestMessageContentPart, using the provided ChatCompletionRequestMessageContentPartImage
func (t *ExtendedChatCompletionRequestMessageContentPart) MergeChatCompletionRequestMessageContentPartImage(v ChatCompletionRequestMessageContentPartImage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedChatCompletionRequestMessageContentPart) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedChatCompletionRequestMessageContentPart) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedChatCompletionRequestUserMessageContent0 returns the union data inside the ExtendedChatCompletionRequestUserMessage_Content as a ExtendedChatCompletionRequestUserMessageContent0
func (t ExtendedChatCompletionRequestUserMessage_Content) AsExtendedChatCompletionRequestUserMessageContent0() (ExtendedChatCompletionRequestUserMessageContent0, error) {
	var body ExtendedChatCompletionRequestUserMessageContent0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedChatCompletionRequestUserMessageContent0 overwrites any union data inside the ExtendedChatCompletionRequestUserMessage_Content as the provided ExtendedChatCompletionRequestUserMessageContent0
func (t *ExtendedChatCompletionRequestUserMessage_Content) FromExtendedChatCompletionRequestUserMessageContent0(v ExtendedChatCompletionRequestUserMessageContent0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedChatCompletionRequestUserMessageContent0 performs a merge with any union data inside the ExtendedChatCompletionRequestUserMessage_Content, using the provided ExtendedChatCompletionRequestUserMessageContent0
func (t *ExtendedChatCompletionRequestUserMessage_Content) MergeExtendedChatCompletionRequestUserMessageContent0(v ExtendedChatCompletionRequestUserMessageContent0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedChatCompletionRequestUserMessageContent1 returns the union data inside the ExtendedChatCompletionRequestUserMessage_Content as a ExtendedChatCompletionRequestUserMessageContent1
func (t ExtendedChatCompletionRequestUserMessage_Content) AsExtendedChatCompletionRequestUserMessageContent1() (ExtendedChatCompletionRequestUserMessageContent1, error) {
	var body ExtendedChatCompletionRequestUserMessageContent1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedChatCompletionRequestUserMessageContent1 overwrites any union data inside the ExtendedChatCompletionRequestUserMessage_Content as the provided ExtendedChatCompletionRequestUserMessageContent1
func (t *ExtendedChatCompletionRequestUserMessage_Content) FromExtendedChatCompletionRequestUserMessageContent1(v ExtendedChatCompletionRequestUserMessageContent1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedChatCompletionRequestUserMessageContent1 performs a merge with any union data inside the ExtendedChatCompletionRequestUserMessage_Content, using the provided ExtendedChatCompletionRequestUserMessageContent1
func (t *ExtendedChatCompletionRequestUserMessage_Content) MergeExtendedChatCompletionRequestUserMessageContent1(v ExtendedChatCompletionRequestUserMessageContent1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedChatCompletionRequestUserMessage_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedChatCompletionRequestUserMessage_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedChatCompletionToolChoiceOption0 returns the union data inside the ExtendedChatCompletionToolChoiceOption as a ExtendedChatCompletionToolChoiceOption0
func (t ExtendedChatCompletionToolChoiceOption) AsExtendedChatCompletionToolChoiceOption0() (ExtendedChatCompletionToolChoiceOption0, error) {
	var body ExtendedChatCompletionToolChoiceOption0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedChatCompletionToolChoiceOption0 overwrites any union data inside the ExtendedChatCompletionToolChoiceOption as the provided ExtendedChatCompletionToolChoiceOption0
func (t *ExtendedChatCompletionToolChoiceOption) FromExtendedChatCompletionToolChoiceOption0(v ExtendedChatCompletionToolChoiceOption0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedChatCompletionToolChoiceOption0 performs a merge with any union data inside the ExtendedChatCompletionToolChoiceOption, using the provided ExtendedChatCompletionToolChoiceOption0
func (t *ExtendedChatCompletionToolChoiceOption) MergeExtendedChatCompletionToolChoiceOption0(v ExtendedChatCompletionToolChoiceOption0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatCompletionNamedToolChoice returns the union data inside the ExtendedChatCompletionToolChoiceOption as a ChatCompletionNamedToolChoice
func (t ExtendedChatCompletionToolChoiceOption) AsChatCompletionNamedToolChoice() (ChatCompletionNamedToolChoice, error) {
	var body ChatCompletionNamedToolChoice
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionNamedToolChoice overwrites any union data inside the ExtendedChatCompletionToolChoiceOption as the provided ChatCompletionNamedToolChoice
func (t *ExtendedChatCompletionToolChoiceOption) FromChatCompletionNamedToolChoice(v ChatCompletionNamedToolChoice) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionNamedToolChoice performs a merge with any union data inside the ExtendedChatCompletionToolChoiceOption, using the provided ChatCompletionNamedToolChoice
func (t *ExtendedChatCompletionToolChoiceOption) MergeChatCompletionNamedToolChoice(v ChatCompletionNamedToolChoice) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedChatCompletionToolChoiceOption) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedChatCompletionToolChoiceOption) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateAssistantRequestModel0 returns the union data inside the ExtendedCreateAssistantRequest_Model as a ExtendedCreateAssistantRequestModel0
func (t ExtendedCreateAssistantRequest_Model) AsExtendedCreateAssistantRequestModel0() (ExtendedCreateAssistantRequestModel0, error) {
	var body ExtendedCreateAssistantRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateAssistantRequestModel0 overwrites any union data inside the ExtendedCreateAssistantRequest_Model as the provided ExtendedCreateAssistantRequestModel0
func (t *ExtendedCreateAssistantRequest_Model) FromExtendedCreateAssistantRequestModel0(v ExtendedCreateAssistantRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateAssistantRequestModel0 performs a merge with any union data inside the ExtendedCreateAssistantRequest_Model, using the provided ExtendedCreateAssistantRequestModel0
func (t *ExtendedCreateAssistantRequest_Model) MergeExtendedCreateAssistantRequestModel0(v ExtendedCreateAssistantRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateAssistantRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateAssistantRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAssistantToolsCode returns the union data inside the ExtendedCreateAssistantRequest_Tools_Item as a AssistantToolsCode
func (t ExtendedCreateAssistantRequest_Tools_Item) AsAssistantToolsCode() (AssistantToolsCode, error) {
	var body AssistantToolsCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsCode overwrites any union data inside the ExtendedCreateAssistantRequest_Tools_Item as the provided AssistantToolsCode
func (t *ExtendedCreateAssistantRequest_Tools_Item) FromAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsCode performs a merge with any union data inside the ExtendedCreateAssistantRequest_Tools_Item, using the provided AssistantToolsCode
func (t *ExtendedCreateAssistantRequest_Tools_Item) MergeAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsRetrieval returns the union data inside the ExtendedCreateAssistantRequest_Tools_Item as a AssistantToolsRetrieval
func (t ExtendedCreateAssistantRequest_Tools_Item) AsAssistantToolsRetrieval() (AssistantToolsRetrieval, error) {
	var body AssistantToolsRetrieval
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsRetrieval overwrites any union data inside the ExtendedCreateAssistantRequest_Tools_Item as the provided AssistantToolsRetrieval
func (t *ExtendedCreateAssistantRequest_Tools_Item) FromAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsRetrieval performs a merge with any union data inside the ExtendedCreateAssistantRequest_Tools_Item, using the provided AssistantToolsRetrieval
func (t *ExtendedCreateAssistantRequest_Tools_Item) MergeAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsFunction returns the union data inside the ExtendedCreateAssistantRequest_Tools_Item as a AssistantToolsFunction
func (t ExtendedCreateAssistantRequest_Tools_Item) AsAssistantToolsFunction() (AssistantToolsFunction, error) {
	var body AssistantToolsFunction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsFunction overwrites any union data inside the ExtendedCreateAssistantRequest_Tools_Item as the provided AssistantToolsFunction
func (t *ExtendedCreateAssistantRequest_Tools_Item) FromAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsFunction performs a merge with any union data inside the ExtendedCreateAssistantRequest_Tools_Item, using the provided AssistantToolsFunction
func (t *ExtendedCreateAssistantRequest_Tools_Item) MergeAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateAssistantRequest_Tools_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateAssistantRequest_Tools_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateChatCompletionRequestFunctionCall0 returns the union data inside the ExtendedCreateChatCompletionRequest_FunctionCall as a ExtendedCreateChatCompletionRequestFunctionCall0
func (t ExtendedCreateChatCompletionRequest_FunctionCall) AsExtendedCreateChatCompletionRequestFunctionCall0() (ExtendedCreateChatCompletionRequestFunctionCall0, error) {
	var body ExtendedCreateChatCompletionRequestFunctionCall0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateChatCompletionRequestFunctionCall0 overwrites any union data inside the ExtendedCreateChatCompletionRequest_FunctionCall as the provided ExtendedCreateChatCompletionRequestFunctionCall0
func (t *ExtendedCreateChatCompletionRequest_FunctionCall) FromExtendedCreateChatCompletionRequestFunctionCall0(v ExtendedCreateChatCompletionRequestFunctionCall0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateChatCompletionRequestFunctionCall0 performs a merge with any union data inside the ExtendedCreateChatCompletionRequest_FunctionCall, using the provided ExtendedCreateChatCompletionRequestFunctionCall0
func (t *ExtendedCreateChatCompletionRequest_FunctionCall) MergeExtendedCreateChatCompletionRequestFunctionCall0(v ExtendedCreateChatCompletionRequestFunctionCall0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatCompletionFunctionCallOption returns the union data inside the ExtendedCreateChatCompletionRequest_FunctionCall as a ChatCompletionFunctionCallOption
func (t ExtendedCreateChatCompletionRequest_FunctionCall) AsChatCompletionFunctionCallOption() (ChatCompletionFunctionCallOption, error) {
	var body ChatCompletionFunctionCallOption
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionFunctionCallOption overwrites any union data inside the ExtendedCreateChatCompletionRequest_FunctionCall as the provided ChatCompletionFunctionCallOption
func (t *ExtendedCreateChatCompletionRequest_FunctionCall) FromChatCompletionFunctionCallOption(v ChatCompletionFunctionCallOption) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionFunctionCallOption performs a merge with any union data inside the ExtendedCreateChatCompletionRequest_FunctionCall, using the provided ChatCompletionFunctionCallOption
func (t *ExtendedCreateChatCompletionRequest_FunctionCall) MergeChatCompletionFunctionCallOption(v ChatCompletionFunctionCallOption) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateChatCompletionRequest_FunctionCall) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateChatCompletionRequest_FunctionCall) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateChatCompletionRequestModel0 returns the union data inside the ExtendedCreateChatCompletionRequest_Model as a ExtendedCreateChatCompletionRequestModel0
func (t ExtendedCreateChatCompletionRequest_Model) AsExtendedCreateChatCompletionRequestModel0() (ExtendedCreateChatCompletionRequestModel0, error) {
	var body ExtendedCreateChatCompletionRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateChatCompletionRequestModel0 overwrites any union data inside the ExtendedCreateChatCompletionRequest_Model as the provided ExtendedCreateChatCompletionRequestModel0
func (t *ExtendedCreateChatCompletionRequest_Model) FromExtendedCreateChatCompletionRequestModel0(v ExtendedCreateChatCompletionRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateChatCompletionRequestModel0 performs a merge with any union data inside the ExtendedCreateChatCompletionRequest_Model, using the provided ExtendedCreateChatCompletionRequestModel0
func (t *ExtendedCreateChatCompletionRequest_Model) MergeExtendedCreateChatCompletionRequestModel0(v ExtendedCreateChatCompletionRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateChatCompletionRequestModel1 returns the union data inside the ExtendedCreateChatCompletionRequest_Model as a ExtendedCreateChatCompletionRequestModel1
func (t ExtendedCreateChatCompletionRequest_Model) AsExtendedCreateChatCompletionRequestModel1() (ExtendedCreateChatCompletionRequestModel1, error) {
	var body ExtendedCreateChatCompletionRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateChatCompletionRequestModel1 overwrites any union data inside the ExtendedCreateChatCompletionRequest_Model as the provided ExtendedCreateChatCompletionRequestModel1
func (t *ExtendedCreateChatCompletionRequest_Model) FromExtendedCreateChatCompletionRequestModel1(v ExtendedCreateChatCompletionRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateChatCompletionRequestModel1 performs a merge with any union data inside the ExtendedCreateChatCompletionRequest_Model, using the provided ExtendedCreateChatCompletionRequestModel1
func (t *ExtendedCreateChatCompletionRequest_Model) MergeExtendedCreateChatCompletionRequestModel1(v ExtendedCreateChatCompletionRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateChatCompletionRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateChatCompletionRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateChatCompletionRequestStop0 returns the union data inside the ExtendedCreateChatCompletionRequest_Stop as a ExtendedCreateChatCompletionRequestStop0
func (t ExtendedCreateChatCompletionRequest_Stop) AsExtendedCreateChatCompletionRequestStop0() (ExtendedCreateChatCompletionRequestStop0, error) {
	var body ExtendedCreateChatCompletionRequestStop0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateChatCompletionRequestStop0 overwrites any union data inside the ExtendedCreateChatCompletionRequest_Stop as the provided ExtendedCreateChatCompletionRequestStop0
func (t *ExtendedCreateChatCompletionRequest_Stop) FromExtendedCreateChatCompletionRequestStop0(v ExtendedCreateChatCompletionRequestStop0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateChatCompletionRequestStop0 performs a merge with any union data inside the ExtendedCreateChatCompletionRequest_Stop, using the provided ExtendedCreateChatCompletionRequestStop0
func (t *ExtendedCreateChatCompletionRequest_Stop) MergeExtendedCreateChatCompletionRequestStop0(v ExtendedCreateChatCompletionRequestStop0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateChatCompletionRequestStop1 returns the union data inside the ExtendedCreateChatCompletionRequest_Stop as a ExtendedCreateChatCompletionRequestStop1
func (t ExtendedCreateChatCompletionRequest_Stop) AsExtendedCreateChatCompletionRequestStop1() (ExtendedCreateChatCompletionRequestStop1, error) {
	var body ExtendedCreateChatCompletionRequestStop1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateChatCompletionRequestStop1 overwrites any union data inside the ExtendedCreateChatCompletionRequest_Stop as the provided ExtendedCreateChatCompletionRequestStop1
func (t *ExtendedCreateChatCompletionRequest_Stop) FromExtendedCreateChatCompletionRequestStop1(v ExtendedCreateChatCompletionRequestStop1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateChatCompletionRequestStop1 performs a merge with any union data inside the ExtendedCreateChatCompletionRequest_Stop, using the provided ExtendedCreateChatCompletionRequestStop1
func (t *ExtendedCreateChatCompletionRequest_Stop) MergeExtendedCreateChatCompletionRequestStop1(v ExtendedCreateChatCompletionRequestStop1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateChatCompletionRequest_Stop) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateChatCompletionRequest_Stop) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateCompletionRequestModel0 returns the union data inside the ExtendedCreateCompletionRequest_Model as a ExtendedCreateCompletionRequestModel0
func (t ExtendedCreateCompletionRequest_Model) AsExtendedCreateCompletionRequestModel0() (ExtendedCreateCompletionRequestModel0, error) {
	var body ExtendedCreateCompletionRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateCompletionRequestModel0 overwrites any union data inside the ExtendedCreateCompletionRequest_Model as the provided ExtendedCreateCompletionRequestModel0
func (t *ExtendedCreateCompletionRequest_Model) FromExtendedCreateCompletionRequestModel0(v ExtendedCreateCompletionRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateCompletionRequestModel0 performs a merge with any union data inside the ExtendedCreateCompletionRequest_Model, using the provided ExtendedCreateCompletionRequestModel0
func (t *ExtendedCreateCompletionRequest_Model) MergeExtendedCreateCompletionRequestModel0(v ExtendedCreateCompletionRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateCompletionRequestModel1 returns the union data inside the ExtendedCreateCompletionRequest_Model as a ExtendedCreateCompletionRequestModel1
func (t ExtendedCreateCompletionRequest_Model) AsExtendedCreateCompletionRequestModel1() (ExtendedCreateCompletionRequestModel1, error) {
	var body ExtendedCreateCompletionRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateCompletionRequestModel1 overwrites any union data inside the ExtendedCreateCompletionRequest_Model as the provided ExtendedCreateCompletionRequestModel1
func (t *ExtendedCreateCompletionRequest_Model) FromExtendedCreateCompletionRequestModel1(v ExtendedCreateCompletionRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateCompletionRequestModel1 performs a merge with any union data inside the ExtendedCreateCompletionRequest_Model, using the provided ExtendedCreateCompletionRequestModel1
func (t *ExtendedCreateCompletionRequest_Model) MergeExtendedCreateCompletionRequestModel1(v ExtendedCreateCompletionRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateCompletionRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateCompletionRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateCompletionRequestPrompt0 returns the union data inside the ExtendedCreateCompletionRequest_Prompt as a ExtendedCreateCompletionRequestPrompt0
func (t ExtendedCreateCompletionRequest_Prompt) AsExtendedCreateCompletionRequestPrompt0() (ExtendedCreateCompletionRequestPrompt0, error) {
	var body ExtendedCreateCompletionRequestPrompt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateCompletionRequestPrompt0 overwrites any union data inside the ExtendedCreateCompletionRequest_Prompt as the provided ExtendedCreateCompletionRequestPrompt0
func (t *ExtendedCreateCompletionRequest_Prompt) FromExtendedCreateCompletionRequestPrompt0(v ExtendedCreateCompletionRequestPrompt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateCompletionRequestPrompt0 performs a merge with any union data inside the ExtendedCreateCompletionRequest_Prompt, using the provided ExtendedCreateCompletionRequestPrompt0
func (t *ExtendedCreateCompletionRequest_Prompt) MergeExtendedCreateCompletionRequestPrompt0(v ExtendedCreateCompletionRequestPrompt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateCompletionRequestPrompt1 returns the union data inside the ExtendedCreateCompletionRequest_Prompt as a ExtendedCreateCompletionRequestPrompt1
func (t ExtendedCreateCompletionRequest_Prompt) AsExtendedCreateCompletionRequestPrompt1() (ExtendedCreateCompletionRequestPrompt1, error) {
	var body ExtendedCreateCompletionRequestPrompt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateCompletionRequestPrompt1 overwrites any union data inside the ExtendedCreateCompletionRequest_Prompt as the provided ExtendedCreateCompletionRequestPrompt1
func (t *ExtendedCreateCompletionRequest_Prompt) FromExtendedCreateCompletionRequestPrompt1(v ExtendedCreateCompletionRequestPrompt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateCompletionRequestPrompt1 performs a merge with any union data inside the ExtendedCreateCompletionRequest_Prompt, using the provided ExtendedCreateCompletionRequestPrompt1
func (t *ExtendedCreateCompletionRequest_Prompt) MergeExtendedCreateCompletionRequestPrompt1(v ExtendedCreateCompletionRequestPrompt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateCompletionRequestPrompt2 returns the union data inside the ExtendedCreateCompletionRequest_Prompt as a ExtendedCreateCompletionRequestPrompt2
func (t ExtendedCreateCompletionRequest_Prompt) AsExtendedCreateCompletionRequestPrompt2() (ExtendedCreateCompletionRequestPrompt2, error) {
	var body ExtendedCreateCompletionRequestPrompt2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateCompletionRequestPrompt2 overwrites any union data inside the ExtendedCreateCompletionRequest_Prompt as the provided ExtendedCreateCompletionRequestPrompt2
func (t *ExtendedCreateCompletionRequest_Prompt) FromExtendedCreateCompletionRequestPrompt2(v ExtendedCreateCompletionRequestPrompt2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateCompletionRequestPrompt2 performs a merge with any union data inside the ExtendedCreateCompletionRequest_Prompt, using the provided ExtendedCreateCompletionRequestPrompt2
func (t *ExtendedCreateCompletionRequest_Prompt) MergeExtendedCreateCompletionRequestPrompt2(v ExtendedCreateCompletionRequestPrompt2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateCompletionRequestPrompt3 returns the union data inside the ExtendedCreateCompletionRequest_Prompt as a ExtendedCreateCompletionRequestPrompt3
func (t ExtendedCreateCompletionRequest_Prompt) AsExtendedCreateCompletionRequestPrompt3() (ExtendedCreateCompletionRequestPrompt3, error) {
	var body ExtendedCreateCompletionRequestPrompt3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateCompletionRequestPrompt3 overwrites any union data inside the ExtendedCreateCompletionRequest_Prompt as the provided ExtendedCreateCompletionRequestPrompt3
func (t *ExtendedCreateCompletionRequest_Prompt) FromExtendedCreateCompletionRequestPrompt3(v ExtendedCreateCompletionRequestPrompt3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateCompletionRequestPrompt3 performs a merge with any union data inside the ExtendedCreateCompletionRequest_Prompt, using the provided ExtendedCreateCompletionRequestPrompt3
func (t *ExtendedCreateCompletionRequest_Prompt) MergeExtendedCreateCompletionRequestPrompt3(v ExtendedCreateCompletionRequestPrompt3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateCompletionRequest_Prompt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateCompletionRequest_Prompt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateCompletionRequestStop0 returns the union data inside the ExtendedCreateCompletionRequest_Stop as a ExtendedCreateCompletionRequestStop0
func (t ExtendedCreateCompletionRequest_Stop) AsExtendedCreateCompletionRequestStop0() (ExtendedCreateCompletionRequestStop0, error) {
	var body ExtendedCreateCompletionRequestStop0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateCompletionRequestStop0 overwrites any union data inside the ExtendedCreateCompletionRequest_Stop as the provided ExtendedCreateCompletionRequestStop0
func (t *ExtendedCreateCompletionRequest_Stop) FromExtendedCreateCompletionRequestStop0(v ExtendedCreateCompletionRequestStop0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateCompletionRequestStop0 performs a merge with any union data inside the ExtendedCreateCompletionRequest_Stop, using the provided ExtendedCreateCompletionRequestStop0
func (t *ExtendedCreateCompletionRequest_Stop) MergeExtendedCreateCompletionRequestStop0(v ExtendedCreateCompletionRequestStop0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateCompletionRequestStop1 returns the union data inside the ExtendedCreateCompletionRequest_Stop as a ExtendedCreateCompletionRequestStop1
func (t ExtendedCreateCompletionRequest_Stop) AsExtendedCreateCompletionRequestStop1() (ExtendedCreateCompletionRequestStop1, error) {
	var body ExtendedCreateCompletionRequestStop1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateCompletionRequestStop1 overwrites any union data inside the ExtendedCreateCompletionRequest_Stop as the provided ExtendedCreateCompletionRequestStop1
func (t *ExtendedCreateCompletionRequest_Stop) FromExtendedCreateCompletionRequestStop1(v ExtendedCreateCompletionRequestStop1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateCompletionRequestStop1 performs a merge with any union data inside the ExtendedCreateCompletionRequest_Stop, using the provided ExtendedCreateCompletionRequestStop1
func (t *ExtendedCreateCompletionRequest_Stop) MergeExtendedCreateCompletionRequestStop1(v ExtendedCreateCompletionRequestStop1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateCompletionRequest_Stop) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateCompletionRequest_Stop) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateEmbeddingRequestInput0 returns the union data inside the ExtendedCreateEmbeddingRequest_Input as a ExtendedCreateEmbeddingRequestInput0
func (t ExtendedCreateEmbeddingRequest_Input) AsExtendedCreateEmbeddingRequestInput0() (ExtendedCreateEmbeddingRequestInput0, error) {
	var body ExtendedCreateEmbeddingRequestInput0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateEmbeddingRequestInput0 overwrites any union data inside the ExtendedCreateEmbeddingRequest_Input as the provided ExtendedCreateEmbeddingRequestInput0
func (t *ExtendedCreateEmbeddingRequest_Input) FromExtendedCreateEmbeddingRequestInput0(v ExtendedCreateEmbeddingRequestInput0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateEmbeddingRequestInput0 performs a merge with any union data inside the ExtendedCreateEmbeddingRequest_Input, using the provided ExtendedCreateEmbeddingRequestInput0
func (t *ExtendedCreateEmbeddingRequest_Input) MergeExtendedCreateEmbeddingRequestInput0(v ExtendedCreateEmbeddingRequestInput0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateEmbeddingRequestInput1 returns the union data inside the ExtendedCreateEmbeddingRequest_Input as a ExtendedCreateEmbeddingRequestInput1
func (t ExtendedCreateEmbeddingRequest_Input) AsExtendedCreateEmbeddingRequestInput1() (ExtendedCreateEmbeddingRequestInput1, error) {
	var body ExtendedCreateEmbeddingRequestInput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateEmbeddingRequestInput1 overwrites any union data inside the ExtendedCreateEmbeddingRequest_Input as the provided ExtendedCreateEmbeddingRequestInput1
func (t *ExtendedCreateEmbeddingRequest_Input) FromExtendedCreateEmbeddingRequestInput1(v ExtendedCreateEmbeddingRequestInput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateEmbeddingRequestInput1 performs a merge with any union data inside the ExtendedCreateEmbeddingRequest_Input, using the provided ExtendedCreateEmbeddingRequestInput1
func (t *ExtendedCreateEmbeddingRequest_Input) MergeExtendedCreateEmbeddingRequestInput1(v ExtendedCreateEmbeddingRequestInput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateEmbeddingRequestInput2 returns the union data inside the ExtendedCreateEmbeddingRequest_Input as a ExtendedCreateEmbeddingRequestInput2
func (t ExtendedCreateEmbeddingRequest_Input) AsExtendedCreateEmbeddingRequestInput2() (ExtendedCreateEmbeddingRequestInput2, error) {
	var body ExtendedCreateEmbeddingRequestInput2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateEmbeddingRequestInput2 overwrites any union data inside the ExtendedCreateEmbeddingRequest_Input as the provided ExtendedCreateEmbeddingRequestInput2
func (t *ExtendedCreateEmbeddingRequest_Input) FromExtendedCreateEmbeddingRequestInput2(v ExtendedCreateEmbeddingRequestInput2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateEmbeddingRequestInput2 performs a merge with any union data inside the ExtendedCreateEmbeddingRequest_Input, using the provided ExtendedCreateEmbeddingRequestInput2
func (t *ExtendedCreateEmbeddingRequest_Input) MergeExtendedCreateEmbeddingRequestInput2(v ExtendedCreateEmbeddingRequestInput2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateEmbeddingRequestInput3 returns the union data inside the ExtendedCreateEmbeddingRequest_Input as a ExtendedCreateEmbeddingRequestInput3
func (t ExtendedCreateEmbeddingRequest_Input) AsExtendedCreateEmbeddingRequestInput3() (ExtendedCreateEmbeddingRequestInput3, error) {
	var body ExtendedCreateEmbeddingRequestInput3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateEmbeddingRequestInput3 overwrites any union data inside the ExtendedCreateEmbeddingRequest_Input as the provided ExtendedCreateEmbeddingRequestInput3
func (t *ExtendedCreateEmbeddingRequest_Input) FromExtendedCreateEmbeddingRequestInput3(v ExtendedCreateEmbeddingRequestInput3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateEmbeddingRequestInput3 performs a merge with any union data inside the ExtendedCreateEmbeddingRequest_Input, using the provided ExtendedCreateEmbeddingRequestInput3
func (t *ExtendedCreateEmbeddingRequest_Input) MergeExtendedCreateEmbeddingRequestInput3(v ExtendedCreateEmbeddingRequestInput3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateEmbeddingRequest_Input) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateEmbeddingRequest_Input) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateEmbeddingRequestModel0 returns the union data inside the ExtendedCreateEmbeddingRequest_Model as a ExtendedCreateEmbeddingRequestModel0
func (t ExtendedCreateEmbeddingRequest_Model) AsExtendedCreateEmbeddingRequestModel0() (ExtendedCreateEmbeddingRequestModel0, error) {
	var body ExtendedCreateEmbeddingRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateEmbeddingRequestModel0 overwrites any union data inside the ExtendedCreateEmbeddingRequest_Model as the provided ExtendedCreateEmbeddingRequestModel0
func (t *ExtendedCreateEmbeddingRequest_Model) FromExtendedCreateEmbeddingRequestModel0(v ExtendedCreateEmbeddingRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateEmbeddingRequestModel0 performs a merge with any union data inside the ExtendedCreateEmbeddingRequest_Model, using the provided ExtendedCreateEmbeddingRequestModel0
func (t *ExtendedCreateEmbeddingRequest_Model) MergeExtendedCreateEmbeddingRequestModel0(v ExtendedCreateEmbeddingRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateEmbeddingRequestModel1 returns the union data inside the ExtendedCreateEmbeddingRequest_Model as a ExtendedCreateEmbeddingRequestModel1
func (t ExtendedCreateEmbeddingRequest_Model) AsExtendedCreateEmbeddingRequestModel1() (ExtendedCreateEmbeddingRequestModel1, error) {
	var body ExtendedCreateEmbeddingRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateEmbeddingRequestModel1 overwrites any union data inside the ExtendedCreateEmbeddingRequest_Model as the provided ExtendedCreateEmbeddingRequestModel1
func (t *ExtendedCreateEmbeddingRequest_Model) FromExtendedCreateEmbeddingRequestModel1(v ExtendedCreateEmbeddingRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateEmbeddingRequestModel1 performs a merge with any union data inside the ExtendedCreateEmbeddingRequest_Model, using the provided ExtendedCreateEmbeddingRequestModel1
func (t *ExtendedCreateEmbeddingRequest_Model) MergeExtendedCreateEmbeddingRequestModel1(v ExtendedCreateEmbeddingRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateEmbeddingRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateEmbeddingRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateFineTuningJobRequestHyperparametersBatchSize0 returns the union data inside the ExtendedCreateFineTuningJobRequest_Hyperparameters_BatchSize as a ExtendedCreateFineTuningJobRequestHyperparametersBatchSize0
func (t ExtendedCreateFineTuningJobRequest_Hyperparameters_BatchSize) AsExtendedCreateFineTuningJobRequestHyperparametersBatchSize0() (ExtendedCreateFineTuningJobRequestHyperparametersBatchSize0, error) {
	var body ExtendedCreateFineTuningJobRequestHyperparametersBatchSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateFineTuningJobRequestHyperparametersBatchSize0 overwrites any union data inside the ExtendedCreateFineTuningJobRequest_Hyperparameters_BatchSize as the provided ExtendedCreateFineTuningJobRequestHyperparametersBatchSize0
func (t *ExtendedCreateFineTuningJobRequest_Hyperparameters_BatchSize) FromExtendedCreateFineTuningJobRequestHyperparametersBatchSize0(v ExtendedCreateFineTuningJobRequestHyperparametersBatchSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateFineTuningJobRequestHyperparametersBatchSize0 performs a merge with any union data inside the ExtendedCreateFineTuningJobRequest_Hyperparameters_BatchSize, using the provided ExtendedCreateFineTuningJobRequestHyperparametersBatchSize0
func (t *ExtendedCreateFineTuningJobRequest_Hyperparameters_BatchSize) MergeExtendedCreateFineTuningJobRequestHyperparametersBatchSize0(v ExtendedCreateFineTuningJobRequestHyperparametersBatchSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateFineTuningJobRequestHyperparametersBatchSize1 returns the union data inside the ExtendedCreateFineTuningJobRequest_Hyperparameters_BatchSize as a ExtendedCreateFineTuningJobRequestHyperparametersBatchSize1
func (t ExtendedCreateFineTuningJobRequest_Hyperparameters_BatchSize) AsExtendedCreateFineTuningJobRequestHyperparametersBatchSize1() (ExtendedCreateFineTuningJobRequestHyperparametersBatchSize1, error) {
	var body ExtendedCreateFineTuningJobRequestHyperparametersBatchSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateFineTuningJobRequestHyperparametersBatchSize1 overwrites any union data inside the ExtendedCreateFineTuningJobRequest_Hyperparameters_BatchSize as the provided ExtendedCreateFineTuningJobRequestHyperparametersBatchSize1
func (t *ExtendedCreateFineTuningJobRequest_Hyperparameters_BatchSize) FromExtendedCreateFineTuningJobRequestHyperparametersBatchSize1(v ExtendedCreateFineTuningJobRequestHyperparametersBatchSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateFineTuningJobRequestHyperparametersBatchSize1 performs a merge with any union data inside the ExtendedCreateFineTuningJobRequest_Hyperparameters_BatchSize, using the provided ExtendedCreateFineTuningJobRequestHyperparametersBatchSize1
func (t *ExtendedCreateFineTuningJobRequest_Hyperparameters_BatchSize) MergeExtendedCreateFineTuningJobRequestHyperparametersBatchSize1(v ExtendedCreateFineTuningJobRequestHyperparametersBatchSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateFineTuningJobRequest_Hyperparameters_BatchSize) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateFineTuningJobRequest_Hyperparameters_BatchSize) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 returns the union data inside the ExtendedCreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier as a ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0
func (t ExtendedCreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier) AsExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0() (ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0, error) {
	var body ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 overwrites any union data inside the ExtendedCreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier as the provided ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0
func (t *ExtendedCreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier) FromExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0(v ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 performs a merge with any union data inside the ExtendedCreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier, using the provided ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0
func (t *ExtendedCreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier) MergeExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0(v ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1 returns the union data inside the ExtendedCreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier as a ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1
func (t ExtendedCreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier) AsExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1() (ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1, error) {
	var body ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1 overwrites any union data inside the ExtendedCreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier as the provided ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1
func (t *ExtendedCreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier) FromExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1(v ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1 performs a merge with any union data inside the ExtendedCreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier, using the provided ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1
func (t *ExtendedCreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier) MergeExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1(v ExtendedCreateFineTuningJobRequestHyperparametersLearningRateMultiplier1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateFineTuningJobRequest_Hyperparameters_LearningRateMultiplier) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateFineTuningJobRequestHyperparametersNEpochs0 returns the union data inside the ExtendedCreateFineTuningJobRequest_Hyperparameters_NEpochs as a ExtendedCreateFineTuningJobRequestHyperparametersNEpochs0
func (t ExtendedCreateFineTuningJobRequest_Hyperparameters_NEpochs) AsExtendedCreateFineTuningJobRequestHyperparametersNEpochs0() (ExtendedCreateFineTuningJobRequestHyperparametersNEpochs0, error) {
	var body ExtendedCreateFineTuningJobRequestHyperparametersNEpochs0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateFineTuningJobRequestHyperparametersNEpochs0 overwrites any union data inside the ExtendedCreateFineTuningJobRequest_Hyperparameters_NEpochs as the provided ExtendedCreateFineTuningJobRequestHyperparametersNEpochs0
func (t *ExtendedCreateFineTuningJobRequest_Hyperparameters_NEpochs) FromExtendedCreateFineTuningJobRequestHyperparametersNEpochs0(v ExtendedCreateFineTuningJobRequestHyperparametersNEpochs0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateFineTuningJobRequestHyperparametersNEpochs0 performs a merge with any union data inside the ExtendedCreateFineTuningJobRequest_Hyperparameters_NEpochs, using the provided ExtendedCreateFineTuningJobRequestHyperparametersNEpochs0
func (t *ExtendedCreateFineTuningJobRequest_Hyperparameters_NEpochs) MergeExtendedCreateFineTuningJobRequestHyperparametersNEpochs0(v ExtendedCreateFineTuningJobRequestHyperparametersNEpochs0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateFineTuningJobRequestHyperparametersNEpochs1 returns the union data inside the ExtendedCreateFineTuningJobRequest_Hyperparameters_NEpochs as a ExtendedCreateFineTuningJobRequestHyperparametersNEpochs1
func (t ExtendedCreateFineTuningJobRequest_Hyperparameters_NEpochs) AsExtendedCreateFineTuningJobRequestHyperparametersNEpochs1() (ExtendedCreateFineTuningJobRequestHyperparametersNEpochs1, error) {
	var body ExtendedCreateFineTuningJobRequestHyperparametersNEpochs1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateFineTuningJobRequestHyperparametersNEpochs1 overwrites any union data inside the ExtendedCreateFineTuningJobRequest_Hyperparameters_NEpochs as the provided ExtendedCreateFineTuningJobRequestHyperparametersNEpochs1
func (t *ExtendedCreateFineTuningJobRequest_Hyperparameters_NEpochs) FromExtendedCreateFineTuningJobRequestHyperparametersNEpochs1(v ExtendedCreateFineTuningJobRequestHyperparametersNEpochs1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateFineTuningJobRequestHyperparametersNEpochs1 performs a merge with any union data inside the ExtendedCreateFineTuningJobRequest_Hyperparameters_NEpochs, using the provided ExtendedCreateFineTuningJobRequestHyperparametersNEpochs1
func (t *ExtendedCreateFineTuningJobRequest_Hyperparameters_NEpochs) MergeExtendedCreateFineTuningJobRequestHyperparametersNEpochs1(v ExtendedCreateFineTuningJobRequestHyperparametersNEpochs1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateFineTuningJobRequest_Hyperparameters_NEpochs) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateFineTuningJobRequest_Hyperparameters_NEpochs) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateFineTuningJobRequestModel0 returns the union data inside the ExtendedCreateFineTuningJobRequest_Model as a ExtendedCreateFineTuningJobRequestModel0
func (t ExtendedCreateFineTuningJobRequest_Model) AsExtendedCreateFineTuningJobRequestModel0() (ExtendedCreateFineTuningJobRequestModel0, error) {
	var body ExtendedCreateFineTuningJobRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateFineTuningJobRequestModel0 overwrites any union data inside the ExtendedCreateFineTuningJobRequest_Model as the provided ExtendedCreateFineTuningJobRequestModel0
func (t *ExtendedCreateFineTuningJobRequest_Model) FromExtendedCreateFineTuningJobRequestModel0(v ExtendedCreateFineTuningJobRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateFineTuningJobRequestModel0 performs a merge with any union data inside the ExtendedCreateFineTuningJobRequest_Model, using the provided ExtendedCreateFineTuningJobRequestModel0
func (t *ExtendedCreateFineTuningJobRequest_Model) MergeExtendedCreateFineTuningJobRequestModel0(v ExtendedCreateFineTuningJobRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateFineTuningJobRequestModel1 returns the union data inside the ExtendedCreateFineTuningJobRequest_Model as a ExtendedCreateFineTuningJobRequestModel1
func (t ExtendedCreateFineTuningJobRequest_Model) AsExtendedCreateFineTuningJobRequestModel1() (ExtendedCreateFineTuningJobRequestModel1, error) {
	var body ExtendedCreateFineTuningJobRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateFineTuningJobRequestModel1 overwrites any union data inside the ExtendedCreateFineTuningJobRequest_Model as the provided ExtendedCreateFineTuningJobRequestModel1
func (t *ExtendedCreateFineTuningJobRequest_Model) FromExtendedCreateFineTuningJobRequestModel1(v ExtendedCreateFineTuningJobRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateFineTuningJobRequestModel1 performs a merge with any union data inside the ExtendedCreateFineTuningJobRequest_Model, using the provided ExtendedCreateFineTuningJobRequestModel1
func (t *ExtendedCreateFineTuningJobRequest_Model) MergeExtendedCreateFineTuningJobRequestModel1(v ExtendedCreateFineTuningJobRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateFineTuningJobRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateFineTuningJobRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateImageEditRequestModel0 returns the union data inside the ExtendedCreateImageEditRequest_Model as a ExtendedCreateImageEditRequestModel0
func (t ExtendedCreateImageEditRequest_Model) AsExtendedCreateImageEditRequestModel0() (ExtendedCreateImageEditRequestModel0, error) {
	var body ExtendedCreateImageEditRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateImageEditRequestModel0 overwrites any union data inside the ExtendedCreateImageEditRequest_Model as the provided ExtendedCreateImageEditRequestModel0
func (t *ExtendedCreateImageEditRequest_Model) FromExtendedCreateImageEditRequestModel0(v ExtendedCreateImageEditRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateImageEditRequestModel0 performs a merge with any union data inside the ExtendedCreateImageEditRequest_Model, using the provided ExtendedCreateImageEditRequestModel0
func (t *ExtendedCreateImageEditRequest_Model) MergeExtendedCreateImageEditRequestModel0(v ExtendedCreateImageEditRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateImageEditRequestModel1 returns the union data inside the ExtendedCreateImageEditRequest_Model as a ExtendedCreateImageEditRequestModel1
func (t ExtendedCreateImageEditRequest_Model) AsExtendedCreateImageEditRequestModel1() (ExtendedCreateImageEditRequestModel1, error) {
	var body ExtendedCreateImageEditRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateImageEditRequestModel1 overwrites any union data inside the ExtendedCreateImageEditRequest_Model as the provided ExtendedCreateImageEditRequestModel1
func (t *ExtendedCreateImageEditRequest_Model) FromExtendedCreateImageEditRequestModel1(v ExtendedCreateImageEditRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateImageEditRequestModel1 performs a merge with any union data inside the ExtendedCreateImageEditRequest_Model, using the provided ExtendedCreateImageEditRequestModel1
func (t *ExtendedCreateImageEditRequest_Model) MergeExtendedCreateImageEditRequestModel1(v ExtendedCreateImageEditRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateImageEditRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateImageEditRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateImageRequestModel0 returns the union data inside the ExtendedCreateImageRequest_Model as a ExtendedCreateImageRequestModel0
func (t ExtendedCreateImageRequest_Model) AsExtendedCreateImageRequestModel0() (ExtendedCreateImageRequestModel0, error) {
	var body ExtendedCreateImageRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateImageRequestModel0 overwrites any union data inside the ExtendedCreateImageRequest_Model as the provided ExtendedCreateImageRequestModel0
func (t *ExtendedCreateImageRequest_Model) FromExtendedCreateImageRequestModel0(v ExtendedCreateImageRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateImageRequestModel0 performs a merge with any union data inside the ExtendedCreateImageRequest_Model, using the provided ExtendedCreateImageRequestModel0
func (t *ExtendedCreateImageRequest_Model) MergeExtendedCreateImageRequestModel0(v ExtendedCreateImageRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateImageRequestModel1 returns the union data inside the ExtendedCreateImageRequest_Model as a ExtendedCreateImageRequestModel1
func (t ExtendedCreateImageRequest_Model) AsExtendedCreateImageRequestModel1() (ExtendedCreateImageRequestModel1, error) {
	var body ExtendedCreateImageRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateImageRequestModel1 overwrites any union data inside the ExtendedCreateImageRequest_Model as the provided ExtendedCreateImageRequestModel1
func (t *ExtendedCreateImageRequest_Model) FromExtendedCreateImageRequestModel1(v ExtendedCreateImageRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateImageRequestModel1 performs a merge with any union data inside the ExtendedCreateImageRequest_Model, using the provided ExtendedCreateImageRequestModel1
func (t *ExtendedCreateImageRequest_Model) MergeExtendedCreateImageRequestModel1(v ExtendedCreateImageRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateImageRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateImageRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateImageVariationRequestModel0 returns the union data inside the ExtendedCreateImageVariationRequest_Model as a ExtendedCreateImageVariationRequestModel0
func (t ExtendedCreateImageVariationRequest_Model) AsExtendedCreateImageVariationRequestModel0() (ExtendedCreateImageVariationRequestModel0, error) {
	var body ExtendedCreateImageVariationRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateImageVariationRequestModel0 overwrites any union data inside the ExtendedCreateImageVariationRequest_Model as the provided ExtendedCreateImageVariationRequestModel0
func (t *ExtendedCreateImageVariationRequest_Model) FromExtendedCreateImageVariationRequestModel0(v ExtendedCreateImageVariationRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateImageVariationRequestModel0 performs a merge with any union data inside the ExtendedCreateImageVariationRequest_Model, using the provided ExtendedCreateImageVariationRequestModel0
func (t *ExtendedCreateImageVariationRequest_Model) MergeExtendedCreateImageVariationRequestModel0(v ExtendedCreateImageVariationRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateImageVariationRequestModel1 returns the union data inside the ExtendedCreateImageVariationRequest_Model as a ExtendedCreateImageVariationRequestModel1
func (t ExtendedCreateImageVariationRequest_Model) AsExtendedCreateImageVariationRequestModel1() (ExtendedCreateImageVariationRequestModel1, error) {
	var body ExtendedCreateImageVariationRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateImageVariationRequestModel1 overwrites any union data inside the ExtendedCreateImageVariationRequest_Model as the provided ExtendedCreateImageVariationRequestModel1
func (t *ExtendedCreateImageVariationRequest_Model) FromExtendedCreateImageVariationRequestModel1(v ExtendedCreateImageVariationRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateImageVariationRequestModel1 performs a merge with any union data inside the ExtendedCreateImageVariationRequest_Model, using the provided ExtendedCreateImageVariationRequestModel1
func (t *ExtendedCreateImageVariationRequest_Model) MergeExtendedCreateImageVariationRequestModel1(v ExtendedCreateImageVariationRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateImageVariationRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateImageVariationRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateModerationRequestInput0 returns the union data inside the ExtendedCreateModerationRequest_Input as a ExtendedCreateModerationRequestInput0
func (t ExtendedCreateModerationRequest_Input) AsExtendedCreateModerationRequestInput0() (ExtendedCreateModerationRequestInput0, error) {
	var body ExtendedCreateModerationRequestInput0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateModerationRequestInput0 overwrites any union data inside the ExtendedCreateModerationRequest_Input as the provided ExtendedCreateModerationRequestInput0
func (t *ExtendedCreateModerationRequest_Input) FromExtendedCreateModerationRequestInput0(v ExtendedCreateModerationRequestInput0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateModerationRequestInput0 performs a merge with any union data inside the ExtendedCreateModerationRequest_Input, using the provided ExtendedCreateModerationRequestInput0
func (t *ExtendedCreateModerationRequest_Input) MergeExtendedCreateModerationRequestInput0(v ExtendedCreateModerationRequestInput0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateModerationRequestInput1 returns the union data inside the ExtendedCreateModerationRequest_Input as a ExtendedCreateModerationRequestInput1
func (t ExtendedCreateModerationRequest_Input) AsExtendedCreateModerationRequestInput1() (ExtendedCreateModerationRequestInput1, error) {
	var body ExtendedCreateModerationRequestInput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateModerationRequestInput1 overwrites any union data inside the ExtendedCreateModerationRequest_Input as the provided ExtendedCreateModerationRequestInput1
func (t *ExtendedCreateModerationRequest_Input) FromExtendedCreateModerationRequestInput1(v ExtendedCreateModerationRequestInput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateModerationRequestInput1 performs a merge with any union data inside the ExtendedCreateModerationRequest_Input, using the provided ExtendedCreateModerationRequestInput1
func (t *ExtendedCreateModerationRequest_Input) MergeExtendedCreateModerationRequestInput1(v ExtendedCreateModerationRequestInput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateModerationRequest_Input) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateModerationRequest_Input) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateModerationRequestModel0 returns the union data inside the ExtendedCreateModerationRequest_Model as a ExtendedCreateModerationRequestModel0
func (t ExtendedCreateModerationRequest_Model) AsExtendedCreateModerationRequestModel0() (ExtendedCreateModerationRequestModel0, error) {
	var body ExtendedCreateModerationRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateModerationRequestModel0 overwrites any union data inside the ExtendedCreateModerationRequest_Model as the provided ExtendedCreateModerationRequestModel0
func (t *ExtendedCreateModerationRequest_Model) FromExtendedCreateModerationRequestModel0(v ExtendedCreateModerationRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateModerationRequestModel0 performs a merge with any union data inside the ExtendedCreateModerationRequest_Model, using the provided ExtendedCreateModerationRequestModel0
func (t *ExtendedCreateModerationRequest_Model) MergeExtendedCreateModerationRequestModel0(v ExtendedCreateModerationRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateModerationRequestModel1 returns the union data inside the ExtendedCreateModerationRequest_Model as a ExtendedCreateModerationRequestModel1
func (t ExtendedCreateModerationRequest_Model) AsExtendedCreateModerationRequestModel1() (ExtendedCreateModerationRequestModel1, error) {
	var body ExtendedCreateModerationRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateModerationRequestModel1 overwrites any union data inside the ExtendedCreateModerationRequest_Model as the provided ExtendedCreateModerationRequestModel1
func (t *ExtendedCreateModerationRequest_Model) FromExtendedCreateModerationRequestModel1(v ExtendedCreateModerationRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateModerationRequestModel1 performs a merge with any union data inside the ExtendedCreateModerationRequest_Model, using the provided ExtendedCreateModerationRequestModel1
func (t *ExtendedCreateModerationRequest_Model) MergeExtendedCreateModerationRequestModel1(v ExtendedCreateModerationRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateModerationRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateModerationRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAssistantToolsCode returns the union data inside the ExtendedCreateRunRequest_Tools_Item as a AssistantToolsCode
func (t ExtendedCreateRunRequest_Tools_Item) AsAssistantToolsCode() (AssistantToolsCode, error) {
	var body AssistantToolsCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsCode overwrites any union data inside the ExtendedCreateRunRequest_Tools_Item as the provided AssistantToolsCode
func (t *ExtendedCreateRunRequest_Tools_Item) FromAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsCode performs a merge with any union data inside the ExtendedCreateRunRequest_Tools_Item, using the provided AssistantToolsCode
func (t *ExtendedCreateRunRequest_Tools_Item) MergeAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsRetrieval returns the union data inside the ExtendedCreateRunRequest_Tools_Item as a AssistantToolsRetrieval
func (t ExtendedCreateRunRequest_Tools_Item) AsAssistantToolsRetrieval() (AssistantToolsRetrieval, error) {
	var body AssistantToolsRetrieval
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsRetrieval overwrites any union data inside the ExtendedCreateRunRequest_Tools_Item as the provided AssistantToolsRetrieval
func (t *ExtendedCreateRunRequest_Tools_Item) FromAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsRetrieval performs a merge with any union data inside the ExtendedCreateRunRequest_Tools_Item, using the provided AssistantToolsRetrieval
func (t *ExtendedCreateRunRequest_Tools_Item) MergeAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsFunction returns the union data inside the ExtendedCreateRunRequest_Tools_Item as a AssistantToolsFunction
func (t ExtendedCreateRunRequest_Tools_Item) AsAssistantToolsFunction() (AssistantToolsFunction, error) {
	var body AssistantToolsFunction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsFunction overwrites any union data inside the ExtendedCreateRunRequest_Tools_Item as the provided AssistantToolsFunction
func (t *ExtendedCreateRunRequest_Tools_Item) FromAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsFunction performs a merge with any union data inside the ExtendedCreateRunRequest_Tools_Item, using the provided AssistantToolsFunction
func (t *ExtendedCreateRunRequest_Tools_Item) MergeAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateRunRequest_Tools_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateRunRequest_Tools_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateSpeechRequestModel0 returns the union data inside the ExtendedCreateSpeechRequest_Model as a ExtendedCreateSpeechRequestModel0
func (t ExtendedCreateSpeechRequest_Model) AsExtendedCreateSpeechRequestModel0() (ExtendedCreateSpeechRequestModel0, error) {
	var body ExtendedCreateSpeechRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateSpeechRequestModel0 overwrites any union data inside the ExtendedCreateSpeechRequest_Model as the provided ExtendedCreateSpeechRequestModel0
func (t *ExtendedCreateSpeechRequest_Model) FromExtendedCreateSpeechRequestModel0(v ExtendedCreateSpeechRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateSpeechRequestModel0 performs a merge with any union data inside the ExtendedCreateSpeechRequest_Model, using the provided ExtendedCreateSpeechRequestModel0
func (t *ExtendedCreateSpeechRequest_Model) MergeExtendedCreateSpeechRequestModel0(v ExtendedCreateSpeechRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateSpeechRequestModel1 returns the union data inside the ExtendedCreateSpeechRequest_Model as a ExtendedCreateSpeechRequestModel1
func (t ExtendedCreateSpeechRequest_Model) AsExtendedCreateSpeechRequestModel1() (ExtendedCreateSpeechRequestModel1, error) {
	var body ExtendedCreateSpeechRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateSpeechRequestModel1 overwrites any union data inside the ExtendedCreateSpeechRequest_Model as the provided ExtendedCreateSpeechRequestModel1
func (t *ExtendedCreateSpeechRequest_Model) FromExtendedCreateSpeechRequestModel1(v ExtendedCreateSpeechRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateSpeechRequestModel1 performs a merge with any union data inside the ExtendedCreateSpeechRequest_Model, using the provided ExtendedCreateSpeechRequestModel1
func (t *ExtendedCreateSpeechRequest_Model) MergeExtendedCreateSpeechRequestModel1(v ExtendedCreateSpeechRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateSpeechRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateSpeechRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAssistantToolsCode returns the union data inside the ExtendedCreateThreadAndRunRequest_Tools_Item as a AssistantToolsCode
func (t ExtendedCreateThreadAndRunRequest_Tools_Item) AsAssistantToolsCode() (AssistantToolsCode, error) {
	var body AssistantToolsCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsCode overwrites any union data inside the ExtendedCreateThreadAndRunRequest_Tools_Item as the provided AssistantToolsCode
func (t *ExtendedCreateThreadAndRunRequest_Tools_Item) FromAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsCode performs a merge with any union data inside the ExtendedCreateThreadAndRunRequest_Tools_Item, using the provided AssistantToolsCode
func (t *ExtendedCreateThreadAndRunRequest_Tools_Item) MergeAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsRetrieval returns the union data inside the ExtendedCreateThreadAndRunRequest_Tools_Item as a AssistantToolsRetrieval
func (t ExtendedCreateThreadAndRunRequest_Tools_Item) AsAssistantToolsRetrieval() (AssistantToolsRetrieval, error) {
	var body AssistantToolsRetrieval
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsRetrieval overwrites any union data inside the ExtendedCreateThreadAndRunRequest_Tools_Item as the provided AssistantToolsRetrieval
func (t *ExtendedCreateThreadAndRunRequest_Tools_Item) FromAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsRetrieval performs a merge with any union data inside the ExtendedCreateThreadAndRunRequest_Tools_Item, using the provided AssistantToolsRetrieval
func (t *ExtendedCreateThreadAndRunRequest_Tools_Item) MergeAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsFunction returns the union data inside the ExtendedCreateThreadAndRunRequest_Tools_Item as a AssistantToolsFunction
func (t ExtendedCreateThreadAndRunRequest_Tools_Item) AsAssistantToolsFunction() (AssistantToolsFunction, error) {
	var body AssistantToolsFunction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsFunction overwrites any union data inside the ExtendedCreateThreadAndRunRequest_Tools_Item as the provided AssistantToolsFunction
func (t *ExtendedCreateThreadAndRunRequest_Tools_Item) FromAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsFunction performs a merge with any union data inside the ExtendedCreateThreadAndRunRequest_Tools_Item, using the provided AssistantToolsFunction
func (t *ExtendedCreateThreadAndRunRequest_Tools_Item) MergeAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateThreadAndRunRequest_Tools_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateThreadAndRunRequest_Tools_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateTranscriptionRequestModel0 returns the union data inside the ExtendedCreateTranscriptionRequest_Model as a ExtendedCreateTranscriptionRequestModel0
func (t ExtendedCreateTranscriptionRequest_Model) AsExtendedCreateTranscriptionRequestModel0() (ExtendedCreateTranscriptionRequestModel0, error) {
	var body ExtendedCreateTranscriptionRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateTranscriptionRequestModel0 overwrites any union data inside the ExtendedCreateTranscriptionRequest_Model as the provided ExtendedCreateTranscriptionRequestModel0
func (t *ExtendedCreateTranscriptionRequest_Model) FromExtendedCreateTranscriptionRequestModel0(v ExtendedCreateTranscriptionRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateTranscriptionRequestModel0 performs a merge with any union data inside the ExtendedCreateTranscriptionRequest_Model, using the provided ExtendedCreateTranscriptionRequestModel0
func (t *ExtendedCreateTranscriptionRequest_Model) MergeExtendedCreateTranscriptionRequestModel0(v ExtendedCreateTranscriptionRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateTranscriptionRequestModel1 returns the union data inside the ExtendedCreateTranscriptionRequest_Model as a ExtendedCreateTranscriptionRequestModel1
func (t ExtendedCreateTranscriptionRequest_Model) AsExtendedCreateTranscriptionRequestModel1() (ExtendedCreateTranscriptionRequestModel1, error) {
	var body ExtendedCreateTranscriptionRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateTranscriptionRequestModel1 overwrites any union data inside the ExtendedCreateTranscriptionRequest_Model as the provided ExtendedCreateTranscriptionRequestModel1
func (t *ExtendedCreateTranscriptionRequest_Model) FromExtendedCreateTranscriptionRequestModel1(v ExtendedCreateTranscriptionRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateTranscriptionRequestModel1 performs a merge with any union data inside the ExtendedCreateTranscriptionRequest_Model, using the provided ExtendedCreateTranscriptionRequestModel1
func (t *ExtendedCreateTranscriptionRequest_Model) MergeExtendedCreateTranscriptionRequestModel1(v ExtendedCreateTranscriptionRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateTranscriptionRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateTranscriptionRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedCreateTranslationRequestModel0 returns the union data inside the ExtendedCreateTranslationRequest_Model as a ExtendedCreateTranslationRequestModel0
func (t ExtendedCreateTranslationRequest_Model) AsExtendedCreateTranslationRequestModel0() (ExtendedCreateTranslationRequestModel0, error) {
	var body ExtendedCreateTranslationRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateTranslationRequestModel0 overwrites any union data inside the ExtendedCreateTranslationRequest_Model as the provided ExtendedCreateTranslationRequestModel0
func (t *ExtendedCreateTranslationRequest_Model) FromExtendedCreateTranslationRequestModel0(v ExtendedCreateTranslationRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateTranslationRequestModel0 performs a merge with any union data inside the ExtendedCreateTranslationRequest_Model, using the provided ExtendedCreateTranslationRequestModel0
func (t *ExtendedCreateTranslationRequest_Model) MergeExtendedCreateTranslationRequestModel0(v ExtendedCreateTranslationRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedCreateTranslationRequestModel1 returns the union data inside the ExtendedCreateTranslationRequest_Model as a ExtendedCreateTranslationRequestModel1
func (t ExtendedCreateTranslationRequest_Model) AsExtendedCreateTranslationRequestModel1() (ExtendedCreateTranslationRequestModel1, error) {
	var body ExtendedCreateTranslationRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedCreateTranslationRequestModel1 overwrites any union data inside the ExtendedCreateTranslationRequest_Model as the provided ExtendedCreateTranslationRequestModel1
func (t *ExtendedCreateTranslationRequest_Model) FromExtendedCreateTranslationRequestModel1(v ExtendedCreateTranslationRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedCreateTranslationRequestModel1 performs a merge with any union data inside the ExtendedCreateTranslationRequest_Model, using the provided ExtendedCreateTranslationRequestModel1
func (t *ExtendedCreateTranslationRequest_Model) MergeExtendedCreateTranslationRequestModel1(v ExtendedCreateTranslationRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedCreateTranslationRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedCreateTranslationRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedEmbeddingEmbedding0 returns the union data inside the ExtendedEmbedding_Embedding as a ExtendedEmbeddingEmbedding0
func (t ExtendedEmbedding_Embedding) AsExtendedEmbeddingEmbedding0() (ExtendedEmbeddingEmbedding0, error) {
	var body ExtendedEmbeddingEmbedding0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedEmbeddingEmbedding0 overwrites any union data inside the ExtendedEmbedding_Embedding as the provided ExtendedEmbeddingEmbedding0
func (t *ExtendedEmbedding_Embedding) FromExtendedEmbeddingEmbedding0(v ExtendedEmbeddingEmbedding0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedEmbeddingEmbedding0 performs a merge with any union data inside the ExtendedEmbedding_Embedding, using the provided ExtendedEmbeddingEmbedding0
func (t *ExtendedEmbedding_Embedding) MergeExtendedEmbeddingEmbedding0(v ExtendedEmbeddingEmbedding0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedEmbeddingEmbedding1 returns the union data inside the ExtendedEmbedding_Embedding as a ExtendedEmbeddingEmbedding1
func (t ExtendedEmbedding_Embedding) AsExtendedEmbeddingEmbedding1() (ExtendedEmbeddingEmbedding1, error) {
	var body ExtendedEmbeddingEmbedding1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedEmbeddingEmbedding1 overwrites any union data inside the ExtendedEmbedding_Embedding as the provided ExtendedEmbeddingEmbedding1
func (t *ExtendedEmbedding_Embedding) FromExtendedEmbeddingEmbedding1(v ExtendedEmbeddingEmbedding1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedEmbeddingEmbedding1 performs a merge with any union data inside the ExtendedEmbedding_Embedding, using the provided ExtendedEmbeddingEmbedding1
func (t *ExtendedEmbedding_Embedding) MergeExtendedEmbeddingEmbedding1(v ExtendedEmbeddingEmbedding1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedEmbedding_Embedding) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedEmbedding_Embedding) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedFineTuningJobHyperparametersNEpochs0 returns the union data inside the ExtendedFineTuningJob_Hyperparameters_NEpochs as a ExtendedFineTuningJobHyperparametersNEpochs0
func (t ExtendedFineTuningJob_Hyperparameters_NEpochs) AsExtendedFineTuningJobHyperparametersNEpochs0() (ExtendedFineTuningJobHyperparametersNEpochs0, error) {
	var body ExtendedFineTuningJobHyperparametersNEpochs0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedFineTuningJobHyperparametersNEpochs0 overwrites any union data inside the ExtendedFineTuningJob_Hyperparameters_NEpochs as the provided ExtendedFineTuningJobHyperparametersNEpochs0
func (t *ExtendedFineTuningJob_Hyperparameters_NEpochs) FromExtendedFineTuningJobHyperparametersNEpochs0(v ExtendedFineTuningJobHyperparametersNEpochs0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedFineTuningJobHyperparametersNEpochs0 performs a merge with any union data inside the ExtendedFineTuningJob_Hyperparameters_NEpochs, using the provided ExtendedFineTuningJobHyperparametersNEpochs0
func (t *ExtendedFineTuningJob_Hyperparameters_NEpochs) MergeExtendedFineTuningJobHyperparametersNEpochs0(v ExtendedFineTuningJobHyperparametersNEpochs0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedFineTuningJobHyperparametersNEpochs1 returns the union data inside the ExtendedFineTuningJob_Hyperparameters_NEpochs as a ExtendedFineTuningJobHyperparametersNEpochs1
func (t ExtendedFineTuningJob_Hyperparameters_NEpochs) AsExtendedFineTuningJobHyperparametersNEpochs1() (ExtendedFineTuningJobHyperparametersNEpochs1, error) {
	var body ExtendedFineTuningJobHyperparametersNEpochs1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedFineTuningJobHyperparametersNEpochs1 overwrites any union data inside the ExtendedFineTuningJob_Hyperparameters_NEpochs as the provided ExtendedFineTuningJobHyperparametersNEpochs1
func (t *ExtendedFineTuningJob_Hyperparameters_NEpochs) FromExtendedFineTuningJobHyperparametersNEpochs1(v ExtendedFineTuningJobHyperparametersNEpochs1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedFineTuningJobHyperparametersNEpochs1 performs a merge with any union data inside the ExtendedFineTuningJob_Hyperparameters_NEpochs, using the provided ExtendedFineTuningJobHyperparametersNEpochs1
func (t *ExtendedFineTuningJob_Hyperparameters_NEpochs) MergeExtendedFineTuningJobHyperparametersNEpochs1(v ExtendedFineTuningJobHyperparametersNEpochs1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedFineTuningJob_Hyperparameters_NEpochs) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedFineTuningJob_Hyperparameters_NEpochs) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMessageContentTextAnnotationsFileCitationObject returns the union data inside the ExtendedMessageContentTextObject_Text_Annotations_Item as a MessageContentTextAnnotationsFileCitationObject
func (t ExtendedMessageContentTextObject_Text_Annotations_Item) AsMessageContentTextAnnotationsFileCitationObject() (MessageContentTextAnnotationsFileCitationObject, error) {
	var body MessageContentTextAnnotationsFileCitationObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageContentTextAnnotationsFileCitationObject overwrites any union data inside the ExtendedMessageContentTextObject_Text_Annotations_Item as the provided MessageContentTextAnnotationsFileCitationObject
func (t *ExtendedMessageContentTextObject_Text_Annotations_Item) FromMessageContentTextAnnotationsFileCitationObject(v MessageContentTextAnnotationsFileCitationObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageContentTextAnnotationsFileCitationObject performs a merge with any union data inside the ExtendedMessageContentTextObject_Text_Annotations_Item, using the provided MessageContentTextAnnotationsFileCitationObject
func (t *ExtendedMessageContentTextObject_Text_Annotations_Item) MergeMessageContentTextAnnotationsFileCitationObject(v MessageContentTextAnnotationsFileCitationObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageContentTextAnnotationsFilePathObject returns the union data inside the ExtendedMessageContentTextObject_Text_Annotations_Item as a MessageContentTextAnnotationsFilePathObject
func (t ExtendedMessageContentTextObject_Text_Annotations_Item) AsMessageContentTextAnnotationsFilePathObject() (MessageContentTextAnnotationsFilePathObject, error) {
	var body MessageContentTextAnnotationsFilePathObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageContentTextAnnotationsFilePathObject overwrites any union data inside the ExtendedMessageContentTextObject_Text_Annotations_Item as the provided MessageContentTextAnnotationsFilePathObject
func (t *ExtendedMessageContentTextObject_Text_Annotations_Item) FromMessageContentTextAnnotationsFilePathObject(v MessageContentTextAnnotationsFilePathObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageContentTextAnnotationsFilePathObject performs a merge with any union data inside the ExtendedMessageContentTextObject_Text_Annotations_Item, using the provided MessageContentTextAnnotationsFilePathObject
func (t *ExtendedMessageContentTextObject_Text_Annotations_Item) MergeMessageContentTextAnnotationsFilePathObject(v MessageContentTextAnnotationsFilePathObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedMessageContentTextObject_Text_Annotations_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedMessageContentTextObject_Text_Annotations_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMessageDeltaContentTextAnnotationsFileCitationObject returns the union data inside the ExtendedMessageDeltaContentTextObject_Text_Annotations_Item as a MessageDeltaContentTextAnnotationsFileCitationObject
func (t ExtendedMessageDeltaContentTextObject_Text_Annotations_Item) AsMessageDeltaContentTextAnnotationsFileCitationObject() (MessageDeltaContentTextAnnotationsFileCitationObject, error) {
	var body MessageDeltaContentTextAnnotationsFileCitationObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageDeltaContentTextAnnotationsFileCitationObject overwrites any union data inside the ExtendedMessageDeltaContentTextObject_Text_Annotations_Item as the provided MessageDeltaContentTextAnnotationsFileCitationObject
func (t *ExtendedMessageDeltaContentTextObject_Text_Annotations_Item) FromMessageDeltaContentTextAnnotationsFileCitationObject(v MessageDeltaContentTextAnnotationsFileCitationObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageDeltaContentTextAnnotationsFileCitationObject performs a merge with any union data inside the ExtendedMessageDeltaContentTextObject_Text_Annotations_Item, using the provided MessageDeltaContentTextAnnotationsFileCitationObject
func (t *ExtendedMessageDeltaContentTextObject_Text_Annotations_Item) MergeMessageDeltaContentTextAnnotationsFileCitationObject(v MessageDeltaContentTextAnnotationsFileCitationObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageDeltaContentTextAnnotationsFilePathObject returns the union data inside the ExtendedMessageDeltaContentTextObject_Text_Annotations_Item as a MessageDeltaContentTextAnnotationsFilePathObject
func (t ExtendedMessageDeltaContentTextObject_Text_Annotations_Item) AsMessageDeltaContentTextAnnotationsFilePathObject() (MessageDeltaContentTextAnnotationsFilePathObject, error) {
	var body MessageDeltaContentTextAnnotationsFilePathObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageDeltaContentTextAnnotationsFilePathObject overwrites any union data inside the ExtendedMessageDeltaContentTextObject_Text_Annotations_Item as the provided MessageDeltaContentTextAnnotationsFilePathObject
func (t *ExtendedMessageDeltaContentTextObject_Text_Annotations_Item) FromMessageDeltaContentTextAnnotationsFilePathObject(v MessageDeltaContentTextAnnotationsFilePathObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageDeltaContentTextAnnotationsFilePathObject performs a merge with any union data inside the ExtendedMessageDeltaContentTextObject_Text_Annotations_Item, using the provided MessageDeltaContentTextAnnotationsFilePathObject
func (t *ExtendedMessageDeltaContentTextObject_Text_Annotations_Item) MergeMessageDeltaContentTextAnnotationsFilePathObject(v MessageDeltaContentTextAnnotationsFilePathObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedMessageDeltaContentTextObject_Text_Annotations_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedMessageDeltaContentTextObject_Text_Annotations_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMessageDeltaContentImageFileObject returns the union data inside the ExtendedMessageDeltaObject_Delta_Content_Item as a MessageDeltaContentImageFileObject
func (t ExtendedMessageDeltaObject_Delta_Content_Item) AsMessageDeltaContentImageFileObject() (MessageDeltaContentImageFileObject, error) {
	var body MessageDeltaContentImageFileObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageDeltaContentImageFileObject overwrites any union data inside the ExtendedMessageDeltaObject_Delta_Content_Item as the provided MessageDeltaContentImageFileObject
func (t *ExtendedMessageDeltaObject_Delta_Content_Item) FromMessageDeltaContentImageFileObject(v MessageDeltaContentImageFileObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageDeltaContentImageFileObject performs a merge with any union data inside the ExtendedMessageDeltaObject_Delta_Content_Item, using the provided MessageDeltaContentImageFileObject
func (t *ExtendedMessageDeltaObject_Delta_Content_Item) MergeMessageDeltaContentImageFileObject(v MessageDeltaContentImageFileObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageDeltaContentTextObject returns the union data inside the ExtendedMessageDeltaObject_Delta_Content_Item as a MessageDeltaContentTextObject
func (t ExtendedMessageDeltaObject_Delta_Content_Item) AsMessageDeltaContentTextObject() (MessageDeltaContentTextObject, error) {
	var body MessageDeltaContentTextObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageDeltaContentTextObject overwrites any union data inside the ExtendedMessageDeltaObject_Delta_Content_Item as the provided MessageDeltaContentTextObject
func (t *ExtendedMessageDeltaObject_Delta_Content_Item) FromMessageDeltaContentTextObject(v MessageDeltaContentTextObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageDeltaContentTextObject performs a merge with any union data inside the ExtendedMessageDeltaObject_Delta_Content_Item, using the provided MessageDeltaContentTextObject
func (t *ExtendedMessageDeltaObject_Delta_Content_Item) MergeMessageDeltaContentTextObject(v MessageDeltaContentTextObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedMessageDeltaObject_Delta_Content_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedMessageDeltaObject_Delta_Content_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMessageContentImageFileObject returns the union data inside the ExtendedMessageObject_Content_Item as a MessageContentImageFileObject
func (t ExtendedMessageObject_Content_Item) AsMessageContentImageFileObject() (MessageContentImageFileObject, error) {
	var body MessageContentImageFileObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageContentImageFileObject overwrites any union data inside the ExtendedMessageObject_Content_Item as the provided MessageContentImageFileObject
func (t *ExtendedMessageObject_Content_Item) FromMessageContentImageFileObject(v MessageContentImageFileObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageContentImageFileObject performs a merge with any union data inside the ExtendedMessageObject_Content_Item, using the provided MessageContentImageFileObject
func (t *ExtendedMessageObject_Content_Item) MergeMessageContentImageFileObject(v MessageContentImageFileObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageContentTextObject returns the union data inside the ExtendedMessageObject_Content_Item as a MessageContentTextObject
func (t ExtendedMessageObject_Content_Item) AsMessageContentTextObject() (MessageContentTextObject, error) {
	var body MessageContentTextObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageContentTextObject overwrites any union data inside the ExtendedMessageObject_Content_Item as the provided MessageContentTextObject
func (t *ExtendedMessageObject_Content_Item) FromMessageContentTextObject(v MessageContentTextObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageContentTextObject performs a merge with any union data inside the ExtendedMessageObject_Content_Item, using the provided MessageContentTextObject
func (t *ExtendedMessageObject_Content_Item) MergeMessageContentTextObject(v MessageContentTextObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedMessageObject_Content_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedMessageObject_Content_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedMessageStreamEvent0 returns the union data inside the ExtendedMessageStreamEvent as a ExtendedMessageStreamEvent0
func (t ExtendedMessageStreamEvent) AsExtendedMessageStreamEvent0() (ExtendedMessageStreamEvent0, error) {
	var body ExtendedMessageStreamEvent0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedMessageStreamEvent0 overwrites any union data inside the ExtendedMessageStreamEvent as the provided ExtendedMessageStreamEvent0
func (t *ExtendedMessageStreamEvent) FromExtendedMessageStreamEvent0(v ExtendedMessageStreamEvent0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedMessageStreamEvent0 performs a merge with any union data inside the ExtendedMessageStreamEvent, using the provided ExtendedMessageStreamEvent0
func (t *ExtendedMessageStreamEvent) MergeExtendedMessageStreamEvent0(v ExtendedMessageStreamEvent0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedMessageStreamEvent1 returns the union data inside the ExtendedMessageStreamEvent as a ExtendedMessageStreamEvent1
func (t ExtendedMessageStreamEvent) AsExtendedMessageStreamEvent1() (ExtendedMessageStreamEvent1, error) {
	var body ExtendedMessageStreamEvent1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedMessageStreamEvent1 overwrites any union data inside the ExtendedMessageStreamEvent as the provided ExtendedMessageStreamEvent1
func (t *ExtendedMessageStreamEvent) FromExtendedMessageStreamEvent1(v ExtendedMessageStreamEvent1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedMessageStreamEvent1 performs a merge with any union data inside the ExtendedMessageStreamEvent, using the provided ExtendedMessageStreamEvent1
func (t *ExtendedMessageStreamEvent) MergeExtendedMessageStreamEvent1(v ExtendedMessageStreamEvent1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedMessageStreamEvent2 returns the union data inside the ExtendedMessageStreamEvent as a ExtendedMessageStreamEvent2
func (t ExtendedMessageStreamEvent) AsExtendedMessageStreamEvent2() (ExtendedMessageStreamEvent2, error) {
	var body ExtendedMessageStreamEvent2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedMessageStreamEvent2 overwrites any union data inside the ExtendedMessageStreamEvent as the provided ExtendedMessageStreamEvent2
func (t *ExtendedMessageStreamEvent) FromExtendedMessageStreamEvent2(v ExtendedMessageStreamEvent2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedMessageStreamEvent2 performs a merge with any union data inside the ExtendedMessageStreamEvent, using the provided ExtendedMessageStreamEvent2
func (t *ExtendedMessageStreamEvent) MergeExtendedMessageStreamEvent2(v ExtendedMessageStreamEvent2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedMessageStreamEvent3 returns the union data inside the ExtendedMessageStreamEvent as a ExtendedMessageStreamEvent3
func (t ExtendedMessageStreamEvent) AsExtendedMessageStreamEvent3() (ExtendedMessageStreamEvent3, error) {
	var body ExtendedMessageStreamEvent3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedMessageStreamEvent3 overwrites any union data inside the ExtendedMessageStreamEvent as the provided ExtendedMessageStreamEvent3
func (t *ExtendedMessageStreamEvent) FromExtendedMessageStreamEvent3(v ExtendedMessageStreamEvent3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedMessageStreamEvent3 performs a merge with any union data inside the ExtendedMessageStreamEvent, using the provided ExtendedMessageStreamEvent3
func (t *ExtendedMessageStreamEvent) MergeExtendedMessageStreamEvent3(v ExtendedMessageStreamEvent3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedMessageStreamEvent4 returns the union data inside the ExtendedMessageStreamEvent as a ExtendedMessageStreamEvent4
func (t ExtendedMessageStreamEvent) AsExtendedMessageStreamEvent4() (ExtendedMessageStreamEvent4, error) {
	var body ExtendedMessageStreamEvent4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedMessageStreamEvent4 overwrites any union data inside the ExtendedMessageStreamEvent as the provided ExtendedMessageStreamEvent4
func (t *ExtendedMessageStreamEvent) FromExtendedMessageStreamEvent4(v ExtendedMessageStreamEvent4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedMessageStreamEvent4 performs a merge with any union data inside the ExtendedMessageStreamEvent, using the provided ExtendedMessageStreamEvent4
func (t *ExtendedMessageStreamEvent) MergeExtendedMessageStreamEvent4(v ExtendedMessageStreamEvent4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedMessageStreamEvent) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedMessageStreamEvent) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedModifyAssistantRequestModel0 returns the union data inside the ExtendedModifyAssistantRequest_Model as a ExtendedModifyAssistantRequestModel0
func (t ExtendedModifyAssistantRequest_Model) AsExtendedModifyAssistantRequestModel0() (ExtendedModifyAssistantRequestModel0, error) {
	var body ExtendedModifyAssistantRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedModifyAssistantRequestModel0 overwrites any union data inside the ExtendedModifyAssistantRequest_Model as the provided ExtendedModifyAssistantRequestModel0
func (t *ExtendedModifyAssistantRequest_Model) FromExtendedModifyAssistantRequestModel0(v ExtendedModifyAssistantRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedModifyAssistantRequestModel0 performs a merge with any union data inside the ExtendedModifyAssistantRequest_Model, using the provided ExtendedModifyAssistantRequestModel0
func (t *ExtendedModifyAssistantRequest_Model) MergeExtendedModifyAssistantRequestModel0(v ExtendedModifyAssistantRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedModifyAssistantRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedModifyAssistantRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAssistantToolsCode returns the union data inside the ExtendedModifyAssistantRequest_Tools_Item as a AssistantToolsCode
func (t ExtendedModifyAssistantRequest_Tools_Item) AsAssistantToolsCode() (AssistantToolsCode, error) {
	var body AssistantToolsCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsCode overwrites any union data inside the ExtendedModifyAssistantRequest_Tools_Item as the provided AssistantToolsCode
func (t *ExtendedModifyAssistantRequest_Tools_Item) FromAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsCode performs a merge with any union data inside the ExtendedModifyAssistantRequest_Tools_Item, using the provided AssistantToolsCode
func (t *ExtendedModifyAssistantRequest_Tools_Item) MergeAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsRetrieval returns the union data inside the ExtendedModifyAssistantRequest_Tools_Item as a AssistantToolsRetrieval
func (t ExtendedModifyAssistantRequest_Tools_Item) AsAssistantToolsRetrieval() (AssistantToolsRetrieval, error) {
	var body AssistantToolsRetrieval
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsRetrieval overwrites any union data inside the ExtendedModifyAssistantRequest_Tools_Item as the provided AssistantToolsRetrieval
func (t *ExtendedModifyAssistantRequest_Tools_Item) FromAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsRetrieval performs a merge with any union data inside the ExtendedModifyAssistantRequest_Tools_Item, using the provided AssistantToolsRetrieval
func (t *ExtendedModifyAssistantRequest_Tools_Item) MergeAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsFunction returns the union data inside the ExtendedModifyAssistantRequest_Tools_Item as a AssistantToolsFunction
func (t ExtendedModifyAssistantRequest_Tools_Item) AsAssistantToolsFunction() (AssistantToolsFunction, error) {
	var body AssistantToolsFunction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsFunction overwrites any union data inside the ExtendedModifyAssistantRequest_Tools_Item as the provided AssistantToolsFunction
func (t *ExtendedModifyAssistantRequest_Tools_Item) FromAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsFunction performs a merge with any union data inside the ExtendedModifyAssistantRequest_Tools_Item, using the provided AssistantToolsFunction
func (t *ExtendedModifyAssistantRequest_Tools_Item) MergeAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedModifyAssistantRequest_Tools_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedModifyAssistantRequest_Tools_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAssistantToolsCode returns the union data inside the ExtendedRunObject_Tools_Item as a AssistantToolsCode
func (t ExtendedRunObject_Tools_Item) AsAssistantToolsCode() (AssistantToolsCode, error) {
	var body AssistantToolsCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsCode overwrites any union data inside the ExtendedRunObject_Tools_Item as the provided AssistantToolsCode
func (t *ExtendedRunObject_Tools_Item) FromAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsCode performs a merge with any union data inside the ExtendedRunObject_Tools_Item, using the provided AssistantToolsCode
func (t *ExtendedRunObject_Tools_Item) MergeAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsRetrieval returns the union data inside the ExtendedRunObject_Tools_Item as a AssistantToolsRetrieval
func (t ExtendedRunObject_Tools_Item) AsAssistantToolsRetrieval() (AssistantToolsRetrieval, error) {
	var body AssistantToolsRetrieval
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsRetrieval overwrites any union data inside the ExtendedRunObject_Tools_Item as the provided AssistantToolsRetrieval
func (t *ExtendedRunObject_Tools_Item) FromAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsRetrieval performs a merge with any union data inside the ExtendedRunObject_Tools_Item, using the provided AssistantToolsRetrieval
func (t *ExtendedRunObject_Tools_Item) MergeAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsFunction returns the union data inside the ExtendedRunObject_Tools_Item as a AssistantToolsFunction
func (t ExtendedRunObject_Tools_Item) AsAssistantToolsFunction() (AssistantToolsFunction, error) {
	var body AssistantToolsFunction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsFunction overwrites any union data inside the ExtendedRunObject_Tools_Item as the provided AssistantToolsFunction
func (t *ExtendedRunObject_Tools_Item) FromAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsFunction performs a merge with any union data inside the ExtendedRunObject_Tools_Item, using the provided AssistantToolsFunction
func (t *ExtendedRunObject_Tools_Item) MergeAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedRunObject_Tools_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedRunObject_Tools_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunStepDeltaStepDetailsMessageCreationObject returns the union data inside the ExtendedRunStepDeltaObject_Delta_StepDetails as a RunStepDeltaStepDetailsMessageCreationObject
func (t ExtendedRunStepDeltaObject_Delta_StepDetails) AsRunStepDeltaStepDetailsMessageCreationObject() (RunStepDeltaStepDetailsMessageCreationObject, error) {
	var body RunStepDeltaStepDetailsMessageCreationObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDeltaStepDetailsMessageCreationObject overwrites any union data inside the ExtendedRunStepDeltaObject_Delta_StepDetails as the provided RunStepDeltaStepDetailsMessageCreationObject
func (t *ExtendedRunStepDeltaObject_Delta_StepDetails) FromRunStepDeltaStepDetailsMessageCreationObject(v RunStepDeltaStepDetailsMessageCreationObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDeltaStepDetailsMessageCreationObject performs a merge with any union data inside the ExtendedRunStepDeltaObject_Delta_StepDetails, using the provided RunStepDeltaStepDetailsMessageCreationObject
func (t *ExtendedRunStepDeltaObject_Delta_StepDetails) MergeRunStepDeltaStepDetailsMessageCreationObject(v RunStepDeltaStepDetailsMessageCreationObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepDeltaStepDetailsToolCallsObject returns the union data inside the ExtendedRunStepDeltaObject_Delta_StepDetails as a RunStepDeltaStepDetailsToolCallsObject
func (t ExtendedRunStepDeltaObject_Delta_StepDetails) AsRunStepDeltaStepDetailsToolCallsObject() (RunStepDeltaStepDetailsToolCallsObject, error) {
	var body RunStepDeltaStepDetailsToolCallsObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDeltaStepDetailsToolCallsObject overwrites any union data inside the ExtendedRunStepDeltaObject_Delta_StepDetails as the provided RunStepDeltaStepDetailsToolCallsObject
func (t *ExtendedRunStepDeltaObject_Delta_StepDetails) FromRunStepDeltaStepDetailsToolCallsObject(v RunStepDeltaStepDetailsToolCallsObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDeltaStepDetailsToolCallsObject performs a merge with any union data inside the ExtendedRunStepDeltaObject_Delta_StepDetails, using the provided RunStepDeltaStepDetailsToolCallsObject
func (t *ExtendedRunStepDeltaObject_Delta_StepDetails) MergeRunStepDeltaStepDetailsToolCallsObject(v RunStepDeltaStepDetailsToolCallsObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedRunStepDeltaObject_Delta_StepDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedRunStepDeltaObject_Delta_StepDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject returns the union data inside the ExtendedRunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item as a RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject
func (t ExtendedRunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) AsRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject() (RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject, error) {
	var body RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject overwrites any union data inside the ExtendedRunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item as the provided RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject
func (t *ExtendedRunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) FromRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject(v RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject performs a merge with any union data inside the ExtendedRunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item, using the provided RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject
func (t *ExtendedRunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) MergeRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject(v RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepDeltaStepDetailsToolCallsCodeOutputImageObject returns the union data inside the ExtendedRunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item as a RunStepDeltaStepDetailsToolCallsCodeOutputImageObject
func (t ExtendedRunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) AsRunStepDeltaStepDetailsToolCallsCodeOutputImageObject() (RunStepDeltaStepDetailsToolCallsCodeOutputImageObject, error) {
	var body RunStepDeltaStepDetailsToolCallsCodeOutputImageObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDeltaStepDetailsToolCallsCodeOutputImageObject overwrites any union data inside the ExtendedRunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item as the provided RunStepDeltaStepDetailsToolCallsCodeOutputImageObject
func (t *ExtendedRunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) FromRunStepDeltaStepDetailsToolCallsCodeOutputImageObject(v RunStepDeltaStepDetailsToolCallsCodeOutputImageObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDeltaStepDetailsToolCallsCodeOutputImageObject performs a merge with any union data inside the ExtendedRunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item, using the provided RunStepDeltaStepDetailsToolCallsCodeOutputImageObject
func (t *ExtendedRunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) MergeRunStepDeltaStepDetailsToolCallsCodeOutputImageObject(v RunStepDeltaStepDetailsToolCallsCodeOutputImageObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedRunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedRunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunStepDeltaStepDetailsToolCallsCodeObject returns the union data inside the ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item as a RunStepDeltaStepDetailsToolCallsCodeObject
func (t ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) AsRunStepDeltaStepDetailsToolCallsCodeObject() (RunStepDeltaStepDetailsToolCallsCodeObject, error) {
	var body RunStepDeltaStepDetailsToolCallsCodeObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDeltaStepDetailsToolCallsCodeObject overwrites any union data inside the ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item as the provided RunStepDeltaStepDetailsToolCallsCodeObject
func (t *ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) FromRunStepDeltaStepDetailsToolCallsCodeObject(v RunStepDeltaStepDetailsToolCallsCodeObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDeltaStepDetailsToolCallsCodeObject performs a merge with any union data inside the ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item, using the provided RunStepDeltaStepDetailsToolCallsCodeObject
func (t *ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) MergeRunStepDeltaStepDetailsToolCallsCodeObject(v RunStepDeltaStepDetailsToolCallsCodeObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepDeltaStepDetailsToolCallsRetrievalObject returns the union data inside the ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item as a RunStepDeltaStepDetailsToolCallsRetrievalObject
func (t ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) AsRunStepDeltaStepDetailsToolCallsRetrievalObject() (RunStepDeltaStepDetailsToolCallsRetrievalObject, error) {
	var body RunStepDeltaStepDetailsToolCallsRetrievalObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDeltaStepDetailsToolCallsRetrievalObject overwrites any union data inside the ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item as the provided RunStepDeltaStepDetailsToolCallsRetrievalObject
func (t *ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) FromRunStepDeltaStepDetailsToolCallsRetrievalObject(v RunStepDeltaStepDetailsToolCallsRetrievalObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDeltaStepDetailsToolCallsRetrievalObject performs a merge with any union data inside the ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item, using the provided RunStepDeltaStepDetailsToolCallsRetrievalObject
func (t *ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) MergeRunStepDeltaStepDetailsToolCallsRetrievalObject(v RunStepDeltaStepDetailsToolCallsRetrievalObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepDeltaStepDetailsToolCallsFunctionObject returns the union data inside the ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item as a RunStepDeltaStepDetailsToolCallsFunctionObject
func (t ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) AsRunStepDeltaStepDetailsToolCallsFunctionObject() (RunStepDeltaStepDetailsToolCallsFunctionObject, error) {
	var body RunStepDeltaStepDetailsToolCallsFunctionObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDeltaStepDetailsToolCallsFunctionObject overwrites any union data inside the ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item as the provided RunStepDeltaStepDetailsToolCallsFunctionObject
func (t *ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) FromRunStepDeltaStepDetailsToolCallsFunctionObject(v RunStepDeltaStepDetailsToolCallsFunctionObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDeltaStepDetailsToolCallsFunctionObject performs a merge with any union data inside the ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item, using the provided RunStepDeltaStepDetailsToolCallsFunctionObject
func (t *ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) MergeRunStepDeltaStepDetailsToolCallsFunctionObject(v RunStepDeltaStepDetailsToolCallsFunctionObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedRunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunStepDetailsToolCallsCodeOutputLogsObject returns the union data inside the ExtendedRunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item as a RunStepDetailsToolCallsCodeOutputLogsObject
func (t ExtendedRunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) AsRunStepDetailsToolCallsCodeOutputLogsObject() (RunStepDetailsToolCallsCodeOutputLogsObject, error) {
	var body RunStepDetailsToolCallsCodeOutputLogsObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDetailsToolCallsCodeOutputLogsObject overwrites any union data inside the ExtendedRunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item as the provided RunStepDetailsToolCallsCodeOutputLogsObject
func (t *ExtendedRunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) FromRunStepDetailsToolCallsCodeOutputLogsObject(v RunStepDetailsToolCallsCodeOutputLogsObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDetailsToolCallsCodeOutputLogsObject performs a merge with any union data inside the ExtendedRunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item, using the provided RunStepDetailsToolCallsCodeOutputLogsObject
func (t *ExtendedRunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) MergeRunStepDetailsToolCallsCodeOutputLogsObject(v RunStepDetailsToolCallsCodeOutputLogsObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepDetailsToolCallsCodeOutputImageObject returns the union data inside the ExtendedRunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item as a RunStepDetailsToolCallsCodeOutputImageObject
func (t ExtendedRunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) AsRunStepDetailsToolCallsCodeOutputImageObject() (RunStepDetailsToolCallsCodeOutputImageObject, error) {
	var body RunStepDetailsToolCallsCodeOutputImageObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDetailsToolCallsCodeOutputImageObject overwrites any union data inside the ExtendedRunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item as the provided RunStepDetailsToolCallsCodeOutputImageObject
func (t *ExtendedRunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) FromRunStepDetailsToolCallsCodeOutputImageObject(v RunStepDetailsToolCallsCodeOutputImageObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDetailsToolCallsCodeOutputImageObject performs a merge with any union data inside the ExtendedRunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item, using the provided RunStepDetailsToolCallsCodeOutputImageObject
func (t *ExtendedRunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) MergeRunStepDetailsToolCallsCodeOutputImageObject(v RunStepDetailsToolCallsCodeOutputImageObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedRunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedRunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunStepDetailsToolCallsCodeObject returns the union data inside the ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item as a RunStepDetailsToolCallsCodeObject
func (t ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item) AsRunStepDetailsToolCallsCodeObject() (RunStepDetailsToolCallsCodeObject, error) {
	var body RunStepDetailsToolCallsCodeObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDetailsToolCallsCodeObject overwrites any union data inside the ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item as the provided RunStepDetailsToolCallsCodeObject
func (t *ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item) FromRunStepDetailsToolCallsCodeObject(v RunStepDetailsToolCallsCodeObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDetailsToolCallsCodeObject performs a merge with any union data inside the ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item, using the provided RunStepDetailsToolCallsCodeObject
func (t *ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item) MergeRunStepDetailsToolCallsCodeObject(v RunStepDetailsToolCallsCodeObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepDetailsToolCallsRetrievalObject returns the union data inside the ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item as a RunStepDetailsToolCallsRetrievalObject
func (t ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item) AsRunStepDetailsToolCallsRetrievalObject() (RunStepDetailsToolCallsRetrievalObject, error) {
	var body RunStepDetailsToolCallsRetrievalObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDetailsToolCallsRetrievalObject overwrites any union data inside the ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item as the provided RunStepDetailsToolCallsRetrievalObject
func (t *ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item) FromRunStepDetailsToolCallsRetrievalObject(v RunStepDetailsToolCallsRetrievalObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDetailsToolCallsRetrievalObject performs a merge with any union data inside the ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item, using the provided RunStepDetailsToolCallsRetrievalObject
func (t *ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item) MergeRunStepDetailsToolCallsRetrievalObject(v RunStepDetailsToolCallsRetrievalObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepDetailsToolCallsFunctionObject returns the union data inside the ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item as a RunStepDetailsToolCallsFunctionObject
func (t ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item) AsRunStepDetailsToolCallsFunctionObject() (RunStepDetailsToolCallsFunctionObject, error) {
	var body RunStepDetailsToolCallsFunctionObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDetailsToolCallsFunctionObject overwrites any union data inside the ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item as the provided RunStepDetailsToolCallsFunctionObject
func (t *ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item) FromRunStepDetailsToolCallsFunctionObject(v RunStepDetailsToolCallsFunctionObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDetailsToolCallsFunctionObject performs a merge with any union data inside the ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item, using the provided RunStepDetailsToolCallsFunctionObject
func (t *ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item) MergeRunStepDetailsToolCallsFunctionObject(v RunStepDetailsToolCallsFunctionObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedRunStepDetailsToolCallsObject_ToolCalls_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunStepDetailsMessageCreationObject returns the union data inside the ExtendedRunStepObject_StepDetails as a RunStepDetailsMessageCreationObject
func (t ExtendedRunStepObject_StepDetails) AsRunStepDetailsMessageCreationObject() (RunStepDetailsMessageCreationObject, error) {
	var body RunStepDetailsMessageCreationObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDetailsMessageCreationObject overwrites any union data inside the ExtendedRunStepObject_StepDetails as the provided RunStepDetailsMessageCreationObject
func (t *ExtendedRunStepObject_StepDetails) FromRunStepDetailsMessageCreationObject(v RunStepDetailsMessageCreationObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDetailsMessageCreationObject performs a merge with any union data inside the ExtendedRunStepObject_StepDetails, using the provided RunStepDetailsMessageCreationObject
func (t *ExtendedRunStepObject_StepDetails) MergeRunStepDetailsMessageCreationObject(v RunStepDetailsMessageCreationObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepDetailsToolCallsObject returns the union data inside the ExtendedRunStepObject_StepDetails as a RunStepDetailsToolCallsObject
func (t ExtendedRunStepObject_StepDetails) AsRunStepDetailsToolCallsObject() (RunStepDetailsToolCallsObject, error) {
	var body RunStepDetailsToolCallsObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDetailsToolCallsObject overwrites any union data inside the ExtendedRunStepObject_StepDetails as the provided RunStepDetailsToolCallsObject
func (t *ExtendedRunStepObject_StepDetails) FromRunStepDetailsToolCallsObject(v RunStepDetailsToolCallsObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDetailsToolCallsObject performs a merge with any union data inside the ExtendedRunStepObject_StepDetails, using the provided RunStepDetailsToolCallsObject
func (t *ExtendedRunStepObject_StepDetails) MergeRunStepDetailsToolCallsObject(v RunStepDetailsToolCallsObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedRunStepObject_StepDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedRunStepObject_StepDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedRunStepStreamEvent0 returns the union data inside the ExtendedRunStepStreamEvent as a ExtendedRunStepStreamEvent0
func (t ExtendedRunStepStreamEvent) AsExtendedRunStepStreamEvent0() (ExtendedRunStepStreamEvent0, error) {
	var body ExtendedRunStepStreamEvent0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedRunStepStreamEvent0 overwrites any union data inside the ExtendedRunStepStreamEvent as the provided ExtendedRunStepStreamEvent0
func (t *ExtendedRunStepStreamEvent) FromExtendedRunStepStreamEvent0(v ExtendedRunStepStreamEvent0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedRunStepStreamEvent0 performs a merge with any union data inside the ExtendedRunStepStreamEvent, using the provided ExtendedRunStepStreamEvent0
func (t *ExtendedRunStepStreamEvent) MergeExtendedRunStepStreamEvent0(v ExtendedRunStepStreamEvent0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedRunStepStreamEvent1 returns the union data inside the ExtendedRunStepStreamEvent as a ExtendedRunStepStreamEvent1
func (t ExtendedRunStepStreamEvent) AsExtendedRunStepStreamEvent1() (ExtendedRunStepStreamEvent1, error) {
	var body ExtendedRunStepStreamEvent1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedRunStepStreamEvent1 overwrites any union data inside the ExtendedRunStepStreamEvent as the provided ExtendedRunStepStreamEvent1
func (t *ExtendedRunStepStreamEvent) FromExtendedRunStepStreamEvent1(v ExtendedRunStepStreamEvent1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedRunStepStreamEvent1 performs a merge with any union data inside the ExtendedRunStepStreamEvent, using the provided ExtendedRunStepStreamEvent1
func (t *ExtendedRunStepStreamEvent) MergeExtendedRunStepStreamEvent1(v ExtendedRunStepStreamEvent1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedRunStepStreamEvent2 returns the union data inside the ExtendedRunStepStreamEvent as a ExtendedRunStepStreamEvent2
func (t ExtendedRunStepStreamEvent) AsExtendedRunStepStreamEvent2() (ExtendedRunStepStreamEvent2, error) {
	var body ExtendedRunStepStreamEvent2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedRunStepStreamEvent2 overwrites any union data inside the ExtendedRunStepStreamEvent as the provided ExtendedRunStepStreamEvent2
func (t *ExtendedRunStepStreamEvent) FromExtendedRunStepStreamEvent2(v ExtendedRunStepStreamEvent2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedRunStepStreamEvent2 performs a merge with any union data inside the ExtendedRunStepStreamEvent, using the provided ExtendedRunStepStreamEvent2
func (t *ExtendedRunStepStreamEvent) MergeExtendedRunStepStreamEvent2(v ExtendedRunStepStreamEvent2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedRunStepStreamEvent3 returns the union data inside the ExtendedRunStepStreamEvent as a ExtendedRunStepStreamEvent3
func (t ExtendedRunStepStreamEvent) AsExtendedRunStepStreamEvent3() (ExtendedRunStepStreamEvent3, error) {
	var body ExtendedRunStepStreamEvent3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedRunStepStreamEvent3 overwrites any union data inside the ExtendedRunStepStreamEvent as the provided ExtendedRunStepStreamEvent3
func (t *ExtendedRunStepStreamEvent) FromExtendedRunStepStreamEvent3(v ExtendedRunStepStreamEvent3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedRunStepStreamEvent3 performs a merge with any union data inside the ExtendedRunStepStreamEvent, using the provided ExtendedRunStepStreamEvent3
func (t *ExtendedRunStepStreamEvent) MergeExtendedRunStepStreamEvent3(v ExtendedRunStepStreamEvent3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedRunStepStreamEvent4 returns the union data inside the ExtendedRunStepStreamEvent as a ExtendedRunStepStreamEvent4
func (t ExtendedRunStepStreamEvent) AsExtendedRunStepStreamEvent4() (ExtendedRunStepStreamEvent4, error) {
	var body ExtendedRunStepStreamEvent4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedRunStepStreamEvent4 overwrites any union data inside the ExtendedRunStepStreamEvent as the provided ExtendedRunStepStreamEvent4
func (t *ExtendedRunStepStreamEvent) FromExtendedRunStepStreamEvent4(v ExtendedRunStepStreamEvent4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedRunStepStreamEvent4 performs a merge with any union data inside the ExtendedRunStepStreamEvent, using the provided ExtendedRunStepStreamEvent4
func (t *ExtendedRunStepStreamEvent) MergeExtendedRunStepStreamEvent4(v ExtendedRunStepStreamEvent4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedRunStepStreamEvent5 returns the union data inside the ExtendedRunStepStreamEvent as a ExtendedRunStepStreamEvent5
func (t ExtendedRunStepStreamEvent) AsExtendedRunStepStreamEvent5() (ExtendedRunStepStreamEvent5, error) {
	var body ExtendedRunStepStreamEvent5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedRunStepStreamEvent5 overwrites any union data inside the ExtendedRunStepStreamEvent as the provided ExtendedRunStepStreamEvent5
func (t *ExtendedRunStepStreamEvent) FromExtendedRunStepStreamEvent5(v ExtendedRunStepStreamEvent5) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedRunStepStreamEvent5 performs a merge with any union data inside the ExtendedRunStepStreamEvent, using the provided ExtendedRunStepStreamEvent5
func (t *ExtendedRunStepStreamEvent) MergeExtendedRunStepStreamEvent5(v ExtendedRunStepStreamEvent5) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedRunStepStreamEvent6 returns the union data inside the ExtendedRunStepStreamEvent as a ExtendedRunStepStreamEvent6
func (t ExtendedRunStepStreamEvent) AsExtendedRunStepStreamEvent6() (ExtendedRunStepStreamEvent6, error) {
	var body ExtendedRunStepStreamEvent6
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedRunStepStreamEvent6 overwrites any union data inside the ExtendedRunStepStreamEvent as the provided ExtendedRunStepStreamEvent6
func (t *ExtendedRunStepStreamEvent) FromExtendedRunStepStreamEvent6(v ExtendedRunStepStreamEvent6) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedRunStepStreamEvent6 performs a merge with any union data inside the ExtendedRunStepStreamEvent, using the provided ExtendedRunStepStreamEvent6
func (t *ExtendedRunStepStreamEvent) MergeExtendedRunStepStreamEvent6(v ExtendedRunStepStreamEvent6) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedRunStepStreamEvent) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedRunStepStreamEvent) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedRunStreamEvent0 returns the union data inside the ExtendedRunStreamEvent as a ExtendedRunStreamEvent0
func (t ExtendedRunStreamEvent) AsExtendedRunStreamEvent0() (ExtendedRunStreamEvent0, error) {
	var body ExtendedRunStreamEvent0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedRunStreamEvent0 overwrites any union data inside the ExtendedRunStreamEvent as the provided ExtendedRunStreamEvent0
func (t *ExtendedRunStreamEvent) FromExtendedRunStreamEvent0(v ExtendedRunStreamEvent0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedRunStreamEvent0 performs a merge with any union data inside the ExtendedRunStreamEvent, using the provided ExtendedRunStreamEvent0
func (t *ExtendedRunStreamEvent) MergeExtendedRunStreamEvent0(v ExtendedRunStreamEvent0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedRunStreamEvent1 returns the union data inside the ExtendedRunStreamEvent as a ExtendedRunStreamEvent1
func (t ExtendedRunStreamEvent) AsExtendedRunStreamEvent1() (ExtendedRunStreamEvent1, error) {
	var body ExtendedRunStreamEvent1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedRunStreamEvent1 overwrites any union data inside the ExtendedRunStreamEvent as the provided ExtendedRunStreamEvent1
func (t *ExtendedRunStreamEvent) FromExtendedRunStreamEvent1(v ExtendedRunStreamEvent1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedRunStreamEvent1 performs a merge with any union data inside the ExtendedRunStreamEvent, using the provided ExtendedRunStreamEvent1
func (t *ExtendedRunStreamEvent) MergeExtendedRunStreamEvent1(v ExtendedRunStreamEvent1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedRunStreamEvent2 returns the union data inside the ExtendedRunStreamEvent as a ExtendedRunStreamEvent2
func (t ExtendedRunStreamEvent) AsExtendedRunStreamEvent2() (ExtendedRunStreamEvent2, error) {
	var body ExtendedRunStreamEvent2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedRunStreamEvent2 overwrites any union data inside the ExtendedRunStreamEvent as the provided ExtendedRunStreamEvent2
func (t *ExtendedRunStreamEvent) FromExtendedRunStreamEvent2(v ExtendedRunStreamEvent2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedRunStreamEvent2 performs a merge with any union data inside the ExtendedRunStreamEvent, using the provided ExtendedRunStreamEvent2
func (t *ExtendedRunStreamEvent) MergeExtendedRunStreamEvent2(v ExtendedRunStreamEvent2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedRunStreamEvent3 returns the union data inside the ExtendedRunStreamEvent as a ExtendedRunStreamEvent3
func (t ExtendedRunStreamEvent) AsExtendedRunStreamEvent3() (ExtendedRunStreamEvent3, error) {
	var body ExtendedRunStreamEvent3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedRunStreamEvent3 overwrites any union data inside the ExtendedRunStreamEvent as the provided ExtendedRunStreamEvent3
func (t *ExtendedRunStreamEvent) FromExtendedRunStreamEvent3(v ExtendedRunStreamEvent3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedRunStreamEvent3 performs a merge with any union data inside the ExtendedRunStreamEvent, using the provided ExtendedRunStreamEvent3
func (t *ExtendedRunStreamEvent) MergeExtendedRunStreamEvent3(v ExtendedRunStreamEvent3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedRunStreamEvent4 returns the union data inside the ExtendedRunStreamEvent as a ExtendedRunStreamEvent4
func (t ExtendedRunStreamEvent) AsExtendedRunStreamEvent4() (ExtendedRunStreamEvent4, error) {
	var body ExtendedRunStreamEvent4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedRunStreamEvent4 overwrites any union data inside the ExtendedRunStreamEvent as the provided ExtendedRunStreamEvent4
func (t *ExtendedRunStreamEvent) FromExtendedRunStreamEvent4(v ExtendedRunStreamEvent4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedRunStreamEvent4 performs a merge with any union data inside the ExtendedRunStreamEvent, using the provided ExtendedRunStreamEvent4
func (t *ExtendedRunStreamEvent) MergeExtendedRunStreamEvent4(v ExtendedRunStreamEvent4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedRunStreamEvent5 returns the union data inside the ExtendedRunStreamEvent as a ExtendedRunStreamEvent5
func (t ExtendedRunStreamEvent) AsExtendedRunStreamEvent5() (ExtendedRunStreamEvent5, error) {
	var body ExtendedRunStreamEvent5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedRunStreamEvent5 overwrites any union data inside the ExtendedRunStreamEvent as the provided ExtendedRunStreamEvent5
func (t *ExtendedRunStreamEvent) FromExtendedRunStreamEvent5(v ExtendedRunStreamEvent5) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedRunStreamEvent5 performs a merge with any union data inside the ExtendedRunStreamEvent, using the provided ExtendedRunStreamEvent5
func (t *ExtendedRunStreamEvent) MergeExtendedRunStreamEvent5(v ExtendedRunStreamEvent5) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedRunStreamEvent6 returns the union data inside the ExtendedRunStreamEvent as a ExtendedRunStreamEvent6
func (t ExtendedRunStreamEvent) AsExtendedRunStreamEvent6() (ExtendedRunStreamEvent6, error) {
	var body ExtendedRunStreamEvent6
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedRunStreamEvent6 overwrites any union data inside the ExtendedRunStreamEvent as the provided ExtendedRunStreamEvent6
func (t *ExtendedRunStreamEvent) FromExtendedRunStreamEvent6(v ExtendedRunStreamEvent6) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedRunStreamEvent6 performs a merge with any union data inside the ExtendedRunStreamEvent, using the provided ExtendedRunStreamEvent6
func (t *ExtendedRunStreamEvent) MergeExtendedRunStreamEvent6(v ExtendedRunStreamEvent6) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedRunStreamEvent7 returns the union data inside the ExtendedRunStreamEvent as a ExtendedRunStreamEvent7
func (t ExtendedRunStreamEvent) AsExtendedRunStreamEvent7() (ExtendedRunStreamEvent7, error) {
	var body ExtendedRunStreamEvent7
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedRunStreamEvent7 overwrites any union data inside the ExtendedRunStreamEvent as the provided ExtendedRunStreamEvent7
func (t *ExtendedRunStreamEvent) FromExtendedRunStreamEvent7(v ExtendedRunStreamEvent7) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedRunStreamEvent7 performs a merge with any union data inside the ExtendedRunStreamEvent, using the provided ExtendedRunStreamEvent7
func (t *ExtendedRunStreamEvent) MergeExtendedRunStreamEvent7(v ExtendedRunStreamEvent7) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtendedRunStreamEvent8 returns the union data inside the ExtendedRunStreamEvent as a ExtendedRunStreamEvent8
func (t ExtendedRunStreamEvent) AsExtendedRunStreamEvent8() (ExtendedRunStreamEvent8, error) {
	var body ExtendedRunStreamEvent8
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedRunStreamEvent8 overwrites any union data inside the ExtendedRunStreamEvent as the provided ExtendedRunStreamEvent8
func (t *ExtendedRunStreamEvent) FromExtendedRunStreamEvent8(v ExtendedRunStreamEvent8) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedRunStreamEvent8 performs a merge with any union data inside the ExtendedRunStreamEvent, using the provided ExtendedRunStreamEvent8
func (t *ExtendedRunStreamEvent) MergeExtendedRunStreamEvent8(v ExtendedRunStreamEvent8) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedRunStreamEvent) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedRunStreamEvent) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtendedThreadStreamEvent0 returns the union data inside the ExtendedThreadStreamEvent as a ExtendedThreadStreamEvent0
func (t ExtendedThreadStreamEvent) AsExtendedThreadStreamEvent0() (ExtendedThreadStreamEvent0, error) {
	var body ExtendedThreadStreamEvent0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtendedThreadStreamEvent0 overwrites any union data inside the ExtendedThreadStreamEvent as the provided ExtendedThreadStreamEvent0
func (t *ExtendedThreadStreamEvent) FromExtendedThreadStreamEvent0(v ExtendedThreadStreamEvent0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtendedThreadStreamEvent0 performs a merge with any union data inside the ExtendedThreadStreamEvent, using the provided ExtendedThreadStreamEvent0
func (t *ExtendedThreadStreamEvent) MergeExtendedThreadStreamEvent0(v ExtendedThreadStreamEvent0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtendedThreadStreamEvent) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtendedThreadStreamEvent) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFineTuningJobHyperparametersNEpochs0 returns the union data inside the FineTuningJob_Hyperparameters_NEpochs as a FineTuningJobHyperparametersNEpochs0
func (t FineTuningJob_Hyperparameters_NEpochs) AsFineTuningJobHyperparametersNEpochs0() (FineTuningJobHyperparametersNEpochs0, error) {
	var body FineTuningJobHyperparametersNEpochs0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFineTuningJobHyperparametersNEpochs0 overwrites any union data inside the FineTuningJob_Hyperparameters_NEpochs as the provided FineTuningJobHyperparametersNEpochs0
func (t *FineTuningJob_Hyperparameters_NEpochs) FromFineTuningJobHyperparametersNEpochs0(v FineTuningJobHyperparametersNEpochs0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFineTuningJobHyperparametersNEpochs0 performs a merge with any union data inside the FineTuningJob_Hyperparameters_NEpochs, using the provided FineTuningJobHyperparametersNEpochs0
func (t *FineTuningJob_Hyperparameters_NEpochs) MergeFineTuningJobHyperparametersNEpochs0(v FineTuningJobHyperparametersNEpochs0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFineTuningJobHyperparametersNEpochs1 returns the union data inside the FineTuningJob_Hyperparameters_NEpochs as a FineTuningJobHyperparametersNEpochs1
func (t FineTuningJob_Hyperparameters_NEpochs) AsFineTuningJobHyperparametersNEpochs1() (FineTuningJobHyperparametersNEpochs1, error) {
	var body FineTuningJobHyperparametersNEpochs1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFineTuningJobHyperparametersNEpochs1 overwrites any union data inside the FineTuningJob_Hyperparameters_NEpochs as the provided FineTuningJobHyperparametersNEpochs1
func (t *FineTuningJob_Hyperparameters_NEpochs) FromFineTuningJobHyperparametersNEpochs1(v FineTuningJobHyperparametersNEpochs1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFineTuningJobHyperparametersNEpochs1 performs a merge with any union data inside the FineTuningJob_Hyperparameters_NEpochs, using the provided FineTuningJobHyperparametersNEpochs1
func (t *FineTuningJob_Hyperparameters_NEpochs) MergeFineTuningJobHyperparametersNEpochs1(v FineTuningJobHyperparametersNEpochs1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FineTuningJob_Hyperparameters_NEpochs) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FineTuningJob_Hyperparameters_NEpochs) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMessageContentTextAnnotationsFileCitationObject returns the union data inside the MessageContentTextObject_Text_Annotations_Item as a MessageContentTextAnnotationsFileCitationObject
func (t MessageContentTextObject_Text_Annotations_Item) AsMessageContentTextAnnotationsFileCitationObject() (MessageContentTextAnnotationsFileCitationObject, error) {
	var body MessageContentTextAnnotationsFileCitationObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageContentTextAnnotationsFileCitationObject overwrites any union data inside the MessageContentTextObject_Text_Annotations_Item as the provided MessageContentTextAnnotationsFileCitationObject
func (t *MessageContentTextObject_Text_Annotations_Item) FromMessageContentTextAnnotationsFileCitationObject(v MessageContentTextAnnotationsFileCitationObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageContentTextAnnotationsFileCitationObject performs a merge with any union data inside the MessageContentTextObject_Text_Annotations_Item, using the provided MessageContentTextAnnotationsFileCitationObject
func (t *MessageContentTextObject_Text_Annotations_Item) MergeMessageContentTextAnnotationsFileCitationObject(v MessageContentTextAnnotationsFileCitationObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageContentTextAnnotationsFilePathObject returns the union data inside the MessageContentTextObject_Text_Annotations_Item as a MessageContentTextAnnotationsFilePathObject
func (t MessageContentTextObject_Text_Annotations_Item) AsMessageContentTextAnnotationsFilePathObject() (MessageContentTextAnnotationsFilePathObject, error) {
	var body MessageContentTextAnnotationsFilePathObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageContentTextAnnotationsFilePathObject overwrites any union data inside the MessageContentTextObject_Text_Annotations_Item as the provided MessageContentTextAnnotationsFilePathObject
func (t *MessageContentTextObject_Text_Annotations_Item) FromMessageContentTextAnnotationsFilePathObject(v MessageContentTextAnnotationsFilePathObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageContentTextAnnotationsFilePathObject performs a merge with any union data inside the MessageContentTextObject_Text_Annotations_Item, using the provided MessageContentTextAnnotationsFilePathObject
func (t *MessageContentTextObject_Text_Annotations_Item) MergeMessageContentTextAnnotationsFilePathObject(v MessageContentTextAnnotationsFilePathObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MessageContentTextObject_Text_Annotations_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MessageContentTextObject_Text_Annotations_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMessageDeltaContentTextAnnotationsFileCitationObject returns the union data inside the MessageDeltaContentTextObject_Text_Annotations_Item as a MessageDeltaContentTextAnnotationsFileCitationObject
func (t MessageDeltaContentTextObject_Text_Annotations_Item) AsMessageDeltaContentTextAnnotationsFileCitationObject() (MessageDeltaContentTextAnnotationsFileCitationObject, error) {
	var body MessageDeltaContentTextAnnotationsFileCitationObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageDeltaContentTextAnnotationsFileCitationObject overwrites any union data inside the MessageDeltaContentTextObject_Text_Annotations_Item as the provided MessageDeltaContentTextAnnotationsFileCitationObject
func (t *MessageDeltaContentTextObject_Text_Annotations_Item) FromMessageDeltaContentTextAnnotationsFileCitationObject(v MessageDeltaContentTextAnnotationsFileCitationObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageDeltaContentTextAnnotationsFileCitationObject performs a merge with any union data inside the MessageDeltaContentTextObject_Text_Annotations_Item, using the provided MessageDeltaContentTextAnnotationsFileCitationObject
func (t *MessageDeltaContentTextObject_Text_Annotations_Item) MergeMessageDeltaContentTextAnnotationsFileCitationObject(v MessageDeltaContentTextAnnotationsFileCitationObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageDeltaContentTextAnnotationsFilePathObject returns the union data inside the MessageDeltaContentTextObject_Text_Annotations_Item as a MessageDeltaContentTextAnnotationsFilePathObject
func (t MessageDeltaContentTextObject_Text_Annotations_Item) AsMessageDeltaContentTextAnnotationsFilePathObject() (MessageDeltaContentTextAnnotationsFilePathObject, error) {
	var body MessageDeltaContentTextAnnotationsFilePathObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageDeltaContentTextAnnotationsFilePathObject overwrites any union data inside the MessageDeltaContentTextObject_Text_Annotations_Item as the provided MessageDeltaContentTextAnnotationsFilePathObject
func (t *MessageDeltaContentTextObject_Text_Annotations_Item) FromMessageDeltaContentTextAnnotationsFilePathObject(v MessageDeltaContentTextAnnotationsFilePathObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageDeltaContentTextAnnotationsFilePathObject performs a merge with any union data inside the MessageDeltaContentTextObject_Text_Annotations_Item, using the provided MessageDeltaContentTextAnnotationsFilePathObject
func (t *MessageDeltaContentTextObject_Text_Annotations_Item) MergeMessageDeltaContentTextAnnotationsFilePathObject(v MessageDeltaContentTextAnnotationsFilePathObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MessageDeltaContentTextObject_Text_Annotations_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MessageDeltaContentTextObject_Text_Annotations_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMessageDeltaContentImageFileObject returns the union data inside the MessageDeltaObject_Delta_Content_Item as a MessageDeltaContentImageFileObject
func (t MessageDeltaObject_Delta_Content_Item) AsMessageDeltaContentImageFileObject() (MessageDeltaContentImageFileObject, error) {
	var body MessageDeltaContentImageFileObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageDeltaContentImageFileObject overwrites any union data inside the MessageDeltaObject_Delta_Content_Item as the provided MessageDeltaContentImageFileObject
func (t *MessageDeltaObject_Delta_Content_Item) FromMessageDeltaContentImageFileObject(v MessageDeltaContentImageFileObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageDeltaContentImageFileObject performs a merge with any union data inside the MessageDeltaObject_Delta_Content_Item, using the provided MessageDeltaContentImageFileObject
func (t *MessageDeltaObject_Delta_Content_Item) MergeMessageDeltaContentImageFileObject(v MessageDeltaContentImageFileObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageDeltaContentTextObject returns the union data inside the MessageDeltaObject_Delta_Content_Item as a MessageDeltaContentTextObject
func (t MessageDeltaObject_Delta_Content_Item) AsMessageDeltaContentTextObject() (MessageDeltaContentTextObject, error) {
	var body MessageDeltaContentTextObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageDeltaContentTextObject overwrites any union data inside the MessageDeltaObject_Delta_Content_Item as the provided MessageDeltaContentTextObject
func (t *MessageDeltaObject_Delta_Content_Item) FromMessageDeltaContentTextObject(v MessageDeltaContentTextObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageDeltaContentTextObject performs a merge with any union data inside the MessageDeltaObject_Delta_Content_Item, using the provided MessageDeltaContentTextObject
func (t *MessageDeltaObject_Delta_Content_Item) MergeMessageDeltaContentTextObject(v MessageDeltaContentTextObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MessageDeltaObject_Delta_Content_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MessageDeltaObject_Delta_Content_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMessageContentImageFileObject returns the union data inside the MessageObject_Content_Item as a MessageContentImageFileObject
func (t MessageObject_Content_Item) AsMessageContentImageFileObject() (MessageContentImageFileObject, error) {
	var body MessageContentImageFileObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageContentImageFileObject overwrites any union data inside the MessageObject_Content_Item as the provided MessageContentImageFileObject
func (t *MessageObject_Content_Item) FromMessageContentImageFileObject(v MessageContentImageFileObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageContentImageFileObject performs a merge with any union data inside the MessageObject_Content_Item, using the provided MessageContentImageFileObject
func (t *MessageObject_Content_Item) MergeMessageContentImageFileObject(v MessageContentImageFileObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageContentTextObject returns the union data inside the MessageObject_Content_Item as a MessageContentTextObject
func (t MessageObject_Content_Item) AsMessageContentTextObject() (MessageContentTextObject, error) {
	var body MessageContentTextObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageContentTextObject overwrites any union data inside the MessageObject_Content_Item as the provided MessageContentTextObject
func (t *MessageObject_Content_Item) FromMessageContentTextObject(v MessageContentTextObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageContentTextObject performs a merge with any union data inside the MessageObject_Content_Item, using the provided MessageContentTextObject
func (t *MessageObject_Content_Item) MergeMessageContentTextObject(v MessageContentTextObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MessageObject_Content_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MessageObject_Content_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMessageStreamEvent0 returns the union data inside the MessageStreamEvent as a MessageStreamEvent0
func (t MessageStreamEvent) AsMessageStreamEvent0() (MessageStreamEvent0, error) {
	var body MessageStreamEvent0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageStreamEvent0 overwrites any union data inside the MessageStreamEvent as the provided MessageStreamEvent0
func (t *MessageStreamEvent) FromMessageStreamEvent0(v MessageStreamEvent0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageStreamEvent0 performs a merge with any union data inside the MessageStreamEvent, using the provided MessageStreamEvent0
func (t *MessageStreamEvent) MergeMessageStreamEvent0(v MessageStreamEvent0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageStreamEvent1 returns the union data inside the MessageStreamEvent as a MessageStreamEvent1
func (t MessageStreamEvent) AsMessageStreamEvent1() (MessageStreamEvent1, error) {
	var body MessageStreamEvent1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageStreamEvent1 overwrites any union data inside the MessageStreamEvent as the provided MessageStreamEvent1
func (t *MessageStreamEvent) FromMessageStreamEvent1(v MessageStreamEvent1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageStreamEvent1 performs a merge with any union data inside the MessageStreamEvent, using the provided MessageStreamEvent1
func (t *MessageStreamEvent) MergeMessageStreamEvent1(v MessageStreamEvent1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageStreamEvent2 returns the union data inside the MessageStreamEvent as a MessageStreamEvent2
func (t MessageStreamEvent) AsMessageStreamEvent2() (MessageStreamEvent2, error) {
	var body MessageStreamEvent2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageStreamEvent2 overwrites any union data inside the MessageStreamEvent as the provided MessageStreamEvent2
func (t *MessageStreamEvent) FromMessageStreamEvent2(v MessageStreamEvent2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageStreamEvent2 performs a merge with any union data inside the MessageStreamEvent, using the provided MessageStreamEvent2
func (t *MessageStreamEvent) MergeMessageStreamEvent2(v MessageStreamEvent2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageStreamEvent3 returns the union data inside the MessageStreamEvent as a MessageStreamEvent3
func (t MessageStreamEvent) AsMessageStreamEvent3() (MessageStreamEvent3, error) {
	var body MessageStreamEvent3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageStreamEvent3 overwrites any union data inside the MessageStreamEvent as the provided MessageStreamEvent3
func (t *MessageStreamEvent) FromMessageStreamEvent3(v MessageStreamEvent3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageStreamEvent3 performs a merge with any union data inside the MessageStreamEvent, using the provided MessageStreamEvent3
func (t *MessageStreamEvent) MergeMessageStreamEvent3(v MessageStreamEvent3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageStreamEvent4 returns the union data inside the MessageStreamEvent as a MessageStreamEvent4
func (t MessageStreamEvent) AsMessageStreamEvent4() (MessageStreamEvent4, error) {
	var body MessageStreamEvent4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageStreamEvent4 overwrites any union data inside the MessageStreamEvent as the provided MessageStreamEvent4
func (t *MessageStreamEvent) FromMessageStreamEvent4(v MessageStreamEvent4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageStreamEvent4 performs a merge with any union data inside the MessageStreamEvent, using the provided MessageStreamEvent4
func (t *MessageStreamEvent) MergeMessageStreamEvent4(v MessageStreamEvent4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MessageStreamEvent) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MessageStreamEvent) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsModifyAssistantRequestModel0 returns the union data inside the ModifyAssistantRequest_Model as a ModifyAssistantRequestModel0
func (t ModifyAssistantRequest_Model) AsModifyAssistantRequestModel0() (ModifyAssistantRequestModel0, error) {
	var body ModifyAssistantRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModifyAssistantRequestModel0 overwrites any union data inside the ModifyAssistantRequest_Model as the provided ModifyAssistantRequestModel0
func (t *ModifyAssistantRequest_Model) FromModifyAssistantRequestModel0(v ModifyAssistantRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModifyAssistantRequestModel0 performs a merge with any union data inside the ModifyAssistantRequest_Model, using the provided ModifyAssistantRequestModel0
func (t *ModifyAssistantRequest_Model) MergeModifyAssistantRequestModel0(v ModifyAssistantRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ModifyAssistantRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ModifyAssistantRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAssistantToolsCode returns the union data inside the ModifyAssistantRequest_Tools_Item as a AssistantToolsCode
func (t ModifyAssistantRequest_Tools_Item) AsAssistantToolsCode() (AssistantToolsCode, error) {
	var body AssistantToolsCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsCode overwrites any union data inside the ModifyAssistantRequest_Tools_Item as the provided AssistantToolsCode
func (t *ModifyAssistantRequest_Tools_Item) FromAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsCode performs a merge with any union data inside the ModifyAssistantRequest_Tools_Item, using the provided AssistantToolsCode
func (t *ModifyAssistantRequest_Tools_Item) MergeAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsRetrieval returns the union data inside the ModifyAssistantRequest_Tools_Item as a AssistantToolsRetrieval
func (t ModifyAssistantRequest_Tools_Item) AsAssistantToolsRetrieval() (AssistantToolsRetrieval, error) {
	var body AssistantToolsRetrieval
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsRetrieval overwrites any union data inside the ModifyAssistantRequest_Tools_Item as the provided AssistantToolsRetrieval
func (t *ModifyAssistantRequest_Tools_Item) FromAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsRetrieval performs a merge with any union data inside the ModifyAssistantRequest_Tools_Item, using the provided AssistantToolsRetrieval
func (t *ModifyAssistantRequest_Tools_Item) MergeAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsFunction returns the union data inside the ModifyAssistantRequest_Tools_Item as a AssistantToolsFunction
func (t ModifyAssistantRequest_Tools_Item) AsAssistantToolsFunction() (AssistantToolsFunction, error) {
	var body AssistantToolsFunction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsFunction overwrites any union data inside the ModifyAssistantRequest_Tools_Item as the provided AssistantToolsFunction
func (t *ModifyAssistantRequest_Tools_Item) FromAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsFunction performs a merge with any union data inside the ModifyAssistantRequest_Tools_Item, using the provided AssistantToolsFunction
func (t *ModifyAssistantRequest_Tools_Item) MergeAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ModifyAssistantRequest_Tools_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ModifyAssistantRequest_Tools_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAssistantToolsCode returns the union data inside the RunObject_Tools_Item as a AssistantToolsCode
func (t RunObject_Tools_Item) AsAssistantToolsCode() (AssistantToolsCode, error) {
	var body AssistantToolsCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsCode overwrites any union data inside the RunObject_Tools_Item as the provided AssistantToolsCode
func (t *RunObject_Tools_Item) FromAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsCode performs a merge with any union data inside the RunObject_Tools_Item, using the provided AssistantToolsCode
func (t *RunObject_Tools_Item) MergeAssistantToolsCode(v AssistantToolsCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsRetrieval returns the union data inside the RunObject_Tools_Item as a AssistantToolsRetrieval
func (t RunObject_Tools_Item) AsAssistantToolsRetrieval() (AssistantToolsRetrieval, error) {
	var body AssistantToolsRetrieval
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsRetrieval overwrites any union data inside the RunObject_Tools_Item as the provided AssistantToolsRetrieval
func (t *RunObject_Tools_Item) FromAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsRetrieval performs a merge with any union data inside the RunObject_Tools_Item, using the provided AssistantToolsRetrieval
func (t *RunObject_Tools_Item) MergeAssistantToolsRetrieval(v AssistantToolsRetrieval) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantToolsFunction returns the union data inside the RunObject_Tools_Item as a AssistantToolsFunction
func (t RunObject_Tools_Item) AsAssistantToolsFunction() (AssistantToolsFunction, error) {
	var body AssistantToolsFunction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantToolsFunction overwrites any union data inside the RunObject_Tools_Item as the provided AssistantToolsFunction
func (t *RunObject_Tools_Item) FromAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantToolsFunction performs a merge with any union data inside the RunObject_Tools_Item, using the provided AssistantToolsFunction
func (t *RunObject_Tools_Item) MergeAssistantToolsFunction(v AssistantToolsFunction) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RunObject_Tools_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RunObject_Tools_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunStepDeltaStepDetailsMessageCreationObject returns the union data inside the RunStepDeltaObject_Delta_StepDetails as a RunStepDeltaStepDetailsMessageCreationObject
func (t RunStepDeltaObject_Delta_StepDetails) AsRunStepDeltaStepDetailsMessageCreationObject() (RunStepDeltaStepDetailsMessageCreationObject, error) {
	var body RunStepDeltaStepDetailsMessageCreationObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDeltaStepDetailsMessageCreationObject overwrites any union data inside the RunStepDeltaObject_Delta_StepDetails as the provided RunStepDeltaStepDetailsMessageCreationObject
func (t *RunStepDeltaObject_Delta_StepDetails) FromRunStepDeltaStepDetailsMessageCreationObject(v RunStepDeltaStepDetailsMessageCreationObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDeltaStepDetailsMessageCreationObject performs a merge with any union data inside the RunStepDeltaObject_Delta_StepDetails, using the provided RunStepDeltaStepDetailsMessageCreationObject
func (t *RunStepDeltaObject_Delta_StepDetails) MergeRunStepDeltaStepDetailsMessageCreationObject(v RunStepDeltaStepDetailsMessageCreationObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepDeltaStepDetailsToolCallsObject returns the union data inside the RunStepDeltaObject_Delta_StepDetails as a RunStepDeltaStepDetailsToolCallsObject
func (t RunStepDeltaObject_Delta_StepDetails) AsRunStepDeltaStepDetailsToolCallsObject() (RunStepDeltaStepDetailsToolCallsObject, error) {
	var body RunStepDeltaStepDetailsToolCallsObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDeltaStepDetailsToolCallsObject overwrites any union data inside the RunStepDeltaObject_Delta_StepDetails as the provided RunStepDeltaStepDetailsToolCallsObject
func (t *RunStepDeltaObject_Delta_StepDetails) FromRunStepDeltaStepDetailsToolCallsObject(v RunStepDeltaStepDetailsToolCallsObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDeltaStepDetailsToolCallsObject performs a merge with any union data inside the RunStepDeltaObject_Delta_StepDetails, using the provided RunStepDeltaStepDetailsToolCallsObject
func (t *RunStepDeltaObject_Delta_StepDetails) MergeRunStepDeltaStepDetailsToolCallsObject(v RunStepDeltaStepDetailsToolCallsObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RunStepDeltaObject_Delta_StepDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RunStepDeltaObject_Delta_StepDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject returns the union data inside the RunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item as a RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject
func (t RunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) AsRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject() (RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject, error) {
	var body RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject overwrites any union data inside the RunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item as the provided RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject
func (t *RunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) FromRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject(v RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject performs a merge with any union data inside the RunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item, using the provided RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject
func (t *RunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) MergeRunStepDeltaStepDetailsToolCallsCodeOutputLogsObject(v RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepDeltaStepDetailsToolCallsCodeOutputImageObject returns the union data inside the RunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item as a RunStepDeltaStepDetailsToolCallsCodeOutputImageObject
func (t RunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) AsRunStepDeltaStepDetailsToolCallsCodeOutputImageObject() (RunStepDeltaStepDetailsToolCallsCodeOutputImageObject, error) {
	var body RunStepDeltaStepDetailsToolCallsCodeOutputImageObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDeltaStepDetailsToolCallsCodeOutputImageObject overwrites any union data inside the RunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item as the provided RunStepDeltaStepDetailsToolCallsCodeOutputImageObject
func (t *RunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) FromRunStepDeltaStepDetailsToolCallsCodeOutputImageObject(v RunStepDeltaStepDetailsToolCallsCodeOutputImageObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDeltaStepDetailsToolCallsCodeOutputImageObject performs a merge with any union data inside the RunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item, using the provided RunStepDeltaStepDetailsToolCallsCodeOutputImageObject
func (t *RunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) MergeRunStepDeltaStepDetailsToolCallsCodeOutputImageObject(v RunStepDeltaStepDetailsToolCallsCodeOutputImageObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RunStepDeltaStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunStepDeltaStepDetailsToolCallsCodeObject returns the union data inside the RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item as a RunStepDeltaStepDetailsToolCallsCodeObject
func (t RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) AsRunStepDeltaStepDetailsToolCallsCodeObject() (RunStepDeltaStepDetailsToolCallsCodeObject, error) {
	var body RunStepDeltaStepDetailsToolCallsCodeObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDeltaStepDetailsToolCallsCodeObject overwrites any union data inside the RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item as the provided RunStepDeltaStepDetailsToolCallsCodeObject
func (t *RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) FromRunStepDeltaStepDetailsToolCallsCodeObject(v RunStepDeltaStepDetailsToolCallsCodeObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDeltaStepDetailsToolCallsCodeObject performs a merge with any union data inside the RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item, using the provided RunStepDeltaStepDetailsToolCallsCodeObject
func (t *RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) MergeRunStepDeltaStepDetailsToolCallsCodeObject(v RunStepDeltaStepDetailsToolCallsCodeObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepDeltaStepDetailsToolCallsRetrievalObject returns the union data inside the RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item as a RunStepDeltaStepDetailsToolCallsRetrievalObject
func (t RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) AsRunStepDeltaStepDetailsToolCallsRetrievalObject() (RunStepDeltaStepDetailsToolCallsRetrievalObject, error) {
	var body RunStepDeltaStepDetailsToolCallsRetrievalObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDeltaStepDetailsToolCallsRetrievalObject overwrites any union data inside the RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item as the provided RunStepDeltaStepDetailsToolCallsRetrievalObject
func (t *RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) FromRunStepDeltaStepDetailsToolCallsRetrievalObject(v RunStepDeltaStepDetailsToolCallsRetrievalObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDeltaStepDetailsToolCallsRetrievalObject performs a merge with any union data inside the RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item, using the provided RunStepDeltaStepDetailsToolCallsRetrievalObject
func (t *RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) MergeRunStepDeltaStepDetailsToolCallsRetrievalObject(v RunStepDeltaStepDetailsToolCallsRetrievalObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepDeltaStepDetailsToolCallsFunctionObject returns the union data inside the RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item as a RunStepDeltaStepDetailsToolCallsFunctionObject
func (t RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) AsRunStepDeltaStepDetailsToolCallsFunctionObject() (RunStepDeltaStepDetailsToolCallsFunctionObject, error) {
	var body RunStepDeltaStepDetailsToolCallsFunctionObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDeltaStepDetailsToolCallsFunctionObject overwrites any union data inside the RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item as the provided RunStepDeltaStepDetailsToolCallsFunctionObject
func (t *RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) FromRunStepDeltaStepDetailsToolCallsFunctionObject(v RunStepDeltaStepDetailsToolCallsFunctionObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDeltaStepDetailsToolCallsFunctionObject performs a merge with any union data inside the RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item, using the provided RunStepDeltaStepDetailsToolCallsFunctionObject
func (t *RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) MergeRunStepDeltaStepDetailsToolCallsFunctionObject(v RunStepDeltaStepDetailsToolCallsFunctionObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RunStepDeltaStepDetailsToolCallsObject_ToolCalls_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunStepDetailsToolCallsCodeOutputLogsObject returns the union data inside the RunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item as a RunStepDetailsToolCallsCodeOutputLogsObject
func (t RunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) AsRunStepDetailsToolCallsCodeOutputLogsObject() (RunStepDetailsToolCallsCodeOutputLogsObject, error) {
	var body RunStepDetailsToolCallsCodeOutputLogsObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDetailsToolCallsCodeOutputLogsObject overwrites any union data inside the RunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item as the provided RunStepDetailsToolCallsCodeOutputLogsObject
func (t *RunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) FromRunStepDetailsToolCallsCodeOutputLogsObject(v RunStepDetailsToolCallsCodeOutputLogsObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDetailsToolCallsCodeOutputLogsObject performs a merge with any union data inside the RunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item, using the provided RunStepDetailsToolCallsCodeOutputLogsObject
func (t *RunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) MergeRunStepDetailsToolCallsCodeOutputLogsObject(v RunStepDetailsToolCallsCodeOutputLogsObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepDetailsToolCallsCodeOutputImageObject returns the union data inside the RunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item as a RunStepDetailsToolCallsCodeOutputImageObject
func (t RunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) AsRunStepDetailsToolCallsCodeOutputImageObject() (RunStepDetailsToolCallsCodeOutputImageObject, error) {
	var body RunStepDetailsToolCallsCodeOutputImageObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDetailsToolCallsCodeOutputImageObject overwrites any union data inside the RunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item as the provided RunStepDetailsToolCallsCodeOutputImageObject
func (t *RunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) FromRunStepDetailsToolCallsCodeOutputImageObject(v RunStepDetailsToolCallsCodeOutputImageObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDetailsToolCallsCodeOutputImageObject performs a merge with any union data inside the RunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item, using the provided RunStepDetailsToolCallsCodeOutputImageObject
func (t *RunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) MergeRunStepDetailsToolCallsCodeOutputImageObject(v RunStepDetailsToolCallsCodeOutputImageObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RunStepDetailsToolCallsCodeObject_CodeInterpreter_Outputs_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunStepDetailsToolCallsCodeObject returns the union data inside the RunStepDetailsToolCallsObject_ToolCalls_Item as a RunStepDetailsToolCallsCodeObject
func (t RunStepDetailsToolCallsObject_ToolCalls_Item) AsRunStepDetailsToolCallsCodeObject() (RunStepDetailsToolCallsCodeObject, error) {
	var body RunStepDetailsToolCallsCodeObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDetailsToolCallsCodeObject overwrites any union data inside the RunStepDetailsToolCallsObject_ToolCalls_Item as the provided RunStepDetailsToolCallsCodeObject
func (t *RunStepDetailsToolCallsObject_ToolCalls_Item) FromRunStepDetailsToolCallsCodeObject(v RunStepDetailsToolCallsCodeObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDetailsToolCallsCodeObject performs a merge with any union data inside the RunStepDetailsToolCallsObject_ToolCalls_Item, using the provided RunStepDetailsToolCallsCodeObject
func (t *RunStepDetailsToolCallsObject_ToolCalls_Item) MergeRunStepDetailsToolCallsCodeObject(v RunStepDetailsToolCallsCodeObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepDetailsToolCallsRetrievalObject returns the union data inside the RunStepDetailsToolCallsObject_ToolCalls_Item as a RunStepDetailsToolCallsRetrievalObject
func (t RunStepDetailsToolCallsObject_ToolCalls_Item) AsRunStepDetailsToolCallsRetrievalObject() (RunStepDetailsToolCallsRetrievalObject, error) {
	var body RunStepDetailsToolCallsRetrievalObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDetailsToolCallsRetrievalObject overwrites any union data inside the RunStepDetailsToolCallsObject_ToolCalls_Item as the provided RunStepDetailsToolCallsRetrievalObject
func (t *RunStepDetailsToolCallsObject_ToolCalls_Item) FromRunStepDetailsToolCallsRetrievalObject(v RunStepDetailsToolCallsRetrievalObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDetailsToolCallsRetrievalObject performs a merge with any union data inside the RunStepDetailsToolCallsObject_ToolCalls_Item, using the provided RunStepDetailsToolCallsRetrievalObject
func (t *RunStepDetailsToolCallsObject_ToolCalls_Item) MergeRunStepDetailsToolCallsRetrievalObject(v RunStepDetailsToolCallsRetrievalObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepDetailsToolCallsFunctionObject returns the union data inside the RunStepDetailsToolCallsObject_ToolCalls_Item as a RunStepDetailsToolCallsFunctionObject
func (t RunStepDetailsToolCallsObject_ToolCalls_Item) AsRunStepDetailsToolCallsFunctionObject() (RunStepDetailsToolCallsFunctionObject, error) {
	var body RunStepDetailsToolCallsFunctionObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDetailsToolCallsFunctionObject overwrites any union data inside the RunStepDetailsToolCallsObject_ToolCalls_Item as the provided RunStepDetailsToolCallsFunctionObject
func (t *RunStepDetailsToolCallsObject_ToolCalls_Item) FromRunStepDetailsToolCallsFunctionObject(v RunStepDetailsToolCallsFunctionObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDetailsToolCallsFunctionObject performs a merge with any union data inside the RunStepDetailsToolCallsObject_ToolCalls_Item, using the provided RunStepDetailsToolCallsFunctionObject
func (t *RunStepDetailsToolCallsObject_ToolCalls_Item) MergeRunStepDetailsToolCallsFunctionObject(v RunStepDetailsToolCallsFunctionObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RunStepDetailsToolCallsObject_ToolCalls_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RunStepDetailsToolCallsObject_ToolCalls_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunStepDetailsMessageCreationObject returns the union data inside the RunStepObject_StepDetails as a RunStepDetailsMessageCreationObject
func (t RunStepObject_StepDetails) AsRunStepDetailsMessageCreationObject() (RunStepDetailsMessageCreationObject, error) {
	var body RunStepDetailsMessageCreationObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDetailsMessageCreationObject overwrites any union data inside the RunStepObject_StepDetails as the provided RunStepDetailsMessageCreationObject
func (t *RunStepObject_StepDetails) FromRunStepDetailsMessageCreationObject(v RunStepDetailsMessageCreationObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDetailsMessageCreationObject performs a merge with any union data inside the RunStepObject_StepDetails, using the provided RunStepDetailsMessageCreationObject
func (t *RunStepObject_StepDetails) MergeRunStepDetailsMessageCreationObject(v RunStepDetailsMessageCreationObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepDetailsToolCallsObject returns the union data inside the RunStepObject_StepDetails as a RunStepDetailsToolCallsObject
func (t RunStepObject_StepDetails) AsRunStepDetailsToolCallsObject() (RunStepDetailsToolCallsObject, error) {
	var body RunStepDetailsToolCallsObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepDetailsToolCallsObject overwrites any union data inside the RunStepObject_StepDetails as the provided RunStepDetailsToolCallsObject
func (t *RunStepObject_StepDetails) FromRunStepDetailsToolCallsObject(v RunStepDetailsToolCallsObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepDetailsToolCallsObject performs a merge with any union data inside the RunStepObject_StepDetails, using the provided RunStepDetailsToolCallsObject
func (t *RunStepObject_StepDetails) MergeRunStepDetailsToolCallsObject(v RunStepDetailsToolCallsObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RunStepObject_StepDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RunStepObject_StepDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunStepStreamEvent0 returns the union data inside the RunStepStreamEvent as a RunStepStreamEvent0
func (t RunStepStreamEvent) AsRunStepStreamEvent0() (RunStepStreamEvent0, error) {
	var body RunStepStreamEvent0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepStreamEvent0 overwrites any union data inside the RunStepStreamEvent as the provided RunStepStreamEvent0
func (t *RunStepStreamEvent) FromRunStepStreamEvent0(v RunStepStreamEvent0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepStreamEvent0 performs a merge with any union data inside the RunStepStreamEvent, using the provided RunStepStreamEvent0
func (t *RunStepStreamEvent) MergeRunStepStreamEvent0(v RunStepStreamEvent0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepStreamEvent1 returns the union data inside the RunStepStreamEvent as a RunStepStreamEvent1
func (t RunStepStreamEvent) AsRunStepStreamEvent1() (RunStepStreamEvent1, error) {
	var body RunStepStreamEvent1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepStreamEvent1 overwrites any union data inside the RunStepStreamEvent as the provided RunStepStreamEvent1
func (t *RunStepStreamEvent) FromRunStepStreamEvent1(v RunStepStreamEvent1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepStreamEvent1 performs a merge with any union data inside the RunStepStreamEvent, using the provided RunStepStreamEvent1
func (t *RunStepStreamEvent) MergeRunStepStreamEvent1(v RunStepStreamEvent1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepStreamEvent2 returns the union data inside the RunStepStreamEvent as a RunStepStreamEvent2
func (t RunStepStreamEvent) AsRunStepStreamEvent2() (RunStepStreamEvent2, error) {
	var body RunStepStreamEvent2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepStreamEvent2 overwrites any union data inside the RunStepStreamEvent as the provided RunStepStreamEvent2
func (t *RunStepStreamEvent) FromRunStepStreamEvent2(v RunStepStreamEvent2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepStreamEvent2 performs a merge with any union data inside the RunStepStreamEvent, using the provided RunStepStreamEvent2
func (t *RunStepStreamEvent) MergeRunStepStreamEvent2(v RunStepStreamEvent2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepStreamEvent3 returns the union data inside the RunStepStreamEvent as a RunStepStreamEvent3
func (t RunStepStreamEvent) AsRunStepStreamEvent3() (RunStepStreamEvent3, error) {
	var body RunStepStreamEvent3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepStreamEvent3 overwrites any union data inside the RunStepStreamEvent as the provided RunStepStreamEvent3
func (t *RunStepStreamEvent) FromRunStepStreamEvent3(v RunStepStreamEvent3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepStreamEvent3 performs a merge with any union data inside the RunStepStreamEvent, using the provided RunStepStreamEvent3
func (t *RunStepStreamEvent) MergeRunStepStreamEvent3(v RunStepStreamEvent3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepStreamEvent4 returns the union data inside the RunStepStreamEvent as a RunStepStreamEvent4
func (t RunStepStreamEvent) AsRunStepStreamEvent4() (RunStepStreamEvent4, error) {
	var body RunStepStreamEvent4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepStreamEvent4 overwrites any union data inside the RunStepStreamEvent as the provided RunStepStreamEvent4
func (t *RunStepStreamEvent) FromRunStepStreamEvent4(v RunStepStreamEvent4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepStreamEvent4 performs a merge with any union data inside the RunStepStreamEvent, using the provided RunStepStreamEvent4
func (t *RunStepStreamEvent) MergeRunStepStreamEvent4(v RunStepStreamEvent4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepStreamEvent5 returns the union data inside the RunStepStreamEvent as a RunStepStreamEvent5
func (t RunStepStreamEvent) AsRunStepStreamEvent5() (RunStepStreamEvent5, error) {
	var body RunStepStreamEvent5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepStreamEvent5 overwrites any union data inside the RunStepStreamEvent as the provided RunStepStreamEvent5
func (t *RunStepStreamEvent) FromRunStepStreamEvent5(v RunStepStreamEvent5) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepStreamEvent5 performs a merge with any union data inside the RunStepStreamEvent, using the provided RunStepStreamEvent5
func (t *RunStepStreamEvent) MergeRunStepStreamEvent5(v RunStepStreamEvent5) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStepStreamEvent6 returns the union data inside the RunStepStreamEvent as a RunStepStreamEvent6
func (t RunStepStreamEvent) AsRunStepStreamEvent6() (RunStepStreamEvent6, error) {
	var body RunStepStreamEvent6
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStepStreamEvent6 overwrites any union data inside the RunStepStreamEvent as the provided RunStepStreamEvent6
func (t *RunStepStreamEvent) FromRunStepStreamEvent6(v RunStepStreamEvent6) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStepStreamEvent6 performs a merge with any union data inside the RunStepStreamEvent, using the provided RunStepStreamEvent6
func (t *RunStepStreamEvent) MergeRunStepStreamEvent6(v RunStepStreamEvent6) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RunStepStreamEvent) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RunStepStreamEvent) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunStreamEvent0 returns the union data inside the RunStreamEvent as a RunStreamEvent0
func (t RunStreamEvent) AsRunStreamEvent0() (RunStreamEvent0, error) {
	var body RunStreamEvent0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStreamEvent0 overwrites any union data inside the RunStreamEvent as the provided RunStreamEvent0
func (t *RunStreamEvent) FromRunStreamEvent0(v RunStreamEvent0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStreamEvent0 performs a merge with any union data inside the RunStreamEvent, using the provided RunStreamEvent0
func (t *RunStreamEvent) MergeRunStreamEvent0(v RunStreamEvent0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStreamEvent1 returns the union data inside the RunStreamEvent as a RunStreamEvent1
func (t RunStreamEvent) AsRunStreamEvent1() (RunStreamEvent1, error) {
	var body RunStreamEvent1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStreamEvent1 overwrites any union data inside the RunStreamEvent as the provided RunStreamEvent1
func (t *RunStreamEvent) FromRunStreamEvent1(v RunStreamEvent1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStreamEvent1 performs a merge with any union data inside the RunStreamEvent, using the provided RunStreamEvent1
func (t *RunStreamEvent) MergeRunStreamEvent1(v RunStreamEvent1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStreamEvent2 returns the union data inside the RunStreamEvent as a RunStreamEvent2
func (t RunStreamEvent) AsRunStreamEvent2() (RunStreamEvent2, error) {
	var body RunStreamEvent2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStreamEvent2 overwrites any union data inside the RunStreamEvent as the provided RunStreamEvent2
func (t *RunStreamEvent) FromRunStreamEvent2(v RunStreamEvent2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStreamEvent2 performs a merge with any union data inside the RunStreamEvent, using the provided RunStreamEvent2
func (t *RunStreamEvent) MergeRunStreamEvent2(v RunStreamEvent2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStreamEvent3 returns the union data inside the RunStreamEvent as a RunStreamEvent3
func (t RunStreamEvent) AsRunStreamEvent3() (RunStreamEvent3, error) {
	var body RunStreamEvent3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStreamEvent3 overwrites any union data inside the RunStreamEvent as the provided RunStreamEvent3
func (t *RunStreamEvent) FromRunStreamEvent3(v RunStreamEvent3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStreamEvent3 performs a merge with any union data inside the RunStreamEvent, using the provided RunStreamEvent3
func (t *RunStreamEvent) MergeRunStreamEvent3(v RunStreamEvent3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStreamEvent4 returns the union data inside the RunStreamEvent as a RunStreamEvent4
func (t RunStreamEvent) AsRunStreamEvent4() (RunStreamEvent4, error) {
	var body RunStreamEvent4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStreamEvent4 overwrites any union data inside the RunStreamEvent as the provided RunStreamEvent4
func (t *RunStreamEvent) FromRunStreamEvent4(v RunStreamEvent4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStreamEvent4 performs a merge with any union data inside the RunStreamEvent, using the provided RunStreamEvent4
func (t *RunStreamEvent) MergeRunStreamEvent4(v RunStreamEvent4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStreamEvent5 returns the union data inside the RunStreamEvent as a RunStreamEvent5
func (t RunStreamEvent) AsRunStreamEvent5() (RunStreamEvent5, error) {
	var body RunStreamEvent5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStreamEvent5 overwrites any union data inside the RunStreamEvent as the provided RunStreamEvent5
func (t *RunStreamEvent) FromRunStreamEvent5(v RunStreamEvent5) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStreamEvent5 performs a merge with any union data inside the RunStreamEvent, using the provided RunStreamEvent5
func (t *RunStreamEvent) MergeRunStreamEvent5(v RunStreamEvent5) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStreamEvent6 returns the union data inside the RunStreamEvent as a RunStreamEvent6
func (t RunStreamEvent) AsRunStreamEvent6() (RunStreamEvent6, error) {
	var body RunStreamEvent6
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStreamEvent6 overwrites any union data inside the RunStreamEvent as the provided RunStreamEvent6
func (t *RunStreamEvent) FromRunStreamEvent6(v RunStreamEvent6) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStreamEvent6 performs a merge with any union data inside the RunStreamEvent, using the provided RunStreamEvent6
func (t *RunStreamEvent) MergeRunStreamEvent6(v RunStreamEvent6) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStreamEvent7 returns the union data inside the RunStreamEvent as a RunStreamEvent7
func (t RunStreamEvent) AsRunStreamEvent7() (RunStreamEvent7, error) {
	var body RunStreamEvent7
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStreamEvent7 overwrites any union data inside the RunStreamEvent as the provided RunStreamEvent7
func (t *RunStreamEvent) FromRunStreamEvent7(v RunStreamEvent7) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStreamEvent7 performs a merge with any union data inside the RunStreamEvent, using the provided RunStreamEvent7
func (t *RunStreamEvent) MergeRunStreamEvent7(v RunStreamEvent7) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStreamEvent8 returns the union data inside the RunStreamEvent as a RunStreamEvent8
func (t RunStreamEvent) AsRunStreamEvent8() (RunStreamEvent8, error) {
	var body RunStreamEvent8
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStreamEvent8 overwrites any union data inside the RunStreamEvent as the provided RunStreamEvent8
func (t *RunStreamEvent) FromRunStreamEvent8(v RunStreamEvent8) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStreamEvent8 performs a merge with any union data inside the RunStreamEvent, using the provided RunStreamEvent8
func (t *RunStreamEvent) MergeRunStreamEvent8(v RunStreamEvent8) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RunStreamEvent) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RunStreamEvent) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsThreadStreamEvent0 returns the union data inside the ThreadStreamEvent as a ThreadStreamEvent0
func (t ThreadStreamEvent) AsThreadStreamEvent0() (ThreadStreamEvent0, error) {
	var body ThreadStreamEvent0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromThreadStreamEvent0 overwrites any union data inside the ThreadStreamEvent as the provided ThreadStreamEvent0
func (t *ThreadStreamEvent) FromThreadStreamEvent0(v ThreadStreamEvent0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeThreadStreamEvent0 performs a merge with any union data inside the ThreadStreamEvent, using the provided ThreadStreamEvent0
func (t *ThreadStreamEvent) MergeThreadStreamEvent0(v ThreadStreamEvent0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ThreadStreamEvent) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ThreadStreamEvent) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
